(include "sys/func.inc")
(include "gui/gui/class.inc")
(include "gui/ctx/class.inc")
(include "gui/progress/class.inc")
(include "class/sym/class.inc")

(gen-create 'progress)
(gen-vtable 'progress)

(def-method 'progress :draw)
	;inputs
	;r0 = window object (ptr)
	;r1 = draw ctx (ptr)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'ctx)
	(long 'max 'val)
	(uint 'infill 'width 'height 'col)

	;save inputs
	(push-scope)
	(entry 'progress :draw {this, ctx})

	;get properties
	(call 'progress :get_long_prop {this, static_sym_maximum} {_, max})
	(call 'progress :get_long_prop {this, static_sym_value} {_, val})
	(call 'progress :get_long_prop {this, static_sym_color} {_, col})

	;draw outline
	(call 'ctx :set_color {ctx, col})
	(call 'progress :get_bounds {this} {_, _, _, width, height})
	(call 'ctx :box {ctx, 0, 0, width, height})

	;draw middle left
	(call 'ctx :darker {col} {col})
	(call 'ctx :set_color {ctx, col})
	(assign {(val * (width - 2)) // max} {infill})
	(call 'ctx :filled_box {ctx, 1, 1, infill, height - 2})

	;draw middle right
	(call 'ctx :darker {col} {col})
	(call 'ctx :set_color {ctx, col})
	(call 'ctx :filled_box {ctx, infill + 1, 1, width - 2 - infill, height - 2})

	(exit 'progress :draw {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'progress :pref_size)
	;inputs
	;r0 = progress object (ptr)
	;outputs
	;r0 = progress object (ptr)
	;r9 = preferred width (pixels)
	;r10 = preferred height (pixels)
	;trashes
	;r9-r10

	(entry 'progress :pref_size '(r0))
	(exit 'progress :pref_size '(r0 256 10))
	(vp-ret)

(def-func-end)
