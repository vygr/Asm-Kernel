(include "sys/func.inc")
(include "gui/font/class.inc")
(include "class/str/class.inc")
(include "class/num/class.inc")
(include "class/lisp/class.inc")

(def-method 'font :lisp_create)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'font :lisp_create '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 2) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'font :open))
	(list-bind-args r1 in '(str num))
	(call 'font :open in '(r0))
	(vpif '(r0 = 0))
		(assign '((rsp 0)) '(r0))
		(call 'obj :ref '((r0 lisp_sym_nil)) '(r0))
	(endif)
	(vp-cpy-rr r0 r1)
	(vp-pop r0)

	(exit 'font :lisp_create '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(create-font name pixels)" error_msg_wrong_types r1))
	(signature '(str num)))

(def-func-end)

(def-method 'font :lisp_glyph_paths)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ptr 'this 'info 'paths)
	(def-struct-end)

	(entry 'font :lisp_glyph_paths '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 2) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-alloc local_size)
	(defq in1 (method-input 'font :glyph_info)
		in2 (method-input 'font :glyph_paths))
	(assign '(r0) '((rsp local_this)))
	(list-bind-args r1 in1 '(font obj))
	(call 'font :glyph_info in1 `(,(elem 0 in2) ,(elem 2 in2)))
	(assign `((rsp local_this) ,(elem 2 in2)) `(,(elem 1 in2) (rsp local_info)))
	(assign `((,(elem 1 in2) lisp_stack)) `(,(elem 1 in2)))
	(call 'font :glyph_paths in2 '(_ (rsp local_paths) _ _))
	(call 'array :deref '((rsp local_info)))

	(exit 'font :lisp_glyph_paths '((rsp local_this) (rsp local_paths)))
	(vp-free local_size)
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(font-glyph-paths font str)" error_msg_wrong_types r1))
	(signature '(font str)))

(def-func-end)

(def-method 'font :lisp_glyph_ranges)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'font :lisp_glyph_ranges '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'font :glyph_ranges))
	(list-bind-args r1 in '(font))
	(call 'font :glyph_ranges in '(_ r1))
	(vp-pop r0)

	(exit 'font :lisp_glyph_ranges '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(font-glyph-ranges font)" error_msg_wrong_types r1))
	(signature '(font)))

(def-func-end)
