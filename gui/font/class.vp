(include "sys/func.inc")
(include "sys/str/class.inc")
(include "gui/font/class.inc")
(include "gui/texture/class.inc")
(include "class/sym/class.inc")
(include "class/list/class.inc")
(include "class/hmap/class.inc")
(include "class/pair/class.inc")
(include "sys/pii/class.inc")
(include "gui/gui/class.inc")
(include "gui/path/class.inc")
(include "gui/canvas/class.inc")
(include "gui/ctx/class.inc")

(gen-create 'font)
(gen-vtable 'font)

(def-method 'font :statics)
	;info
	;font static data
	(times font_statics_size (vp-byte 0))
(def-func-end)

(def-method 'font :open)
	;r0 = name c string (pubyte)
	;r1 = font size (pixels)
	;outputs
	;r0 = 0 if error, else font object (ptr)
	;trashes
	;r0-r14

	(ptr 'this 'name 'flat_set 'data)
	(pptr 'iter_begin 'iter_end)
	(uint 'pixels)

	(push-scope)
	(entry 'font :open {name, pixels})

	(assign (cat {@} (f-path 'font :statics) {.font_statics_intern}) {flat_set})
	(vpifnot {flat_set})
		(call 'list :create nil {flat_set})
		(assign {flat_set} (cat {@} (f-path 'font :statics) {.font_statics_intern}))
	(endif)

	;intern font
	(call 'list :get_both {flat_set} {_, iter_begin, iter_end})
	(assign {0} {data})
	(loop-while {iter_begin /= iter_end})
		(assign {*iter_begin} {this})
		(call 'sys_str :compare {&this->font_name->str_data, name})
		(vpif `(,(method-output 'sys_str :compare 0) = 0))
			(assign {this->font_data} {data})
			(gotoif {this->font_pixels = pixels} 'found)
		(endif)
		(assign {iter_begin + ptr_size} {iter_begin})
	(loop-end)
	(call 'font :create {name, data, pixels} {this})
	(vpif {this})
		(call 'list :push_back {flat_set, this})
	(vp-label 'found)
		(call 'font :ref {this})
	(endif)

	(exit 'font :open {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'font :init)
	;inputs
	;r0 = font object (ptr)
	;r1 = vtable (pptr)
	;r2 = name c string (pubyte)
	;r3 = 0, else ctf data string object (ptr)
	;r4 = font size (pixels)
	;outputs
	;r0 = font object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;r1-r14

	(ptr 'this 'name 'data)
	(union
		(ptr 'vtable)
		(ulong 'ok))
	(uint 'pixels)

	(push-scope)
	(entry 'font :init {this, vtable, name, data, pixels})

	;init parent
	(s-call 'font :init {this, vtable} {_, ok})
	(vpif {ok})
		;init state
		(assign {0, pixels} {this->font_chars, this->font_pixels})
		(call 'sym :intern_cstr {name} {this->font_name})
		(call 'hmap :create {0, 61} {this->font_sym_map})
		(vpif {data})
			(call 'str :ref {data} {this->font_data})
		(else)
			(call 'str :create_from_file {name} {this->font_data})
			(vpifnot {this->font_data})
				(call 'str :deref {this->font_name})
				(call 'hmap :deref {this->font_sym_map})
				(assign {0} {ok})
			(endif)
		(endif)
	(endif)

	(exit 'font :init {this, ok})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'font :deinit)
	;inputs
	;r0 = font object (ptr)
	;outputs
	;r0 = font object (ptr)
	;trashes
	;r1-r14

	(entry 'font :deinit '(r0))

	(vp-push r0)
	(call 'list :deref_if '((r0 font_chars)))
	(assign '((rsp 0)) '(r0))
	(call 'hmap :deref '((r0 font_sym_map)))
	(assign '((rsp 0)) '(r0))
	(call 'str :deref '((r0 font_name)))
	(assign '((rsp 0)) '(r0))
	(call 'str :deref '((r0 font_data)))
	(vp-pop r0)

	;deinit parent
	(s-jump 'font :deinit '(r0))

(def-func-end)

(def-method 'font :get_metrics)
	;inputs
	;r0 = font object (ptr)
	;outputs
	;r0 = font object (ptr)
	;r1 = ascent (pixels)
	;r2 = descent (pixels)
	;r3 = height (pixels)
	;trashes
	;r1-r4

	(entry 'font :get_metrics '(r0))

	(assign '((r0 font_data) (r0 font_pixels)) '(r3 r4))
	(vp-add-cr str_data r3)
	(assign '((r3 font_data_ascent) (r3 font_data_descent)) '(r1 r2))
	(vp-mul-rr r4 r1)
	(vp-mul-rr r4 r2)
	(assign '((& r1 r2)) '(r3))
	(vp-shr-cr 24 r1)
	(vp-shr-cr 24 r2)
	(vp-shr-cr 24 r3)

	(exit 'font :get_metrics '(r0 r1 r2 r3))
	(vp-ret)

(def-func-end)

(def-method 'font :glyph_data)
	;inputs
	;r0 = font object (ptr)
	;r1 = char code (uint)
	;outputs
	;r0 = font object (ptr)
	;r1 = 0, else glyph data pointer (ptr)
	;trashes
	;r1-r4

	(vp-def (this data c start end))

	(entry 'font :glyph_data `(,this ,c))

	(assign `((,this font_data)) `(,data))
	(vp-add-cr (+ str_data font_data_size) data)
	(loop-start)
		(assign `((,data font_page_end)) `(,end))
		(breakif `(,end = 0))
		(assign `((,data font_page_start)) `(,start))
		(vp-add-cr font_page_size data)
		(vpif `(,c >= ,start) `(,c <= ,end))
			(vp-sub-rr start c)
			(vp-shl-cr (log2 int_size) c)
			(assign `((,data ,c ui)) `(,c))
			(assign `((,this font_data)) `(,data))
			(vp-add-cr str_data data)
			(vp-add-rr c data)

			(exit 'font :glyph_data `(,this ,data))
			(vp-ret)
		(endif)
		(vp-sub-rr start end)
		(vp-add-cr 1 end)
		(vp-shl-cr (log2 int_size) end)
		(vp-add-rr end data)
	(endswitch)
	(vp-xor-rr data data)

	(exit 'font :glyph_data `(,this ,data))
	(vp-ret)

(def-func-end)

(def-method 'font :glyph_ranges)
	;inputs
	;r0 = font object (ptr)
	;outputs
	;r0 = font object (ptr)
	;r1 = glyph ranges array object (ptr)
	;trashes
	;r1-r7

	(vp-def (this data info start end) '(r6 r7 r0 r1 r2))

	(entry 'font :glyph_ranges `(,this))

	(call 'array :create nil `(,info))
	(assign `((,this font_data)) `(,data))
	(vp-add-cr (+ str_data font_data_size) data)
	(loop-start)
		(assign `((,data font_page_end)) `(,end))
		(breakif `(,end = 0))
		(assign `((,data font_page_start)) `(,start))
		(call 'array :push_back2 `(,info ,start ,end) `(,info ,start ,end _ _))
		(vp-sub-rr start end)
		(vp-add-cr font_page_size data)
		(vp-add-cr 1 end)
		(vp-shl-cr (log2 int_size) end)
		(vp-add-rr end data)
	(endswitch)

	(exit 'font :glyph_ranges `(,this ,info))
	(vp-ret)

(def-func-end)

(def-method 'font :glyph_info)
	;inputs
	;r0 = font object (ptr)
	;r1 = utf8 encoded str object (ptr)
	;outputs
	;r0 = font object (ptr)
	;r1 = glyph info array object (ptr)
	;trashes
	;r1-r8

	(vp-def (this utf8 info data c) '(r6 r7 r8 r7 r1))

	(entry 'font :glyph_info `(,this ,utf8))

	(call 'array :create nil `(,info))
	(call 'array :set_capacity `(,info (,utf8 str_length)) `(,info))
	(assign `((& ,utf8 str_data)) `(,data))
	(loop-start)
		(call 'sys_str :read_utf8 `(,data) `(,data ,c))
		(breakif `(,c = 0))
		(call 'font :glyph_data `(,this ,c) `(_ ,c))
		(call 'array :push_back `(,info ,c))
	(loop-end)

	(exit 'font :glyph_info `(,this ,info))
	(vp-ret)

(def-func-end)

(def-method 'font :glyph_bounds)
	;inputs
	;r0 = font object (ptr)
	;r1 = glyph info array object (ptr)
	;outputs
	;r0 = font object (ptr)
	;r1 = width (pixels)
	;r2 = height (pixels)
	;trashes
	;r1-r7

	(vp-def (this w h gap gw iter_begin iter_end info))

	(entry 'font :glyph_bounds `(,this ,info))

	(assign `((,this font_data)) `(,iter_begin))
	(vp-add-cr str_data iter_begin)
	(assign `((,iter_begin font_data_ascent) (,iter_begin font_data_descent)) `(,h ,gap))
	(vp-add-rr gap h)
	(vp-cpy-rr h gap)
	(vp-shr-cr 4 gap)
	(vp-cpy-rr gap w)

	(class/array/get_both info iter_begin iter_end)
	(loop-while `(,iter_begin /= ,iter_end))
		(assign `((,iter_begin 0)) `(,info))
		(vpif `(,info = 0))
			(vp-cpy-rr h gw)
			(vp-shr-cr 2 gw)
		(else)
			(assign `((,info font_path_width)) `(,gw))
		(endif)
		(vp-add-rr gw w)
		(vp-add-rr gap w)
		(vp-add-cr ptr_size iter_begin)
	(loop-end)

	(assign `((,this font_pixels)) `(,gw))
	(vp-mul-rr gw w)
	(vp-mul-rr gw h)
	(vp-shr-cr 24 w)
	(vp-shr-cr 24 h)
	(vp-add-cr 1 w)

	(exit 'font :glyph_bounds `(,this ,w ,h))
	(vp-ret)

(def-func-end)

(def-method 'font :glyph_paths)
	;inputs
	;r0 = font object (ptr)
	;r1 = stack array object (ptr)
	;r2 = glyph info array object (ptr)
	;outputs
	;r0 = font object (ptr)
	;r1 = glyph paths list object (ptr)
	;r2 = width (pixels)
	;r3 = height (pixels)
	;trashes
	;r1-r14

	(defun-bind trans_xy (rx ry)
		(vp-add-rr ox rx)
		(vp-add-rr oy ry)
		(vp-mul-rr pixels rx)
		(vp-mul-rr pixels ry)
		(vp-asr-cr 7 rx)
		(vp-asr-cr 7 ry))

	(ptr 'this 'stack 'paths 'path 'info)
	(pptr 'iter_begin 'iter_end)
	(puint 'data 'data_end)
	(int 'x 'y 'pos_x 'pos_y)
	(uint 'width 'height 'gap 'ox 'oy)

	(push-scope)
	(entry 'font :glyph_paths {this, stack, info})

	(assign {&this->font_data->str_data} {iter_begin})
	(assign {iter_begin->font_data_ascent + iter_begin->font_data_descent} {height})
	(assign {height >> 4} {gap})
	(call 'list :create nil {paths})
	(assign {gap, 0} {ox, oy})
	(call 'array :get_both {info} {_, iter_begin, iter_end})
	(loop-while {iter_begin /= iter_end})
		(assign {*iter_begin} {data})
		(vpif {data})
			(vp-def (data ox oy data_end width x y c pixels))
			(assign {data, ox, oy} `(,data ,ox ,oy))
			(assign `((,data font_path_width) (,data font_path_len)) `(,width ,data_end))
			(vp-add-cr font_path_size data)
			(vp-add-rr data data_end)
			(assign `(,data ,data_end ,ox ,oy ,width) {data, data_end, pos_x, pos_y, width})

			(loop-while `(,data /= ,data_end))
				(assign {this->font_pixels} `(,pixels))
				(assign `((,data font_path_element_type) (,data font_line_element_x) (,data font_line_element_y)) `(,c ,x ,y))
				(trans_xy x y)
				(assign `(,x ,y) {x, y})

				(switch)
				(vpcase `(,c = 2))
					;curveto
					(call 'path :pop_back2 {path})
					(vp-def (path stack pos_x pos_y x y x1 y1 x2 y2 eps data ox oy pixels)
						(method-input 'path :gen_cubic))
					(assign {data, path, stack, pos_x, pos_y, x, y, 0.25, ox, oy, this->font_pixels}
						`(,data ,path ,stack ,pos_x ,pos_y ,x ,y ,eps ,ox ,oy ,pixels))
					(assign `((,data font_curve_element_x1) (,data font_curve_element_y1)
						(,data font_curve_element_x2) (,data font_curve_element_y2)) `(,x1 ,y1 ,x2 ,y2))
					(trans_xy x1 y1)
					(trans_xy x2 y2)
					(call 'path :gen_cubic `(,path ,stack ,pos_x ,pos_y ,x ,y ,x1 ,y1 ,x2 ,y2 ,eps))

					(assign {data, ox, oy, this->font_pixels} `(,data ,ox ,oy ,pixels))
					(assign `((,data font_curve_element_x2) (,data font_curve_element_y2)) `(,x2 ,y2))
					(trans_xy x2 y2)
					(vp-add-cr font_curve_element_size data)
					(assign `(,x2 ,y2 ,data) {pos_x, pos_y, data})
					(break)
				(vpcase `(,c = 1))
					;lineto
				(vp-label 'lineto)
					(call 'path :push_back2 {path, x, y})
					(assign {x, y, data + font_line_element_size} {pos_x, pos_y, data})
					(break)
				(vpcase `(,c = 0))
					;moveto
					(call 'path :create nil {path})
					(call 'list :push_back {paths, path})
					(goto 'lineto)
				(endswitch)
				(vp-def (data ox oy data_end))
				(assign {data, data_end, ox, oy} `(,data ,data_end ,ox ,oy))
			(loop-end)
			(assign {ox + width + gap} {ox})
		(else)
			(assign {ox + (height >> 2) + gap} {ox})
		(endif)
		(assign {iter_begin + ptr_size} {iter_begin})
	(loop-end)
	(assign {&this->font_data->str_data} {iter_begin})

	(exit 'font :glyph_paths {this, paths, (ox * this->font_pixels >> 24) + 1, ((iter_begin->font_data_ascent + iter_begin->font_data_descent) * this->font_pixels) >> 24})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'font :sym_texture)
	;inputs
	;r0 = font object (ptr)
	;r1 = utf8 encoded sym object (ptr)
	;outputs
	;r0 = font object (ptr)
	;r1 = 0, else texture object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'sym 'txt 'sym_canvas 'paths 'info)
	(uint 'w 'h)
	(union
		(ptr 'font_statics)
		(pptr 'iter 'bucket))

	(push-scope)
	(entry 'font :sym_texture {this, sym})

	;look up string in sym map
	(call 'hmap :find {this->font_sym_map, sym} {_, iter, bucket})
	(vpifnot {iter})
		;create sym canvas
		(call 'font :glyph_info {this, sym} {_, info})
		(call 'font :glyph_paths (cat {this, @} (f-path 'sys_task :statics)
			{.tk_statics_current_tcb->tk_node_tls, info}) {_, paths, w, h})
		(call 'canvas :create {w, h, 2} {sym_canvas})
		(call 'canvas :fill {sym_canvas, 0})
		(assign {argb_white, 1} {sym_canvas->canvas_color, sym_canvas->canvas_flags})
		(call 'font :get_metrics {this} {_, h, _, _})
		(call 'canvas :fpoly {sym_canvas, 0, h << (+fp_shift+ + 1), 0, paths})

		;take texture from canvas
		(call 'canvas :swap {sym_canvas})
		(assign {sym_canvas->canvas_texture} {txt})
		(assign {0} {sym_canvas->canvas_texture})

		;free all the gubins
		(call 'canvas :deref {sym_canvas})
		(call 'array :deref {info})
		(call 'list :deref {paths})
		(breakifnot {txt})

		;create new entry
		(call 'sym :ref {sym})
		(call 'pair :create {sym, txt} {iter})
		(call 'list :push_back {bucket, iter})
		(call 'texture :ref {txt})

		;flush cache ?
		(assign (cat {@} (f-path 'font :statics)) {font_statics})
		(vpif {(font_statics->font_statics_count + 1 => font_statics->font_statics_count) >= font_max_word_cache})
			(call 'font :flush)
		(endif)
	(else)
		(call 'pair :ref_second {*iter} {_, txt})
	(endif)

	(exit 'font :sym_texture {this, txt})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'font :ascii_textures)
	;inputs
	;r0 = font object (ptr)
	;outputs
	;r0 = font object (ptr)
	;r1 = list of ascii texture objects (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'sym 'txt 'chars)
	(uint 'code)

	;save inputs
	(push-scope)
	(entry 'font :ascii_textures {this})

	;lazy create char textures
	(vpifnot {this->font_chars})
		;note, don't write to member var yet in case flush gets called !
		(call 'list :create nil {chars})
		(call 'list :set_capacity {chars, 127 - 33})
		(assign {33} {code})
		(loop-start)
			(call 'sym :intern_cstr {&code} {sym})
			(call 'font :sym_texture {this, sym} {_, txt})
			(vpif {txt})
				(call 'list :push_back {chars, txt})
			(endif)
			(call 'sym :deref {sym})
		(loop-until {(code + 1 => code) = 127})
		(vpif {this->font_chars})
			;another thread got to it during a flush !
			(call 'list :deref {chars})
		(else)
			(assign {chars} {this->font_chars})
		(endif)
	(endif)
	(call 'list :ref {this->font_chars})

	(exit 'font :ascii_textures {this, this->font_chars})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'font :flush)
	;trashes
	;r0-r14

	(ptr 'font 'new_map 'flat_set 'tmp)
	(uint 'length 'index)

	(push-scope)

	;must not use iters as kernel callbacks will deshedule us !
	(assign (cat {0, @} (f-path 'font :statics) {.font_statics_intern}) {index, flat_set})
	(loop-start)
		(call 'list :get_length {flat_set} {_, length})
		(breakif {index = length})
		(call 'list :get_element {flat_set, index} {_, font})
		(vpif {font->font_chars})
			(vpif {font->font_chars->obj_count = 1})
				;during deref font_chars could be written to !
				(assign {font->font_chars} {tmp})
				(assign {0} {font->font_chars})
				(call 'list :deref {tmp})
			(endif)
		(endif)
		(call 'hmap :create {font->font_sym_map->hset_key_callback,
			font->font_sym_map->hset_num_buckets} {new_map})
		(call 'hmap :for_each {font->font_sym_map, $flush_callback, &new_map})
		;during deref font_sym_map could be written to !
		(assign {font->font_sym_map} {tmp})
		(assign {new_map} {font->font_sym_map})
		(call 'hmap :deref {tmp})
		(assign {index + 1} {index})
	(loop-end)

	(pop-scope)
	(return)

(vp-label 'flush_callback)
	;inputs
	;r0 = predicate data (ptr)
	;r1 = element iterator (pptr)
	;outputs
	;r1 = 0 if break, else not
	;trashes
	;r1-r14

	(vp-cpy-ir r1 0 r1)
	(assign '((r1 pair_second)) '(r2))
	(assign '((r2 obj_count)) '(r2))
	(switch)
	(vpcase '(r2 /= 1))
		(vp-cpy-ir r0 0 r2)
		(call 'obj :ref '(r1) '(r0))
		(vp-push r0)
		(call 'hset :get_bucket '(r2 r0) '(_ r0))
		(vp-pop r1)
		(jump 'list :push_back '(r0 r1))
	(default)
		(f-bind 'font :statics r0)
		(assign '((r0 font_statics_count)) '(r2))
		(vp-sub-cr 1 r2)
		(assign '(r2) '((r0 font_statics_count)))
	(endif)
	(vp-ret)

(def-func-end)
