(include 'sys/func.inc)
(include 'sys/string/class.inc)
(include 'gui/font/class.inc)
(include 'gui/texture/class.inc)
(include 'class/symbol/class.inc)
(include 'class/vector/class.inc)
(include 'class/hash_map/class.inc)
(include 'class/pair/class.inc)
(include 'sys/pii/class.inc)
(include 'gui/gui/class.inc)

(gen-new 'font)
(gen-create 'font)
(gen-class 'font)

(def-method 'font 'statics)
	;info
	;font static data
	(times font_statics_size (vp-byte 0))
(def-func-end)

(def-method 'font 'open)
	;r0 = name c string (pubyte)
	;r1 = font size (points)
	;outputs
	;r0 = 0 if error, else font object (ptr)
	;trashes
	;all

	(ptr 'this 'name 'flat_set)
	(pptr 'iter_begin 'iter_end)
	(uint 'points)

	(push-scope)
	(entry 'font 'open {name, points})

	(assign (cat {@} (f-path 'font 'statics) {.font_statics_intern}) {flat_set})
	(vpifnot {flat_set})
		(call 'vector 'create {} {flat_set})
		(assign {flat_set} (cat {@} (f-path 'font 'statics) {.font_statics_intern}))
	(endif)

	;intern font
	(call 'vector 'get_iters {flat_set} {_, iter_begin, iter_end})
	(loop-while {iter_begin != iter_end})
		(assign {*iter_begin} {this})
		(vpif {this->font_points == points})
			(call 'sys_string 'compare {this->font_name->string_data, name})
			(gotoif (list (method-output 'sys_string 'compare 0) '== 0) 'found)
		(endif)
		(assign {iter_begin + ptr_size} {iter_begin})
	(loop-end)
	(call 'font 'create {name, points} {this})
	(vpif {this})
		(call 'vector 'push_back {flat_set, this})
	(vp-label 'found)
		(call 'font 'ref {this})
	(endif)

	(exit 'font 'open {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'font 'init 16)
	;inputs
	;r0 = font object (ptr)
	;r1 = vtable (pptr)
	;r2 = name c string (pubyte)
	;r3 = font size (points)
	;outputs
	;r0 = font object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;all but r0

	(ptr 'this 'name)
	(union
		'(ptr 'vtable)
		'(ulong 'ok))
	(uint 'points)

	(push-scope)
	(entry 'font 'init {this, vtable, name, points})

	;init parent
	(s-call 'font 'init {this, vtable} {_, ok})
	(vpif {ok})
		;init state
		(assign {0, points} {this->font_chars, this->font_points})
		(call 'symbol 'intern_cstr {name} {this->font_name})
		(call 'hash_map 'create (cat {@} (f-path 'symbol 'same) {, 61}) {this->font_word_map})

		;kernel callback for open
		(call 'sys_task 'callback {this, $open_callback})
		(vpifnot {this->font_handle})
			(call 'string 'deref {this->font_name})
			(call 'hash_map 'deref {this->font_word_map})
			(assign {0} {ok})
		(endif)
	(endif)

	(exit 'font 'init {this, ok})
	(pop-scope)
	(return)

(vp-label 'open_callback)
	;inputs
	;r0 = user data

	(ptr 'user 'old_stack)

	(vp-cpy-rr rsp r1)
	(push-scope)
	(vp-and-cr -16 rsp)
	(entry {user, old_stack})

	(host-call 'host 'ttf_open_font {&user->font_name->string_data, user->font_points} {user->font_handle})
	(vpif {user->font_handle})
		;fill in ascent, descent and height
		(host-call 'host 'ttf_font_ascent {user->font_handle} {user->font_ascent})
		(host-call 'host 'ttf_font_descent {user->font_handle} {user->font_descent})
		(host-call 'host 'ttf_font_height {user->font_handle} {user->font_height})
	(endif)

	(assign {old_stack} '(rsp))
	(pop-scope-syms)
	(return)

(def-func-end)

(def-method 'font 'deinit)
	;inputs
	;r0 = font object (ptr)
	;outputs
	;r0 = font object (ptr)
	;trashes
	;all but r0

	(ptr 'this)

	(push-scope)
	(entry 'font 'deinit {this})

	(call 'vector 'deref_if {this->font_chars})
	(call 'hash_map 'deref {this->font_word_map})
	(call 'string 'deref {this->font_name})
	(call 'sys_task 'callback {this, $close_callback})

	(exit 'font 'deinit {this})
	(pop-scope)
	(s-jump 'font 'deinit '(r0))

(vp-label 'close_callback)
	;inputs
	;r0 = user data

	(host-call 'host 'ttf_close_font '((r0 font_handle)))
	(vp-ret)

(def-func-end)

(def-method 'font 'ref_word 16)
	;inputs
	;r0 = font object (ptr)
	;r1 = string object (ptr)
	;outputs
	;r0 = font object (ptr)
	;r1 = texture object (ptr)
	;trashes
	;all but r0

	(def-struct 'local)
		(ptr 'this 'word 'txt)
	(def-struct-end)

	(ptr 'this 'word 'txt)
	(union
		'(ptr 'font_statics)
		'(pptr 'iter 'bucket))

	(push-scope)
	(entry 'font 'ref_word {this, word})

	;look up string in word map
	(call 'hash_map 'find {this->font_word_map, word} {_, iter, bucket})
	(vpifnot {iter})
		;create new entry
		(call 'texture 'create {0, 0, 0} {txt})
		(call 'symbol 'ref {word})
		(call 'pair 'create {word, txt} {iter})
		(call 'vector 'push_back {bucket, iter})
		(call 'texture 'ref {txt})

		;kernel callback for word texture creation
		(call 'sys_task 'callback {&this, $word_callback})

		;flush cache ?
		(assign (cat {@} (f-path 'font 'statics)) {font_statics})
		(assign {font_statics->font_statics_count + 1} {font_statics->font_statics_count})
		(vpif {font_statics->font_statics_count >= font_max_word_cache})
			(call 'font 'flush_cache)
		(endif)
	(else)
		(call 'pair 'get_second {*iter} {_, txt})
		(call 'texture 'ref {txt})
	(endif)

	(exit 'font 'ref_word {this, txt})
	(pop-scope)
	(return)

(vp-label 'word_callback)
	;inputs
	;r0 = user data

	(ptr 'user 'surface 'old_stack)
	(ulong 'handle)

	(vp-cpy-rr rsp r1)
	(push-scope)
	(vp-and-cr -16 rsp)
	(entry {user, old_stack})

	(host-call 'host 'ttf_render_utf8_blended {user->local_this->font_handle, &user->local_word->string_data, 0xffffff} {surface})
	(vpif {surface})
		;create word texture
		(host-call 'host 'sdl_create_texture_from_surface (cat {@} (f-path 'gui 'statics) {.gui_statics_renderer, surface}) {handle})
		(vpif {handle})
			;texture blend mode and save details
			(host-call 'host 'sdl_set_texture_blend_mode {handle, SDL_BLENDMODE_BLEND})
			(assign {handle, surface->sdl_surface_w, surface->sdl_surface_h}
				{user->local_txt->texture_handle, user->local_txt->texture_width, user->local_txt->texture_height})
		(endif)
		(host-call 'host 'sdl_free_surface {surface})
	(endif)

	(assign {old_stack} '(rsp))
	(pop-scope-syms)
	(return)

(def-func-end)

(def-method 'font 'ref_chars)
	;inputs
	;r0 = font object (ptr)
	;outputs
	;r0 = font object (ptr)
	;r1 = char texture vector object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'word 'txt 'chars)
	(uint 'code)

	;save inputs
	(push-scope)
	(entry 'font 'ref_chars {this})

	;lazy create char textures
	(vpifnot {this->font_chars})
		;note, don't write to member var yet in case flush_cache gets called !
		(call 'vector 'create nil {chars})
		(call 'vector 'set_capacity {chars, 127 - 33})
		(assign {33} {code})
		(loop-start)
			(call 'symbol 'intern_cstr {&code} {word})
			(call 'font 'ref_word {this, word} {_, txt})
			(call 'vector 'push_back {chars, txt})
			(call 'symbol 'deref {word})
			(assign {code + 1} {code})
		(loop-until {code == 127})
		(vpif {this->font_chars})
			;another thread got to it during a flush_cache !
			(call 'vector 'deref {chars})
		(else)
			(assign {chars} {this->font_chars})
		(endif)
	(endif)
	(call 'vector 'ref {this->font_chars})

	(exit 'font 'ref_chars {this, this->font_chars})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'font 'flush_cache)
	;trashes
	;all

	(ptr 'font 'new_map 'flat_set 'tmp)
	(uint 'length 'index)

	(push-scope)

	;must not use iters as kernel callbacks will deshedule us !
	(assign (cat {0, @} (f-path 'font 'statics) {.font_statics_intern}) {index, flat_set})
	(loop-start)
		(call 'vector 'get_length {flat_set} {_, length})
		(breakif {index == length})
		(call 'vector 'get_element {flat_set, index} {_, font})
		(vpif {font->font_chars})
			(vpif {font->font_chars->obj_count == 1})
				;during deref font_chars could be written to !
				(assign {font->font_chars} {tmp})
				(assign {0} {font->font_chars})
				(call 'vector 'deref {tmp})
			(endif)
		(endif)
		(call 'hash_map 'create {font->font_word_map->hash_set_key_callback,
			font->font_word_map->hash_set_num_buckets} {new_map})
		(call 'hash_map 'for_each {font->font_word_map, $flush_callback, &new_map})
		;during deref font_word_map could be written to !
		(assign {font->font_word_map} {tmp})
		(assign {new_map} {font->font_word_map})
		(call 'hash_map 'deref {tmp})
		(assign {index + 1} {index})
	(loop-end)

	(pop-scope)
	(return)

(vp-label 'flush_callback)
	;inputs
	;r0 = predicate data (ptr)
	;r1 = element iterator (pptr)
	;outputs
	;r1 = 0 if break, else not

	(vp-cpy-ir r1 0 r1)
	(vp-cpy-ir r1 pair_second r2)
	(vp-cpy-ir-ui r2 obj_count r2)
	(vpif '(r2 != 1))
		(vp-cpy-ir r0 0 r2)
		(call 'obj 'ref '(r1) '(r0))
		(vp-push r0)
		(call 'hash_set 'get_bucket '(r2 r0) '(_ r0))
		(vp-pop r1)
		(jump 'vector 'push_back '(r0 r1))
	(else)
		(fn-bind (f-path 'font 'statics) r0)
		(vp-cpy-ir r0 font_statics_count r2)
		(vp-sub-cr 1 r2)
		(vp-cpy-ri r2 r0 font_statics_count)
	(endif)
	(vp-ret)

(def-func-end)
