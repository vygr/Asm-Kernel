(include "sys/func.inc")
(include "gui/gui/class.inc")
(include "gui/ctx/class.inc")
(include "gui/font/class.inc")
(include "gui/texture/class.inc")
(include "class/list/class.inc")
(include "gui/text/class.inc")
(include "class/sym/class.inc")

(gen-create 'text)
(gen-vtable 'text)

(def-method 'text :init)
	;inputs
	;r0 = text object (ptr)
	;r1 = vtable (pptr)
	;outputs
	;r0 = text object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;r1-r14

	(entry 'text :init '(r0 r1))

	(s-call 'text :init '(r0 r1) '(r0 r1))
	(vpif '(r1 /= 0))
		;init myself
		(vp-xor-rr r2 r2)
		(assign '(r2 r2) '((r0 text_string) (r0 text_syms)))
	(endif)

	(exit 'text :init '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'text :deinit)
	;inputs
	;r0 = text object (ptr)
	;outputs
	;r0 = text object (ptr)
	;trashes
	;r1-r14

	(entry 'text :deinit '(r0))

	;deref any syms
	(vp-push r0)
	(call 'list :deref_if '((r0 text_syms)))
	(vp-pop r0)
	(s-jump 'text :deinit '(r0))

(def-func-end)

(def-method 'text :draw)
	;inputs
	;r0 = view object (ptr)
	;r1 = draw ctx (ptr)
	;outputs
	;r0 = view object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'ctx 'txt 'font 'str)
	(pptr 'syms 'syms_end)
	(ulong 'handle)
	(int 'x 'w 'h)
	(uint 'col)

	;save inputs
	(push-scope)
	(entry 'text :draw {this, ctx})

	;get properties, do checks for any changes
	(call 'text :get_long_prop {this, static_sym_ink_color} {_, col})
	(call 'text :get_prop {this, static_sym_font} {_, font})
	(call 'text :get_prop {this, static_sym_text} {_, str})
	(vpif {str && str /= this->text_string})
		(assign {str} {this->text_string})
		(call 'text :switch_text {this})
	(endif)

	;draw text
	(vpif {this->text_string && font})
		(call 'list :get_both {this->text_syms} {_, syms, syms_end})
		(vpif {syms /= syms_end})
			(assign {0} {x})
			(loop-start)
				(call 'font :sym_texture {font, *syms} {_, txt})
				(vpif {txt})
					(call 'texture :get_metrics {txt} {_, handle, w, h})
					(call 'ctx :blit {ctx, handle, col, x, 0, w, h})
					(assign {x + w + (h >> 2)} {x})
					(call 'texture :deref {txt})
				(endif)
			(loop-until {(syms + ptr_size => syms) = syms_end})
		(endif)
	(endif)

	(exit 'text :draw {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'text :pref_size)
	;inputs
	;r0 = text object (ptr)
	;outputs
	;r0 = text object (ptr)
	;r9 = preferred width (pixels)
	;r10 = preferred height (pixels)
	;trashes
	;r1-r14

	(ptr 'this 'font 'str 'info)
	(pptr 'syms 'syms_end)
	(uint 'width 'height 'length 'sym_w)

	;save inputs
	(push-scope)
	(entry 'text :pref_size {this})

	;get properties, do checks for any changes
	(call 'text :get_prop {this, static_sym_font} {_, font})
	(call 'text :get_prop {this, static_sym_text} {_, str})
	(vpif {str && str /= this->text_string})
		(assign {str} {this->text_string})
		(call 'text :switch_text {this})
	(endif)

	;bounds of text
	(assign {0 => width} {height})
	(vpif {this->text_string && font})
		(call 'font :get_metrics {font} {_, _, _, height})
		(call 'list :get_both {this->text_syms} {_, syms, syms_end})
		(vpif {syms /= syms_end})
			(loop-start)
				(call 'font :glyph_info {font, *syms} {_, info})
				(call 'font :glyph_bounds {font, info} {_, sym_w, height})
				(call 'texture :deref {info})
				(assign {width + sym_w} {width})
			(loop-until {(syms + ptr_size => syms) = syms_end})
		(endif)
		(d-call 'list :get_length {this->text_syms} {_, length})
		(assign {width + (length - 1) * (height >> 2)} {width})
	(endif)

	(exit 'text :pref_size {this, width, height})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'text :switch_text)
	;inputs
	;r0 = text object (ptr)
	;outputs
	;r0 = text object (ptr)
	;trashes
	;r1-r14

	(entry 'text :switch_text '(r0))

	;create new split syms
	(vp-push r0)
	(call 'list :deref_if '((r0 text_syms)))
	(assign '((rsp 0)) '(r0))
	(call 'str :split_char '((r0 text_string) char_space) '(_ r1))
	(call 'sym :intern_strs '(r1) '(r1))
	(vp-pop r0)
	(assign '(r1) '((r0 text_syms)))

	(entry 'text :switch_text '(r0))
	(vp-ret)

(def-func-end)
