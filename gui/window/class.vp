(include 'sys/func.inc)
(include 'gui/gui/class.inc)
(include 'gui/region/class.inc)
(include 'gui/window/class.inc)
(include 'gui/title/class.inc)
(include 'gui/button/class.inc)
(include 'gui/flow/class.inc)
(include 'gui/ctx/class.inc)
(include 'class/sym/class.inc)

(gen-create 'window)
(gen-vtable 'window)

(def-method 'window 'init)
	;inputs
	;r0 = window object (ptr)
	;r1 = vtable (pptr)
	;r2 = options flags (ulong)
	;outputs
	;r0 = window object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;r1-r14

	(ptr 'this 'title_flow)
	(ulong 'flags)

	(push-scope)
	(entry 'window 'init '(r0 r1 r2))
	(assign '(r2) {flags})

	;init parent
	(s-call 'window 'init '(r0 r1) '(r0 r1))
	(vpif '(r1 /= 0))
		;init myself
		(assign '(r0) {this})
		(call 'window 'set_font_prop '(r0 static_sym_font "fonts/OpenSans-Regular.ctf" 18) '(r0))
		(call 'window 'set_long_prop '(r0 static_sym_ink_color argb_black) '(r0))
		(call 'window 'set_long_prop '(r0 static_sym_color window_col) '(r0))
		(call 'window 'set_long_prop '(r0 static_sym_border 5) '(r0))
		(call 'window 'set_long_prop '(r0 static_sym_min_width 0) '(r0))
		(call 'window 'set_long_prop '(r0 static_sym_min_height 0) '(r0))
		(call 'sys_mem 'fill '((& r0 window_start) (- window_size window_start) 0))

		;add status panel, add_back not add_child !!!
		(call 'flow 'create nil {this->window_status_panel})
		(call 'flow 'set_long_prop {this->window_status_panel, static_sym_flow_flags, flow_flag_up | flow_flag_fillw | flow_flag_lasth})
		(call 'window 'add_back {this, this->window_status_panel})

		;add status label ?
		(vpif {flags & window_flag_status})
			(call 'label 'create nil {this->window_status})
			(call 'label 'set_long_prop {this->window_status, static_sym_color, status_col})
			(call 'flow 'add_child {this->window_status_panel, this->window_status})
		(endif)

		;add title panel
		(call 'flow 'create nil {this->window_title_panel})
		(call 'flow 'set_long_prop {this->window_title_panel, static_sym_flow_flags, flow_flag_down | flow_flag_fillw | flow_flag_lasth})
		(call 'flow 'add_child {this->window_status_panel, this->window_title_panel})

		;add title flow panel
		(call 'flow 'create nil {title_flow})
		(call 'flow 'set_long_prop {title_flow, static_sym_flow_flags, flow_flag_left | flow_flag_fillh | flow_flag_lastw} '(r0))
		(call 'flow 'set_long_prop '(r0 static_sym_color title_col))
		(call 'flow 'add_child {this->window_title_panel, title_flow})

		;add close button ?
		(vpif {flags & window_flag_close})
			(call 'button 'create nil {this->window_close})
			(call 'button 'set_font_prop {this->window_close, static_sym_font, "fonts/Entypo.ctf", 22} '(r0))
			(call 'button 'set_str_prop `(r0 static_sym_text ,(num-to-utf8 0xea19)))
			(call 'flow 'add_child {title_flow, this->window_close})
		(endif)

		;add max button
		(vpif {flags & window_flag_max})
			(call 'button 'create nil {this->window_max})
			(call 'button 'set_font_prop {this->window_max, static_sym_font, "fonts/Entypo.ctf", 22} '(r0))
			(call 'button 'set_str_prop `(r0 static_sym_text ,(num-to-utf8 0xea1b)))
			(call 'flow 'add_child {title_flow, this->window_max})
		(endif)

		;add min button
		(vpif {flags & window_flag_min})
			(call 'button 'create nil {this->window_min})
			(call 'button 'set_font_prop {this->window_min, static_sym_font, "fonts/Entypo.ctf", 22} '(r0))
			(call 'button 'set_str_prop `(r0 static_sym_text ,(num-to-utf8 0xea1a)))
			(call 'flow 'add_child {title_flow, this->window_min})
		(endif)

		;add title
		(call 'title 'create nil {this->window_title})
		(call 'flow 'add_child {title_flow, this->window_title})

		(assign {this, 1} '(r0 r1))
	(endif)

	(exit 'window 'init '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)

(def-method 'window 'add_child)
	;inputs
	;r0 = window object (ptr)
	;r1 = child view object (ptr)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;r1-r14

	(entry 'window 'add_child '(r0 r1))

	(vp-push r0)
	(call 'flow 'add_child '((r0 window_title_panel) r1))
	(vp-pop r0)

	(exit 'window 'add_child '(r0))
	(vp-ret)

(def-func-end)

(def-method 'window 'draw)
	;inputs
	;r0 = window object (ptr)
	;r1 = draw ctx (ptr)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;r1-r14

	(entry 'window 'draw '(r0 r1))

	;draw panel
	(vp-push r1)
	(call 'window 'get_long_prop '(r0 static_sym_border) '(r0 r3))
	(vp-pop r1)
	(call 'window 'draw_panel '(r0 r1 1 r3) '(r0))

	(exit 'window 'draw '(r0))
	(vp-ret)

(def-func-end)

(def-method 'window 'layout)
	;inputs
	;r0 = window object (ptr)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;r1-r14

	(entry 'window 'layout '(r0))

	(call 'window 'get_long_prop '(r0 static_sym_border) '(r0 r1))
	(assign '((r0 view_w) (r0 view_h)) '(r9 r10))
	(vp-sub-rr r1 r9)
	(vp-sub-rr r1 r10)
	(vp-sub-rr r1 r9)
	(vp-sub-rr r1 r10)
	(vp-push r0)
	(call 'flow 'change '((r0 window_status_panel) r1 r1 r9 r10))
	(vp-pop r0)
	(call 'window 'get_long_prop '(r0 static_sym_color) '(r0 r1))
	(vp-shr-cr 24 r1)
	(vpif '(r1 = 0xff))
		(call 'view 'set_flags '(r0 view_flag_opaque view_flag_opaque) '(r0 _))
	(endif)

	(exit 'window 'layout '(r0))
	(vp-ret)

(def-func-end)

(def-method 'window 'mouse_down)
	;inputs
	;r0 = window object (ptr)
	;r1 = mouse event data (ptr)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;r1-r14

	(entry 'window 'mouse_down '(r0 r1))

	(vp-push r1)
	(call 'window 'get_long_prop '(r0 static_sym_border) '(r0 r1))
	(vp-pop r2)
	(assign '((r2 ev_msg_mouse_rx) (r2 ev_msg_mouse_ry)) '(r3 r4))
	(vp-xor-rr r2 r2)
	(vpif '(r3 < r1))
		;left edge
		(vp-or-cr window_drag_left r2)
	(endif)
	(assign '((r0 view_w)) '(r5))
	(vp-cpy-rr r5 r6)
	(vp-sub-rr r1 r6)
	(vpif '(r3 >= r6))
		;right edge
		(vp-or-cr window_drag_right r2)
		(vp-sub-rr r5 r3)
	(endif)
	(vpif '(r4 < r1))
		;top edge
		(vp-or-cr window_drag_top r2)
	(endif)
	(assign '((r0 view_h)) '(r5))
	(vp-cpy-rr r5 r6)
	(vp-sub-rr r1 r6)
	(vpif '(r4 >= r6))
		;right edge
		(vp-or-cr window_drag_bottom r2)
		(vp-sub-rr r5 r4)
	(endif)
	(assign '(r2 r3 r4) '((r0 window_drag_mode) (r0 window_offset_x) (r0 window_offset_y)))

	(exit 'window 'mouse_down '(r0))
	(vp-ret)

(def-func-end)

(def-method 'window 'mouse_move)
	;inputs
	;r0 = window object (ptr)
	;r1 = mouse event data (ptr)
	;outputs
	;r0 = window object (ptr)
	;trashes
	;r1-r14

	(entry 'window 'mouse_move '(r0 r1))

	;get smallest size
	(vp-push r1)
	(call 'window 'pref_size '(r0) '(r0 r9 r10))
	(vp-cpy-rr r9 r11)
	(vp-cpy-rr r10 r12)

	;save old bounds
	(call 'window 'get_bounds '(r0) '(r0 r7 r8 r9 r10))

	;get abolute cords of corners
	(vp-add-rr r7 r9)
	(vp-add-rr r8 r10)

	;drag edges
	(vp-pop r1)
	(assign '((r0 window_drag_mode)) '(r14))
	(vp-and-cr window_drag_left r14)
	(vpif '(r14 /= 0))
		;drag left edge
		(assign '((r1 ev_msg_mouse_x) (r0 window_offset_x)) '(r7 r14))
		(vp-sub-rr r14 r7)
		(vp-cpy-rr r9 r14)
		(vp-sub-rr r7 r14)
		(vpif '(r14 < r11))
			(vp-cpy-rr r9 r7)
			(vp-sub-rr r11 r7)
		(endif)
	(endif)
	(assign '((r0 window_drag_mode)) '(r14))
	(vp-and-cr window_drag_right r14)
	(vpif '(r14 /= 0))
		;drag right edge
		(assign '((r1 ev_msg_mouse_x) (r0 window_offset_x)) '(r9 r14))
		(vp-sub-rr r14 r9)
		(vp-cpy-rr r9 r14)
		(vp-sub-rr r7 r14)
		(vpif '(r14 < r11))
			(vp-cpy-rr r7 r9)
			(vp-add-rr r11 r9)
		(endif)
	(endif)
	(assign '((r0 window_drag_mode)) '(r14))
	(vp-and-cr window_drag_top r14)
	(vpif '(r14 /= 0))
		;drag top edge
		(assign '((r1 ev_msg_mouse_y) (r0 window_offset_y)) '(r8 r14))
		(vp-sub-rr r14 r8)
		(vp-cpy-rr r10 r14)
		(vp-sub-rr r8 r14)
		(vpif '(r14 < r12))
			(vp-cpy-rr r10 r8)
			(vp-sub-rr r12 r8)
		(endif)
	(endif)
	(assign '((r0 window_drag_mode)) '(r14))
	(vp-and-cr window_drag_bottom r14)
	(vpif '(r14 /= 0))
		;drag bottom edge
		(assign '((r1 ev_msg_mouse_y) (r0 window_offset_y)) '(r10 r14))
		(vp-sub-rr r14 r10)
		(vp-cpy-rr r10 r14)
		(vp-sub-rr r8 r14)
		(vpif '(r14 < r12))
			(vp-cpy-rr r8 r10)
			(vp-add-rr r12 r10)
		(endif)
	(endif)
	(vp-sub-rr r7 r9)
	(vp-sub-rr r8 r10)

	;change window size and dirty
	(call 'window 'change_dirty '(r0 r7 r8 r9 r10) '(r0))
	(jump 'window 'emit '(r0))

(def-func-end)

(def-method 'window 'pref_size)
	;inputs
	;r0 = window object (ptr)
	;outputs
	;r0 = window object (ptr)
	;r9 = preferred width (pixels)
	;r10 = preferred height (pixels)
	;trashes
	;r1-r14

	(entry 'window 'pref_size '(r0))

	(call 'window 'get_long_prop '(r0 static_sym_border) '(r0 r1))
	(vp-push r0 r1)
	(call 'flow 'pref_size '((r0 window_status_panel)) '(_ r9 r10))
	(vp-pop r0 r1)
	(vp-add-rr r1 r1)
	(vp-add-rr r1 r9)
	(vp-add-rr r1 r10)

	(exit 'window 'pref_size '(r0 r9 r10))
	(vp-ret)

(def-func-end)
