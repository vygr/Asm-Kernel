(include "sys/func.inc")
(include "gui/vdu/class.inc")
(include "class/str/class.inc")
(include "class/num/class.inc")
(include "class/lisp/class.inc")

(def-method 'vdu :lisp_create)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'vdu :lisp_create '(r0 r1))

(errorcases
	(assign '((r1 array_length)) '(r2))
	(gotoif '(r2 /= 0) 'error))

	(vp-push r0)
	(call 'vdu :create nil '(r1))
	(vp-pop r0)

	(exit 'vdu :lisp_create '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(create-vdu)" error_msg_wrong_num_of_args r1)))

(def-func-end)

(def-method 'vdu :lisp_load)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'vdu 'lines 'line)
	(pptr 'iter_begin 'iter_end)
	(plong 'cursor)
	(uint 'ox 'oy 'cx 'cy)
	(int 'len)

	(entry 'vdu :lisp_load '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 6) '(r2))
	(gotoif '(r2 = 0) 'error))

	(push-scope)
	(list-bind-args r1 '(r1 r2 r3 r4 r5 r6) '(vdu list num num num num))
	(assign '(r0 r1 r2 r3 r4 r5 r6) {this, vdu, lines, ox, oy, cx, cy})

	;load vdu with line text
	(call 'vdu :dirty {vdu})
	(call 'sys_mem :fill {vdu->vdu_chars, vdu->vdu_width * vdu->vdu_height * long_size, char_space})
	(assign {lines->array_length - oy} {len})
	(vpif {len > 0})
		(vpif {len > vdu->vdu_height})
			(assign {vdu->vdu_height} {len})
		(endif)
		(call 'list :get_iters {lines, oy, oy + len} {_, iter_begin, iter_end})
		(breakif {iter_begin = iter_end})
		(assign {vdu->vdu_chars} {cursor})
		(loop-start)
			(assign {*iter_begin} {line})
			(vpif (cat {line->obj_vtable = @} (f-path 'str :vtable)))
				(assign {line->str_length - ox} {len})
				(vpif {len > 0})
					;copy bytes to longs
					(assign {&line->str_data + ox, cursor, len, vdu->vdu_width} '(r0 r1 r2 r3))
					(vpif '(r2 > r3))
						(vp-cpy-rr r3 r2)
					(endif)
					(vp-add-rr r0 r2)
					(loop-start)
						(vp-cpy-ir-ub r0 0 r3)
						(vp-cpy-ri r3 r1 0)
						(vp-add-cr byte_size r0)
						(vp-add-cr long_size r1)
					(loop-until '(r0 = r2))
				(endif)
			(else)
			(errorcases
				(gotoif (cat {line->obj_vtable /= @} (f-path 'array :vtable)) 'exit))
				(assign {line->array_length - ox} {len})
				(vpif {len > 0})
					;copy longs to longs
					(call 'sys_mem :copy {&line->array_begin + (ox * long_size), cursor, len * long_size})
				(endif)
			(endif)
			(assign {cursor + vdu->vdu_width * long_size} {cursor})
		(loop-until {(iter_begin + ptr_size => iter_begin) = iter_end})
	(endif)

	;show cursor as inverse video char
	(assign {cx - ox, cy - oy} {cx, cy})
	(switch)
	(breakif {cx < 0 | cy < 0 | cx >= vdu->vdu_width | cy >= vdu->vdu_height})
	(assign {vdu->vdu_chars + (cy * vdu->vdu_width + cx) * long_size} '(r0))
	(vp-cpy-ir r0 0 r1)
	(vp-cpy-cr 0x80000000 r2)
	(vp-or-rr r2 r1)
	(vp-cpy-ri r1 r0 0)
	(endswitch)

(vp-label 'exit)
	(exit 'vdu :lisp_load {this, vdu})
	(class/obj/ref r1 r2)
	(pop-scope)
	(return)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(vdu-load vdu lines ox oy cx cy)" error_msg_wrong_types r1))
	(signature '(vdu list num num num num)))

(def-func-end)
