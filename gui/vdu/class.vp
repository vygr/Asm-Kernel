(include "sys/func.inc")
(include "gui/gui/class.inc")
(include "gui/ctx/class.inc")
(include "gui/region/class.inc")
(include "gui/font/class.inc")
(include "gui/pixmap/class.inc")
(include "gui/texture/class.inc")
(include "class/sym/class.inc")
(include "gui/vdu/class.inc")
(include "class/list/class.inc")
(include "lib/consts/chars.inc")

(gen-create 'vdu)
(gen-vtable 'vdu)

(def-method 'vdu :init)
	;inputs
	;r0 = vdu object (ptr)
	;r1 = vtable (pptr)
	;outputs
	;r0 = vdu object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;r1-r14

	;init parent
	(s-call 'vdu :init '(r0 r1) '(r0 r1))
	(vpif '(r1 /= 0))
		;init myself
		(vp-xor-rr r2 r2)
		(assign '(r2 r2 r2 r2 r2)
			'((r0 vdu_font) (r0 vdu_chars) (r0 vdu_width) (r0 vdu_height) (r0 vdu_textures)))
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'vdu :deinit)
	;inputs
	;r0 = vdu object (ptr)
	;outputs
	;r0 = vdu object (ptr)
	;trashes
	;r1-r14

	;save object
	(vp-push r0)

	(call 'sys_mem :free '((r0 vdu_chars)))
	(assign '((rsp 0)) '(r0))
	(call 'list :deref_if '((r0 vdu_textures)))

	;deinit parent
	(vp-pop r0)
	(s-jump 'vdu :deinit '(r0))

(def-func-end)

(def-method 'vdu :draw)
	;inputs
	;r0 = view object (ptr)
	;outputs
	;r0 = view object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'txt 'font)
	(ulong 'handle 'c)
	(int 'x 'bx 'by 'bx1 'by1)
	(uint 'w 'h 'col 'paper 'ink)

	;save inputs
	(push-scope)
	(entry 'vdu :draw {this})

	;get properties, do checks for any changes
	(call 'vdu :get_long_prop {this, static_sym_ink_color} {_, col})
	(call 'vdu :get_long_prop {this, static_sym_vdu_width} {_, w})
	(call 'vdu :get_long_prop {this, static_sym_vdu_height} {_, h})
	(call 'vdu :get_prop {this, static_sym_font} {_, font})

	;draw vdu chars
	(vpif {font && this->vdu_chars && this->vdu_textures})
		(call 'region :bounds {&this->view_dirty_region} {bx, by, bx1, by1})
		(assign {(bx - this->view_ctx_x) / this->vdu_char_width} {bx})
		(assign {(bx1 - this->view_ctx_x - 1) / this->vdu_char_width} {bx1})
		(assign {(by - this->view_ctx_y) / this->vdu_char_height} {by})
		(assign {(by1 - this->view_ctx_y - 1) / this->vdu_char_height} {by1})
		(vpif {bx1 >= this->vdu_width})
			(assign {this->vdu_width - 1} {bx1})
		(endif)
		(vpif {by1 >= this->vdu_height})
			(assign {this->vdu_height - 1} {by1})
		(endif)
		(loop-while {by <= by1})
			(assign {bx} {x})
			(loop-while {x <= bx1})
				(assign {(this->vdu_chars)[(by * this->vdu_width + x) * long_size]} {c})
				(vpif {c >> 32 => ink})
					;has attributes
					(call 'pixmap :to_argb32 {ink >> 16, 15} {paper})
					(call 'pixmap :to_argb32 {ink, 15} {ink})
				(else)
					;default attributes
					(assign {col, 0} {ink, paper})
				(endif)
				(vpif {(c >> 31) & 1})
					;inverse video char
					(assign {ink, paper} {w, h})
					(assign {w, h} {paper, ink})
				(endif)
				(vpif {paper})
					;do we have any paper to draw ?
					(call 'ctx :set_color {this, paper})
					(call 'ctx :filled_box {this, x * this->vdu_char_width, by * this->vdu_char_height, this->vdu_char_width, this->vdu_char_height})
				(endif)
				(vpif {(c & 0x7fffffff => c) > +char_space+})
					(breakif {c > 127})
					(call 'list :get_element {this->vdu_textures, c - 33} {_, txt})
					(call 'texture :get_metrics {txt} {_, handle, w ,h})
					(vpif {handle})
						(call 'ctx :blit {this, handle, ink, x * this->vdu_char_width + ((this->vdu_char_width - w) >>> 1), by * this->vdu_char_height, w, h})
					(endif)
				(endif)
				(assign {x + 1} {x})
			(loop-end)
			(assign {by + 1} {by})
		(loop-end)
	(endif)

	(exit 'vdu :draw {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'vdu :configure)
	;inputs
	;r0 = vdu object (ptr)
	;outputs
	;r0 = vdu object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'font)
	(uint 'w 'h 'size)

	;save inputs
	(push-scope)
	(entry 'vdu :configure {this})

	(call 'vdu :get_long_prop {this, static_sym_vdu_width} {_, w})
	(call 'vdu :get_long_prop {this, static_sym_vdu_height} {_, h})
	(call 'vdu :ref_prop {this, static_sym_font} {_, font})
	(vpif {font && font /= this->vdu_font})
		(assign {font} {this->vdu_font})
		;set char size
		(call 'font :get_metrics {font} {_, _, _, this->vdu_char_height})
		(assign {this->vdu_char_height * 9 >> 4} {this->vdu_char_width})

		;ref char textures
		(call 'list :deref_if {this->vdu_textures})
		(call 'font :ascii_textures {font} {_, this->vdu_textures})
	(endif)
	(vpif {w /= this->vdu_width || h /= this->vdu_height})
		(assign {w, h} {this->vdu_width, this->vdu_height})
		(call 'sys_mem :free {this->vdu_chars})
		(call 'sys_mem :alloc {this->vdu_width * h * long_size} {this->vdu_chars, size})
		(call 'sys_mem :fill {this->vdu_chars, size, +char_space+})
	(endif)
	(call 'font :deref_if {font})

	(exit 'vdu :configure {this})
	(pop-scope)
	(return)

(def-func-end)
