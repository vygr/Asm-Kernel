(include "sys/func.inc")
(include "sys/pii/class.inc")
(include "gui/ctx/class.inc")
(include "gui/region/class.inc")

(def-method 'ctx :set_color)
	;inputs
	;r0 = draw ctx (ptr)
	;r1 = color (argb)
	;trashes
	;r0-r14

	(vp-cpy-rr r1 r7)
	(vp-cpy-rr r1 r8)
	(vp-cpy-rr r1 r9)
	(vp-cpy-rr r1 r10)
	(vp-shr-cr 24 r10)
	(vp-shr-cr 16 r7)
	(vp-shr-cr 8 r8)
	(vp-and-cr 0xff r7)
	(vp-and-cr 0xff r8)
	(vp-and-cr 0xff r9)
	(vp-and-cr 0xff r10)
	(host-call 'host :sdl_set_render_draw_color '((r0 ctx_sdl_ctx) r7 r8 r9 r10))
	(vp-ret)

(def-func-end)

(def-method 'ctx :brighter)
	;inputs
	;r1 = color (argb)
	;outputs
	;r1 = brighter color (argb)
	;trashes
	;r1-r3

	(vp-cpy-rr r1 r2)
	(vp-cpy-cr argb_black r3)
	(vp-and-rr r3 r1)
	(vp-and-cr 0x00fefefe r2)
	(vp-shr-cr 1 r2)
	(vp-add-cr 0x00808080 r2)
	(vp-add-rr r2 r1)
	(vp-ret)

(def-func-end)

(def-method 'ctx :darker)
	;inputs
	;r1 = color (argb)
	;outputs
	;r1 = darker color (argb)
	;trashes
	;r1-r3

	(vp-cpy-rr r1 r2)
	(vp-cpy-cr argb_black r3)
	(vp-and-rr r3 r1)
	(vp-and-cr 0x00fefefe r2)
	(vp-shr-cr 1 r2)
	(vp-add-rr r2 r1)
	(vp-ret)

(def-func-end)

(defun for-each-visible-rect (_)
	;for each rect on the dirty region
	(assign '((rsp local_ctx)) '(r0))
	(assign '((r0 ctx_dirty_region)) '(r0))
	(loop-flist r0 0 r0 r0)
		(assign '(r0) '((rsp local_dirty_rect)))

		;continue if out of bounds
		(assign '((r0 rect_x) (r0 rect_y) (r0 rect_x1) (r0 rect_y1)) '(r7 r8 r9 r10))
		(assign '((rsp (+ local_drect sdl_rect_x) i) (rsp (+ local_drect sdl_rect_y) i)
			(rsp (+ local_drect sdl_rect_w) i) (rsp (+ local_drect sdl_rect_h) i)) '(r11 r12 r13 r14))
		(vp-add-rr r11 r13)
		(vp-add-rr r12 r14)
		(continueif '(r9 <= r11) '(r10 <= r12) '(r7 >= r13) '(r8 >= r14))

		;set clip region to this region
		(vp-sub-rr r7 r9)
		(vp-sub-rr r8 r10)
		(assign '(r7 r8 r9 r10) '((rsp (+ local_clip_rect sdl_rect_x) i) (rsp (+ local_clip_rect sdl_rect_y) i)
			(rsp (+ local_clip_rect sdl_rect_w) i) (rsp (+ local_clip_rect sdl_rect_h) i)))
		(assign '((rsp local_ctx)) '(r0))
		(host-call 'host :sdl_render_set_clip_rect '((r0 ctx_sdl_ctx) (& rsp local_clip_rect)))

		;eval body
		(exec _)

		(assign '((rsp local_dirty_rect)) '(r0))
	(loop-end))

;; (def-method 'ctx :debug 16)
;; 	;inputs
;; 	;r0 = draw ctx (ptr)
;; 	;r7 = x (pixels)
;; 	;r8 = y (pixels)
;; 	;r9 = width (pixels)
;; 	;r10 = height (pixels)
;; 	;trashes
;; 	;r0-r14

;; 	(def-struct 'local)
;; 		(struct 'drect 'sdl_rect)
;; 		(struct 'clip_rect 'sdl_rect)
;; 		(ptr 'ctx 'dirty_rect 'old_stack)
;; 	(def-struct-end)

;; 	(vp-cpy-rr rsp r3)
;; 	(vp-alloc local_size)
;; 	(vp-and-cr -16 rsp)
;; 	(assign '(r3) '((rsp local_old_stack)))

;; 	;save debug rectangle info
;; 	(assign '(r0) '((rsp local_ctx)))
;; 	(assign '((r0 ctx_x) (r0 ctx_y)) '(r11 r12))
;; 	(vp-add-rr r11 r7)
;; 	(vp-add-rr r12 r8)
;; 	(assign '(r7 r8 r9 r10) '((rsp (+ local_drect sdl_rect_x) i) (rsp (+ local_drect sdl_rect_y) i)
;; 		(rsp (+ local_drect sdl_rect_w) i) (rsp (+ local_drect sdl_rect_h) i)))

;; 	(for-each-visible-rect
;; 		'(progn
;; 			;draw the rectangle
;; 			(assign '((rsp local_ctx)) '(r0))
;; 			(host-call 'host :sdl_render_draw_rect '((r0 ctx_sdl_ctx) (& rsp local_clip_rect)))))

;; 	(vp-cpy-ir rsp local_old_stack rsp)
;; 	(vp-ret)

;; (def-func-end)

(def-method 'ctx :blit 16)
	;inputs
	;r0 = draw ctx (ptr)
	;r1 = texture id (ulong)
	;r2 = color mod (argb)
	;r7 = x (pixels)
	;r8 = y (pixels)
	;r9 = width (pixels)
	;r10 = height (pixels)
	;trashes
	;r0-r14

	(def-struct 'local)
		(struct 'drect 'sdl_rect)
		(struct 'srect 'sdl_rect)
		(struct 'clip_rect 'sdl_rect)
		(ulong 'texture)
		(ptr 'ctx 'dirty_rect 'old_stack)
	(def-struct-end)

	(vp-cpy-rr rsp r3)
	(vp-alloc local_size)
	(vp-and-cr -16 rsp)
	(assign '(r3) '((rsp local_old_stack)))

	;save draw rectangle info
	(assign '((r0 ctx_x) (r0 ctx_y) r0 r1) '(r11 r12 (rsp local_ctx) (rsp local_texture)))
	(vp-add-rr r11 r7)
	(vp-add-rr r12 r8)
	(assign '(r7 r8 r9 r10) '((rsp (+ local_drect sdl_rect_x) i) (rsp (+ local_drect sdl_rect_y) i)
		(rsp (+ local_drect sdl_rect_w) i) (rsp (+ local_drect sdl_rect_h) i)))
	(vp-xor-rr r7 r7)
	(assign '(r7 r7 r9 r10) '((rsp (+ local_srect sdl_rect_x) i) (rsp (+ local_srect sdl_rect_y) i)
		(rsp (+ local_srect sdl_rect_w) i) (rsp (+ local_srect sdl_rect_h) i)))

	;set the color mod
	(vp-cpy-rr r2 r3)
	(vp-cpy-rr r2 r4)
	(vp-shr-cr 16 r3)
	(vp-shr-cr 8 r2)
	(vp-and-cr 0xff r3)
	(vp-and-cr 0xff r2)
	(vp-and-cr 0xff r4)
	(host-call 'host :sdl_set_texture_color_mod '((rsp local_texture) r3 r2 r4))

	(for-each-visible-rect
		'(progn
			;blit the texture
			(assign '((rsp local_ctx)) '(r0))
			(host-call 'host :sdl_render_copy '((r0 ctx_sdl_ctx) (rsp local_texture) (& rsp local_srect) (& rsp local_drect)))))

	(vp-cpy-ir rsp local_old_stack rsp)
	(vp-ret)

(def-func-end)

(def-method 'ctx :box 16)
	;inputs
	;r0 = draw ctx (ptr)
	;r7 = x (pixels)
	;r8 = y (pixels)
	;r9 = width (pixels)
	;r10 = height (pixels)
	;trashes
	;r0-r14

	(def-struct 'local)
		(struct 'drect 'sdl_rect)
		(struct 'clip_rect 'sdl_rect)
		(ptr 'ctx 'dirty_rect 'old_stack)
	(def-struct-end)

	(vp-cpy-rr rsp r3)
	(vp-alloc local_size)
	(vp-and-cr -16 rsp)
	(assign '(r3) '((rsp local_old_stack)))

	;save draw rectangle info
	(assign '(r0) '((rsp local_ctx)))
	(assign '((r0 ctx_x) (r0 ctx_y)) '(r11 r12))
	(vp-add-rr r11 r7)
	(vp-add-rr r12 r8)
	(assign '(r7 r8 r9 r10) '((rsp (+ local_drect sdl_rect_x) i) (rsp (+ local_drect sdl_rect_y) i)
		(rsp (+ local_drect sdl_rect_w) i) (rsp (+ local_drect sdl_rect_h) i)))

	(for-each-visible-rect
		'(progn
			;draw the rectangle
			(assign '((rsp local_ctx)) '(r0))
			(host-call 'host :sdl_render_draw_rect '((r0 ctx_sdl_ctx) (& rsp local_drect)))))

	(vp-cpy-ir rsp local_old_stack rsp)
	(vp-ret)

(def-func-end)

(def-method 'ctx :filled_box 16)
	;inputs
	;r0 = draw ctx (ptr)
	;r7 = x (pixels)
	;r8 = y (pixels)
	;r9 = width (pixels)
	;r10 = height (pixels)
	;trashes
	;r0-r14

	(def-struct 'local)
		(struct 'drect 'sdl_rect)
		(struct 'clip_rect 'sdl_rect)
		(ptr 'ctx 'dirty_rect 'old_stack)
	(def-struct-end)

	(vp-cpy-rr rsp r3)
	(vp-alloc local_size)
	(vp-and-cr -16 rsp)
	(assign '(r3) '((rsp local_old_stack)))

	;save draw rectangle info
	(assign '(r0) '((rsp local_ctx)))
	(assign '((r0 ctx_x) (r0 ctx_y)) '(r11 r12))
	(vp-add-rr r11 r7)
	(vp-add-rr r12 r8)
	(assign '(r7 r8 r9 r10) '((rsp (+ local_drect sdl_rect_x) i) (rsp (+ local_drect sdl_rect_y) i)
		(rsp (+ local_drect sdl_rect_w) i) (rsp (+ local_drect sdl_rect_h) i)))

	(for-each-visible-rect
		'(progn
			;draw the rectangle
			(assign '((rsp local_ctx)) '(r0))
			(host-call 'host :sdl_render_fill_rect '((r0 ctx_sdl_ctx) (& rsp local_drect)))))

	(vp-cpy-ir rsp local_old_stack rsp)
	(vp-ret)

(def-func-end)

(def-method 'ctx :panel)
	;inputs
	;r0 = draw ctx (ptr)
	;r1 = color (argb)
	;r2 = flags (ulong)
	;r3 = depth (int)
	;r7 = x (pixels)
	;r8 = y (pixels)
	;r9 = width (pixels)
	;r10 = height (pixels)
	;trashes
	;r0-r14

	(def-struct 'local)
		(ptr 'ctx)
		(long 'flags)
		(uint 'color)
		(int 'depth 'x 'y 'w 'h)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(assign '(r0 r1 r2 r3 r7 r8 r9 r10)
		'((rsp local_ctx) (rsp local_color) (rsp local_flags) (rsp local_depth)
		(rsp local_x) (rsp local_y) (rsp local_w) (rsp local_h)))

	(vpif '(r2 /= 0))
		;fill middle
		(call 'ctx :set_color '(r0 r1))

		(assign '((rsp local_x) (rsp local_y) (rsp local_w) (rsp local_h) (rsp local_depth))
			'(r7 r8 r9 r10 r11))
		(vp-add-rr r11 r7)
		(vp-add-rr r11 r8)
		(vp-shl-cr 1 r11)
		(vp-sub-rr r11 r9)
		(vp-sub-rr r11 r10)
		(call 'ctx :filled_box '((rsp local_ctx) r7 r8 r9 r10))
	(endif)

	(assign '((rsp local_depth)) '(r11))
	(vpif '(r11 > 0))
		;brighter color
		(call 'ctx :brighter '((rsp local_color)) '(r1))
		(call 'ctx :set_color '((rsp local_ctx) r1))

		;fill left edge and top
		(assign '((rsp local_x) (rsp local_y) (rsp local_w) (rsp local_depth)) '(r7 r8 r9 r10))
		(call 'ctx :filled_box '((rsp local_ctx) r7 r8 r9 r10))

		(assign '((rsp local_x) (rsp local_y) (rsp local_h) (rsp local_depth)) '(r7 r8 r10 r9))
		(vp-add-rr r9 r8)
		(vp-sub-rr r9 r10)
		(call 'ctx :filled_box '((rsp local_ctx) r7 r8 r9 r10))

		;darker color
		(call 'ctx :darker '((rsp local_color)) '(r1))
		(call 'ctx :set_color '((rsp local_ctx) r1))

		;fill bottom edge and right
		(assign '((rsp local_x) (rsp local_y) (rsp local_w) (rsp local_h) (rsp local_depth)) '(r7 r8 r9 r10 r11))
		(vp-add-rr r11 r7)
		(vp-sub-rr r11 r9)
		(vp-add-rr r10 r8)
		(vp-sub-rr r11 r8)
		(call 'ctx :filled_box '((rsp local_ctx) r7 r8 r9 r11))

		(assign '((rsp local_x) (rsp local_y) (rsp local_w) (rsp local_h) (rsp local_depth)) '(r7 r8 r9 r10 r11))
		(vp-add-rr r9 r7)
		(vp-sub-rr r11 r7)
		(vp-add-rr r11 r8)
		(vp-sub-rr r11 r10)
		(vp-sub-rr r11 r10)
		(call 'ctx :filled_box '((rsp local_ctx) r7 r8 r11 r10))
	(else)
		;sunken panel
		(vp-mul-cr -1 r11)
		(assign '(r11) '((rsp local_depth)))

		;darker color
		(call 'ctx :darker '((rsp local_color)) '(r1))
		(call 'ctx :set_color '((rsp local_ctx) r1))

		;fill left edge and top
		(assign '((rsp local_x) (rsp local_y) (rsp local_w) (rsp local_depth)) '(r7 r8 r9 r10))
		(vp-sub-rr r10 r9)
		(call 'ctx :filled_box '((rsp local_ctx) r7 r8 r9 r10))

		(assign '((rsp local_x) (rsp local_y) (rsp local_h) (rsp local_depth)) '(r7 r8 r10 r9))
		(vp-add-rr r9 r8)
		(vp-sub-rr r9 r10)
		(vp-sub-rr r9 r10)
		(call 'ctx :filled_box '((rsp local_ctx) r7 r8 r9 r10))

		;brighter color
		(call 'ctx :brighter '((rsp local_color)) '(r1))
		(call 'ctx :set_color '((rsp local_ctx) r1))

		;fill bottom edge and right
		(assign '((rsp local_x) (rsp local_y) (rsp local_w) (rsp local_h) (rsp local_depth)) '(r7 r8 r9 r10 r11))
		(vp-add-rr r10 r8)
		(vp-sub-rr r11 r8)
		(call 'ctx :filled_box '((rsp local_ctx) r7 r8 r9 r11))

		(assign '((rsp local_x) (rsp local_y) (rsp local_w) (rsp local_h) (rsp local_depth)) '(r7 r8 r9 r10 r11))
		(vp-add-rr r9 r7)
		(vp-sub-rr r11 r7)
		(vp-sub-rr r11 r10)
		(call 'ctx :filled_box '((rsp local_ctx) r7 r8 r11 r10))
	(endif)

	(vp-free local_size)
	(vp-ret)

(def-func-end)
