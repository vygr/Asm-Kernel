(include "sys/func.inc")
(include "gui/flow/class.inc")
(include "class/sym/class.inc")

(gen-create 'flow)
(gen-vtable 'flow)

(def-method 'flow :layout)
	;inputs
	;r0 = flow object (ptr)
	;outputs
	;r0 = flow object (ptr)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ulong 'flags)
		(uint 'x 'y)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'flow :layout '(r0))

	(vp-xor-rr r1 r1)
	(assign '(r1 r1) '((rsp local_x) (rsp local_y)))
	(call 'flow :get_long_prop '(r0 static_sym_flow_flags) '(r0 r1))
	(assign '(r1) '((rsp local_flags)))
	(vp-and-cr flow_flag_left r1)
	(vpif '(r1 /= 0))
		(assign '((r0 view_w)) '(r1))
		(assign '(r1) '((rsp local_x)))
	(endif)
	(assign '((rsp local_flags)) '(r1))
	(vp-and-cr flow_flag_up r1)
	(vpif '(r1 /= 0))
		(assign '((r0 view_h)) '(r1))
		(assign '(r1) '((rsp local_y)))
	(endif)
	(call 'flow :forward '(r0 rsp ($ callback)) '(r0))

	(exit 'flow :layout '(r0))
	(vp-free local_size)
	(vp-ret)

(vp-label 'callback)
	(entry 'view :forward_callback '(r0 r1))

	(vp-push r1)
	(call 'view :pref_size '(r0) '(r0 r9 r10))
	(vp-pop r1)
	(assign '((r1 local_x) (r1 local_y)) '(r7 r8))

	(assign '((r0 hmap_parent) (r1 local_flags) r7 r8) '(r2 r3 r11 r12))
	(vp-and-cr flow_flag_down r3)
	(vpif '(r3 /= 0))
		;flow down
		(vp-lea-d r8 r10 r12)
	(endif)

	(assign '((r1 local_flags)) '(r3))
	(vp-and-cr flow_flag_up r3)
	(vpif '(r3 /= 0))
		;flow up
		(vp-sub-rr r10 r8)
		(vp-cpy-rr r8 r12)
	(endif)

	(assign '((r1 local_flags)) '(r3))
	(vp-and-cr flow_flag_right r3)
	(vpif '(r3 /= 0))
		;flow right
		(vp-lea-d r7 r9 r11)
	(endif)

	(assign '((r1 local_flags)) '(r3))
	(vp-and-cr flow_flag_left r3)
	(vpif '(r3 /= 0))
		;flow left
		(vp-sub-rr r9 r7)
		(vp-cpy-rr r7 r11)
	(endif)

	(assign '((r1 local_flags)) '(r3))
	(vp-and-cr flow_flag_fillw r3)
	(vpif '(r3 /= 0))
		;fill width of parent
		(assign '((r2 view_w)) '(r9))
		(vp-xor-rr r7 r7)
	(endif)

	(assign '((r1 local_flags)) '(r3))
	(vp-and-cr flow_flag_fillh r3)
	(vpif '(r3 /= 0))
		;fill height of parent
		(assign '((r2 view_h)) '(r10))
		(vp-xor-rr r8 r8)
	(endif)

	(assign '((r1 local_flags)) '(r3))
	(vp-and-cr flow_flag_lastw r3)
	(vpif '(r3 /= 0))
		;last one fills width gap of parent
		(ln-is-last r0 view_node r3)
		(vpif '(r3 = 0))
			(assign '((r1 local_flags)) '(r3))
			(vp-and-cr flow_flag_right r3)
			(vpif '(r3 /= 0))
				;flow right
				(vp-lea-d r7 r9 r14)
				(assign '((r2 view_w)) '(r3))
				(vp-sub-rr r3 r14)
				(vp-sub-rr r14 r9)
			(endif)
			(assign '((r1 local_flags)) '(r3))
			(vp-and-cr flow_flag_left r3)
			(vpif '(r3 /= 0))
				;flow left
				(vp-add-rr r7 r9)
				(vp-xor-rr r7 r7)
			(endif)
		(endif)
	(endif)

	(assign '((r1 local_flags)) '(r3))
	(vp-and-cr flow_flag_lasth r3)
	(vpif '(r3 /= 0))
		;last one fills height gap of parent
		(ln-is-last r0 view_node r3)
		(vpif '(r3 = 0))
			(assign '((r1 local_flags)) '(r3))
			(vp-and-cr flow_flag_down r3)
			(vpif '(r3 /= 0))
				;flow down
				(vp-lea-d r8 r10 r14)
				(assign '((r2 view_h)) '(r3))
				(vp-sub-rr r3 r14)
				(vp-sub-rr r14 r10)
			(endif)
			(assign '((r1 local_flags)) '(r3))
			(vp-and-cr flow_flag_up r3)
			(vpif '(r3 /= 0))
				;flow up
				(vp-add-rr r8 r10)
				(vp-xor-rr r8 r8)
			(endif)
		(endif)
	(endif)

	(assign '((r1 local_flags)) '(r3))
	(vp-and-cr (logior flow_flag_align_hcenter flow_flag_align_hleft flow_flag_align_hright) r3)
	(vpif '(r3 /= 0))
		(assign '((r2 view_w)) '(r7))
		(vp-sub-rr r9 r7)
		(switch)
		(vpcase '(r3 = flow_flag_align_hcenter))
			(vp-shr-cr 1 r7)
			(break)
		(vpcase '(r3 = flow_flag_align_hleft))
			(vp-xor-rr r7 r7)
		(endswitch)
	(endif)

	(assign '((r1 local_flags)) '(r3))
	(vp-and-cr (logior flow_flag_align_vcenter flow_flag_align_vtop flow_flag_align_vbottom) r3)
	(vpif '(r3 /= 0))
		(assign '((r2 view_h)) '(r8))
		(vp-sub-rr r10 r8)
		(switch)
		(vpcase '(r3 = flow_flag_align_vcenter))
			(vp-shr-cr 1 r8)
			(break)
		(vpcase '(r3 = flow_flag_align_vtop))
			(vp-xor-rr r8 r8)
		(endswitch)
	(endif)

	(assign '(r11 r12) '((r1 local_x) (r1 local_y)))
	(jump 'view :change '(r0 r7 r8 r9 r10))

(def-func-end)

(def-method 'flow :pref_size)
	;inputs
	;r0 = flow object (ptr)
	;outputs
	;r0 = flow object (ptr)
	;r9 = preferred width (pixels)
	;r10 = preferred height (pixels)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ulong 'flags)
		(int 'w 'h)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'flow :pref_size '(r0))

	(vp-xor-rr r1 r1)
	(assign '(r1 r1) '((rsp local_w) (rsp local_h)))
	(call 'flow :get_long_prop '(r0 static_sym_flow_flags) '(r0 (rsp local_flags)))
	(call 'flow :forward '(r0 rsp ($ callback)) '(r0))

	(exit 'flow :pref_size '(r0 (rsp local_w) (rsp local_h)))
	(vp-free local_size)
	(vp-ret)

(vp-label 'callback)
	(entry 'view :forward_callback '(r0 r1))

	(vp-push r1)
	(call 'view :pref_size '(r0) '(r0 r9 r10))
	(vp-pop r1)
	(assign '((r0 hmap_parent) (r1 local_flags)) '(r2 r3))
	(vp-and-cr (logior flow_flag_up flow_flag_down) r3)
	(vpif '(r3 /= 0))
		;flow down or up
		(assign '((r1 local_h)) '(r3))
		(vp-add-rr r10 r3)
		(assign '(r3) '((r1 local_h)))
	(endif)
	(assign '((r1 local_flags)) '(r3))
	(vp-and-cr (logior flow_flag_left flow_flag_right) r3)
	(vpif '(r3 /= 0))
		;flow left or right
		(assign '((r1 local_w)) '(r3))
		(vp-add-rr r9 r3)
		(assign '(r3) '((r1 local_w)))
	(endif)
	(assign '((r1 local_w)) '(r3))
	(vpif '(r9 > r3))
		(assign '(r9) '((r1 local_w)))
	(endif)
	(assign '((r1 local_h)) '(r3))
	(vpif '(r10 > r3))
		(assign '(r10) '((r1 local_h)))
	(endif)

	(exit 'view :forward_callback '(r0))
	(vp-ret)

(def-func-end)
