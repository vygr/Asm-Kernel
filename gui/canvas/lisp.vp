(include "sys/func.inc")
(include "gui/canvas/class.inc")
(include "class/str/class.inc")
(include "class/fixed/class.inc")
(include "class/lisp/class.inc")

(def-method 'canvas :lisp_create)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'canvas :lisp_create '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 3) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'canvas :create))
	(list-bind-args r1 in '(num num num))
	(call 'canvas :create in '(r1))
	(vp-pop r0)

	(exit 'canvas :lisp_create '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(create-canvas width height scale)" error_msg_wrong_types r1))
	(signature '(num num num)))

(def-func-end)

(def-method 'canvas :lisp_info)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'canvas :lisp_info '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'canvas :info))
	(list-bind-args r1 in '(str))
	(call 'canvas :info in '(r0 r12 r13))
	(call 'num :create '(r0) '(r11))
	(call 'num :create '(r12) '(r12))
	(call 'num :create '(r13) '(r13))
	(call 'list :create nil '(r0))
	(call 'list :push_back2 '(r0 r11 r12) '(r0 _ _ _ _))
	(call 'list :push_back '(r0 r13) '(r1 _ _ _))
	(vp-pop r0)

	(exit 'canvas :lisp_info '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(canvas-info path)" error_msg_wrong_types r1))
	(signature '(str)))

(def-func-end)

(def-method 'canvas :lisp_load)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'canvas :lisp_load '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 2) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'canvas :load))
	(list-bind-args r1 in '(str num))
	(call 'canvas :load in '(r0))
	(vpif '(r0 = 0))
		(assign '((rsp 0)) '(r0))
		(call 'obj :ref '((r0 lisp_sym_nil)) '(r0))
	(endif)
	(vp-cpy-rr r0 r1)
	(vp-pop r0)

	(exit 'canvas :lisp_load '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(canvas-load path flags)" error_msg_wrong_types r1))
	(signature '(str num)))

(def-func-end)

(def-method 'canvas :lisp_save)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'canvas :lisp_save '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 3) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'canvas :save))
	(list-bind-args r1 in '(canvas str num))
	(call 'canvas :save in '(r0))
	(vpif '(r0 = 0))
		(assign '((rsp 0)) '(r0))
		(assign '((r0 lisp_sym_nil)) '(r0))
	(endif)
	(call 'obj :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'canvas :lisp_save '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(canvas-save canvas path format)" error_msg_wrong_types r1))
	(signature '(canvas str num)))

(def-func-end)

(def-method 'canvas :lisp_fill)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'canvas :lisp_fill '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 2) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'canvas :fill))
	(list-bind-args r1 in '(canvas num))
	(call 'canvas :fill in '(r0))
	(call 'obj :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'canvas :lisp_fill '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(canvas-fill canvas argb)" error_msg_wrong_types r1))
	(signature '(canvas num)))

(def-func-end)

(def-method 'canvas :lisp_swap)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'canvas :lisp_swap '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'canvas :swap))
	(list-bind-args r1 in '(canvas))
	(call 'canvas :swap in '(r0))
	(call 'canvas :dirty '(r0) '(r0))
	(call 'obj :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'canvas :lisp_swap '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(canvas-swap canvas)" error_msg_wrong_types r1))
	(signature '(canvas)))

(def-func-end)

(def-method 'canvas :lisp_next_frame)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'canvas :lisp_next_frame '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'canvas :next_frame))
	(list-bind-args r1 in '(canvas))
	(call 'canvas :next_frame in '(r0))
	(call 'obj :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'canvas :lisp_next_frame '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(canvas-next-frame canvas)" error_msg_wrong_types r1))
	(signature '(canvas)))

(def-func-end)

(def-method 'canvas :lisp_plot)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'canvas :lisp_plot '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 3) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'canvas :plot))
	(list-bind-args r1 in '(canvas num num))
	(call 'canvas :plot in '(r0))
	(call 'obj :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'canvas :lisp_plot '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(canvas-plot canvas x y)" error_msg_wrong_types r1))
	(signature '(canvas num num)))

(def-func-end)

(def-method 'canvas :lisp_fbox)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'canvas :lisp_fbox '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 5) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'canvas :fbox))
	(list-bind-args r1 in '(canvas num num num num))
	(call 'canvas :fbox in '(r0))
	(call 'obj :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'canvas :lisp_fbox '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(canvas-fbox canvas x y w h)" error_msg_wrong_types r1))
	(signature '(canvas num num num num)))

(def-func-end)

(def-method 'canvas :lisp_fpoly)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'canvas :lisp_fpoly '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 5) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'canvas :fpoly))
	(list-bind-args r1 in '(canvas fixed fixed num list))
	(call 'canvas :fpoly in '(r0))
	(call 'obj :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'canvas :lisp_fpoly '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(canvas-fpoly canvas x y mode list)" error_msg_wrong_types r1))
	(signature '(canvas fixed fixed num list)))

(def-func-end)

(def-method 'canvas :lisp_resize)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'canvas :lisp_resize '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 2) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'canvas :resize))
	(list-bind-args r1 in '(canvas canvas))
	(call 'canvas :resize in '(r0))
	(call 'obj :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'canvas :lisp_resize '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(canvas-resize canvas canvas)" error_msg_wrong_types r1))
	(signature '(canvas canvas)))

(def-func-end)

(def-method 'canvas :lisp_to_argb32)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'canvas :lisp_to_argb32 '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 2) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'canvas :to_argb32))
	(list-bind-args r1 in '(num num))
	(call 'canvas :to_argb32 in '(r0))
	(call 'num :create '(r0) '(r1))
	(vp-pop r0)

	(exit 'canvas :lisp_to_argb32 '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(canvas-to-argb32 pixel type)" error_msg_wrong_types r1))
	(signature '(num num)))

(def-func-end)

(def-method 'canvas :lisp_from_argb32)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'canvas :lisp_from_argb32 '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 2) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'canvas :from_argb32))
	(list-bind-args r1 in '(num num))
	(call 'canvas :from_argb32 in '(r0))
	(call 'num :create '(r0) '(r1))
	(vp-pop r0)

	(exit 'canvas :lisp_from_argb32 '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(canvas-from-argb32 pixel type)" error_msg_wrong_types r1))
	(signature '(num num)))

(def-func-end)
