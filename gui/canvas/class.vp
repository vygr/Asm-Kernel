(include 'sys/func.inc)
(include 'sys/pii/class.inc)
(include 'sys/str/class.inc)
(include 'gui/canvas/class.inc)
(include 'class/vector/class.inc)
(include 'class/sym/class.inc)
(include 'class/stream_str/class.inc)
(include 'class/pair/class.inc)
(include 'gui/ctx/class.inc)
(include 'gui/texture/class.inc)
(include 'gui/gui/class.inc)

(gen-vtable 'canvas)
(gen-create 'canvas)
(gen-create 'canvas 'shared)

(def-method 'canvas 'init)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = vtable (pptr)
	;r2 = width (pixels)
	;r3 = height (pixels)
	;r4 = aa scale (uint)
	;outputs
	;r0 = canvas object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;all

	(entry 'canvas 'init '(r0 r1 r2 r3 r4))
	(assign '(r2 r3 r4) '((r0 canvas_width) (r0 canvas_height) (r0 canvas_scale)))

	;init parent
	(s-call 'canvas 'init '(r0 r1) '(r0 r1))
	(vpif '(r1 /= 0))
		(vp-push r0)
		(vp-xor-rr r1 r1)
		(assign '(r1 r1 r1 r1 r1 r1 r1 r1)
			'((r0 canvas_cx) (r0 canvas_cy) (r0 canvas_flags)
			(r0 canvas_stream) (r0 canvas_bufp) (r0 canvas_texture)
			(r0 canvas_edges_start) (r0 canvas_coverage)))
		(vp-cpy-cr argb_black r1)
		(assign '(r1 (r0 canvas_width) (r0 canvas_height) (r0 canvas_scale)) '((r0 canvas_color) r2 r3 r4))
		(vp-mul-rr r4 r2)
		(vp-mul-rr r4 r3)
		(assign '(r2 r3 r2 r3) '((r0 canvas_width) (r0 canvas_height) (r0 canvas_cx1) (r0 canvas_cy1)))
		(vp-mul-cr int_size r2)
		(assign '(r2) '((r0 canvas_stride)))
		(call 'canvas 'pref_size '(r0) '(r0 (r0 view_w) (r0 view_h)))

		;alloc pixel array
		(call 'array 'create nil '(r0))
		(assign '((rsp 0)) '(r1))
		(assign '((r1 canvas_height) (r1 canvas_stride)) '(r1 r2))
		(vp-mul-rr r2 r1)
		(vp-shr-cr 3 r1)
		(call 'array 'set_capacity '(r0 r1) '(r0))
		(assign '((rsp 0)) '(r1))
		(assign '(r0) '((r1 canvas_array)))

		;edge array
		(call 'array 'create nil '(r1))
		(vp-pop r0)
		(assign '(r1) '((r0 canvas_edges)))
	(endif)

	(exit 'canvas 'init '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'canvas 'init_shared)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = vtable (pptr)
	;r2 = source canvas object (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;all

	(entry 'canvas 'init_shared '(r0 r1 r2))
	(assign '(r2) '((r0 canvas_array)))

	;init parent
	(s-call 'canvas 'init '(r0 r1) '(r0 r1))
	(vpif '(r1 /= 0))
		(vp-xor-rr r1 r1)
		(assign '(r1 r1 r1 r1 r1 r1 r1 r1)
			'((r0 canvas_cx) (r0 canvas_cy) (r0 canvas_flags)
			(r0 canvas_stream) (r0 canvas_bufp) (r0 canvas_texture)
			(r0 canvas_edges_start) (r0 canvas_coverage)))
		(vp-cpy-cr argb_black r1)
		(assign '(r1 (r0 canvas_array)) '((r0 canvas_color) r1))
		(assign '((r1 canvas_width) (r1 canvas_height) (r1 canvas_scale)
			(r1 canvas_stride) (r1 canvas_array) (r1 canvas_edges) (r1 canvas_texture))
			'(r1 r2 r3 r4 r5 r6 r7))
		(assign '(r1 r2 r1 r2 r3 r4 r5 r6 r7)
			'((r0 canvas_width) (r0 canvas_height) (r0 canvas_cx1) (r0 canvas_cy1)
			(r0 canvas_scale) (r0 canvas_stride) (r0 canvas_array) (r0 canvas_edges) (r0 canvas_texture)))
		(class/obj/ref r5 r1)
		(class/obj/ref r6 r1)
		(vpif '(r7 /= 0))
			(class/obj/ref r7 r1)
		(endif)
		(call 'canvas 'pref_size '(r0) '(r0 (r0 view_w) (r0 view_h)))
	(endif)

	(exit 'canvas 'init_shared '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'canvas 'deinit)
	;inputs
	;r0 = canvas object (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;all but r0

	(vp-push r0)

	;free any flm stream
	(call 'stream 'deref_if '((r0 canvas_stream)))

	;free edge arrays
	(assign '((rsp 0)) '(r0))
	(call 'array 'deref '((r0 canvas_edges)))
	(assign '((rsp 0)) '(r0))
	(call 'sys_mem 'free '((r0 canvas_edges_start)))

	;free alias buffers
	(assign '((rsp 0)) '(r0))
	(call 'sys_mem 'free '((r0 canvas_coverage)))

	;free pixel buffer
	(assign '((rsp 0)) '(r0))
	(call 'array 'deref '((r0 canvas_array)))

	;free any texture
	(assign '((rsp 0)) '(r0))
	(call 'texture 'deref_if '((r0 canvas_texture)))

	(vp-pop r0)
	(s-jump 'canvas 'deinit '(r0))

(def-func-end)

(def-method 'canvas 'load)
	;inputs
	;r0 = c string name (pubyte)
	;r1 = flags (uint)
	;outputs
	;r0 = 0 if error, else shared canvas object (ptr)
	;trashes
	;all

	(ptr 'this 'name 'sym)
	(union
		(ptr 'hash)
		(ptr 'bucket))
	(union
		(ptr 'stream)
		(pptr 'iter))
	(uint 'flags)

	(push-scope)
	(entry 'canvas 'load {name, flags})

	;shared or not
	(vpif {flags & load_flag_shared} 'funcexit)
		;create hash map ?
		(assign {ptr($canvass)} {hash})
		(vpifnot {hash})
			(call 'hmap 'create {0, 1} {hash})
			(assign {hash} {ptr($canvass)})
		(endif)

		;create interned name, lookup in map
		(call 'sym 'intern_cstr {name} {sym})
		(call 'hmap 'find {hash, sym} {_, iter, bucket})
		(vpifnot {iter})
			;open file stream
			(call 'str 'create_from_file {name} {this})
			(breakifnot {this} 'funcexit)
			(call 'stream_str 'create {this} {stream})
			(call 'canvas 'load_file {name, stream} {this})
			(call 'stream_str 'deref {stream})
			(breakifnot {this} 'funcexit)
			(vpifnot {flags & load_flag_noswap})
				(call 'canvas 'swap {this} {this})
			(endif)
			(call 'pair 'create {sym, this} {iter})
			(call 'vector 'push_back {bucket, iter})
			(call 'canvas 'create_shared {this} {this})
			(break 'funcexit)
		(endif)
		(call 'pair 'get_second {*iter} {_, this})
		(call 'canvas 'create_shared {this} {this})
		(call 'sym 'deref {sym})
	(else)
		;open file stream
		(call 'str 'create_from_file {name} {this})
		(breakifnot {this})
		(call 'stream_str 'create {this} {stream})
		(call 'canvas 'load_file {name, stream} {this})
		(vpif {this})
			(vpifnot {flags & load_flag_noswap})
				(call 'canvas 'swap {this} {this})
			(endif)
			(breakifnot {flags & load_flag_film})
			(assign {stream} {this->canvas_stream})
			(assign {stream->stream_bufp} {this->canvas_bufp})
			(break 'funcexit)
		(endif)
		(call 'stream_str 'deref {stream})
	(endif)

	(exit 'canvas 'load {this})
	(pop-scope)
	(return)

;;;;;;;;;;;;;;;;;
; interned canvas
;;;;;;;;;;;;;;;;;

	(vp-align ptr_size)
(vp-label 'canvass)
	(vp-long 0)

(def-func-end)

(def-method 'canvas 'load_file)
	;inputs
	;r4 = c string name (pubyte)
	;r5 = stream object (ptr)
	;outputs
	;r0 = 0 if error, else canvas object (ptr)
	;trashes
	;all

	(entry 'canvas 'load_file '(r4 r5))

	(call 'sys_str 'length '(r4) '(_ r1))
	(switch)
	(breakif '(r1 < 4))
	(vp-add-rr r1 r4)
	(vp-sub-cr 4 r4)
	(call 'sys_str 'compare '(r4 ".cpm") '(r0))
	(nextcaseif '(r0 /= 0))
		(jump 'canvas 'load_cpm '(r5))
	(else)
	(call 'sys_str 'compare '(r4 ".flm") '(r0))
	(nextcaseif '(r0 /= 0))
		(jump 'canvas 'load_cpm '(r5))
	(else)
	(call 'sys_str 'compare '(r4 ".tga") '(r0))
	(nextcaseif '(r0 /= 0))
		(jump 'canvas 'load_tga '(r5))
	(endswitch)

	(exit 'canvas 'load_file '(0))
	(vp-ret)

(def-func-end)

(def-method 'canvas 'save)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = c string name (pubyte)
	;r2 = format (uint)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;all

	(ptr 'this 'name 'stream 'buffer)
	(uint 'format)
	(int 'fd)

	(push-scope)
	(entry 'canvas 'save {this, name, format})

	;open file stream
	(call 'sys_pii 'open {name, file_open_write} {fd})
	(vpif {fd >= 3})
		(call 'str 'create_from_buffer {0, str_gap} {buffer})
		(call 'stream_str 'create {buffer} {stream})
		(call 'canvas 'save_file {this, name, stream, format})
		(call 'stream_str 'ref_string {stream} {_, buffer})
		(call 'stream_str 'deref {stream})
		(call 'sys_pii 'write {fd, &buffer->str_data, buffer->str_length})
		(call 'str 'deref {buffer})
		(call 'sys_pii 'close {fd})
	(endif)

	(exit 'canvas 'save {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'canvas 'save_file)
	;inputs
	;r4 = canvas object (ptr)
	;r5 = c string name (pubyte)
	;r6 = stream object (ptr)
	;r7 = format (uint)
	;outputs
	;r0 = 0 if error, else canvas object (ptr)
	;trashes
	;all

	(entry 'canvas 'save_file '(r4 r5 r6 r7))

	(call 'sys_str 'length '(r5) '(_ r1))
	(switch)
	(breakif '(r1 < 4))
	(vp-add-rr r1 r5)
	(vp-sub-cr 4 r5)
	(call 'sys_str 'compare '(r5 ".cpm") '(r0))
	(nextcaseif '(r0 /= 0))
		(jump 'canvas 'save_cpm '(r4 r6 r7))
	(endswitch)

	(exit 'canvas 'save_file '(0))
	(vp-ret)

(def-func-end)

(def-method 'canvas 'draw)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = draw ctx (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'ctx)

	(push-scope)
	(entry 'canvas 'draw {this, ctx})

	;blit any texture
	(vpif {this->canvas_texture})
		(call 'ctx 'blit {ctx, this->canvas_texture->texture_handle, 0xffffff, 0, 0,
			this->canvas_texture->texture_width, this->canvas_texture->texture_height})
	(endif)

	(exit 'canvas 'draw {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'canvas 'swap 16)
	;inputs
	;r0 = canvas object (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;all but r0

	(entry 'canvas 'swap '(r0))

	(vp-push r0)
	(call 'sys_task 'callback '(r0 ($ callback)))
	(vp-pop r0)

	(exit 'canvas 'swap '(r0))
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = user data

	(ptr 'this 'surface 'temp_canvas 'old_stack)
	(ulong 'tex_id)
	(uint 'blend_mode)

	(vp-cpy-rr rsp r1)
	(push-scope)
	(vp-and-cr -16 rsp)
	(entry {this, old_stack})

	;free any sdl texture
	(call 'texture 'deref_if {this->canvas_texture})

	;create SDL surface from pixel buffer, convert to texture
	(vpif {this->canvas_scale = 1})
		(call 'canvas 'ref {this} {temp_canvas})
	(else)
		(call 'canvas 'create {this->canvas_width / this->canvas_scale, this->canvas_height / this->canvas_scale, 1} {temp_canvas})
		(call 'canvas 'resize {temp_canvas, this})
	(endif)
	(host-call 'host 'sdl_create_rgb_surface_from {temp_canvas->canvas_array->array_begin,
		temp_canvas->canvas_width, temp_canvas->canvas_height, 32,
		temp_canvas->canvas_stride, 0xff0000, 0xff00, 0xff, 0xff000000} {surface})
	(host-call 'host 'sdl_create_texture_from_surface (cat {@} (f-path 'gui 'statics) {.gui_statics_renderer, surface})
		{tex_id})
	(host-call 'host 'sdl_compose_custom_blend_mode
		{SDL_BLENDFACTOR_ONE, SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA, SDL_BLENDOPERATION_ADD,
		SDL_BLENDFACTOR_ONE, SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA, SDL_BLENDOPERATION_ADD} {blend_mode})
	(host-call 'host 'sdl_set_texture_blend_mode {tex_id, blend_mode})
	(host-call 'host 'sdl_free_surface {surface})
	(call 'texture 'create {tex_id, temp_canvas->canvas_width, temp_canvas->canvas_height} {this->canvas_texture})
	(call 'canvas 'deref {temp_canvas})

	(assign {old_stack} '(rsp))
	(pop-scope-syms)
	(return)

(def-func-end)

(def-method 'canvas 'pref_size)
	;inputs
	;r0 = canvas object (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;r9 = preferred width (pixels)
	;r10 = preferred height (pixels)
	;trashes
	;all but r0

	(ptr 'this)

	(push-scope)
	(entry 'canvas 'pref_size {this})
	(exit 'canvas 'pref_size {this, this->canvas_width / this->canvas_scale,
									this->canvas_height / this->canvas_scale})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'canvas 'to_premul)
	;inputs
	;r1 = color (argb)
	;outputs
	;r1 = color premul (argb)
	;trashes
	;r2-r3

	(entry 'canvas 'to_premul '(r1))

	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r1 r3)
	(vp-shr-cr 24 r1)
	(vp-and-cr 0xff00ff r2)
	(vp-and-cr 0xff00 r3)
	(vp-mul-rr r1 r2)
	(vp-mul-rr r1 r3)
	(vp-shl-cr 24 r1)
	(vp-shr-cr 8 r2)
	(vp-shr-cr 8 r3)
	(vp-and-cr 0xff00ff r2)
	(vp-and-cr 0xff00 r3)
	(vp-add-rr r2 r1)
	(vp-add-rr r3 r1)

	(exit 'canvas 'to_premul '(r1))
	(vp-ret)

(def-func-end)

(def-method 'canvas 'to_argb)
	;inputs
	;r1 = color premul (argb)
	;outputs
	;r1 = color (argb)
	;trashes
	;r2-r4

	(entry 'canvas 'to_argb '(r1))

	(vp-cpy-rr r1 r3)
	(vp-shr-cr 24 r3)
	(vpif '(r3 /= 0) '(r3 /= 0xff))
		(vp-cpy-rr r0 r4)
		(vp-xor-rr r2 r2)
		(vp-cpy-cr (* 255 256) r0)
		(vp-div-rrr-u r3 r2 r0)
		(vp-cpy-rr r1 r3)
		(vp-cpy-rr r1 r2)
		(vp-shr-cr 24 r1)
		(vp-and-cr 0xff00ff r3)
		(vp-and-cr 0xff00 r2)
		(vp-mul-rr r0 r3)
		(vp-mul-rr r0 r2)
		(vp-shl-cr 24 r1)
		(vp-shr-cr 8 r3)
		(vp-shr-cr 8 r2)
		(vp-and-cr 0xff00ff r3)
		(vp-and-cr 0xff00 r2)
		(vp-add-rr r3 r1)
		(vp-add-rr r2 r1)
		(vp-cpy-rr r4 r0)
	(endif)

	(exit 'canvas 'to_argb '(r1))
	(vp-ret)

(def-func-end)

(def-method 'canvas 'fill)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = color (argb)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r2-r4

	(entry 'canvas 'fill '(r0 r1))

	(call 'canvas 'to_premul '(r1) '(r1))
	(assign '((r0 canvas_array) (r0 canvas_stride) (r0 canvas_height)) '(r2 r3 r4))
	(assign '((r2 array_begin)) '(r2))
	(vp-mul-rr r4 r3)
	(vp-add-rr r2 r3)
	(loop-start)
		(vp-cpy-ri-i r1 r2 0)
		(vp-add-cr int_size r2)
	(loop-until '(r2 = r3))

	(exit 'canvas 'fill '(r0))
	(vp-ret)

(def-func-end)

(def-method 'canvas 'as_argb)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = source canvas object (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r1-r9

	(entry 'canvas 'as_argb '(r0 r1))

	(assign '((r0 canvas_array) (r1 canvas_array)) '(r5 r7))
	(assign '((r5 array_begin) (r7 array_begin) (r0 canvas_stride) (r0 canvas_height))
		'(r5 r7 r6 r1))
	(vp-mul-rr r1 r6)
	(vp-add-rr r5 r6)
	(vp-xor-rr r8 r8)
	(vp-xor-rr r9 r9)
	(loop-start)
		(vp-cpy-ir-ui r7 0 r1)
		(vpif '(r1 /= r8))
			(vp-cpy-rr r1 r8)
			(call 'canvas 'to_argb '(r1) '(r9))
		(endif)
		(vp-cpy-ri-i r9 r5 0)
		(vp-add-cr int_size r5)
		(vp-add-cr int_size r7)
	(loop-until '(r5 = r6))

	(exit 'canvas 'as_argb '(r0))
	(vp-ret)

(def-func-end)

(def-method 'canvas 'as_premul)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = source canvas object (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r1-r8

	(entry 'canvas 'as_premul '(r0 r1))

	(assign '((r0 canvas_array) (r1 canvas_array)) '(r5 r6))
	(assign '((r5 array_begin) (r6 array_begin) (r0 canvas_stride) (r0 canvas_height))
		'(r5 r6 r4 r1))
	(vp-mul-rr r1 r4)
	(vp-add-rr r5 r4)
	(vp-xor-rr r7 r7)
	(vp-xor-rr r8 r8)
	(loop-start)
		(vp-cpy-ir-ui r6 0 r1)
		(vpif '(r1 /= r7))
			(vp-cpy-rr r1 r7)
			(call 'canvas 'to_premul '(r1) '(r8))
		(endif)
		(vp-cpy-ri-i r8 r5 0)
		(vp-add-cr int_size r5)
		(vp-add-cr int_size r6)
	(loop-until '(r5 = r4))

	(exit 'canvas 'as_premul '(r0))
	(vp-ret)

(def-func-end)

(def-method 'canvas 'set_clip)
	;inputs
	;r0 = canvas object (ptr)
	;r7 = x (pixels)
	;r8 = y (pixels)
	;r9 = x1 (pixels)
	;r10 = y1 (pixels)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r1-r2

	(entry 'canvas 'set_clip '(r0 r7 r8 r9 r10))

	;clip check
	(assign '((r0 canvas_width) (r0 canvas_height)) '(r1 r2))
	(vpif '(r7 <= r9) '(r8 <= r10) '(r7 < r1) '(r8 < r2) '(r9 >= 0) '(r10 >= 0))
		(vpif '(r7 < 0))
			(vp-xor-rr r7 r7)
		(endif)
		(vpif '(r8 < 0))
			(vp-xor-rr r8 r8)
		(endif)
		(vpif '(r9 > r1))
			(vp-cpy-rr r1 r9)
		(endif)
		(vpif '(r10 > r2))
			(vp-cpy-rr r2 r10)
		(endif)
		(assign '(r7 r8 r9 r10) '((r0 canvas_cx) (r0 canvas_cy) (r0 canvas_cx1) (r0 canvas_cy1)))
	(endif)

	(exit 'canvas 'set_clip '(r0))
	(vp-ret)

(def-func-end)

(def-method 'canvas 'span_noclip)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = coverage (ulong)
	;r7 = x (pixels)
	;r8 = y (pixels)
	;r9 = x1 (pixels)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r1-r9
	;info
	;coverage is 0x0 to 0x80

	(entry 'canvas 'span_noclip '(r0 r1 r7 r8 r9))

	(switch)
	(breakif '(r1 = 0))
	(assign '((r0 canvas_color)) '(r2))
	(vp-cpy-rr r2 r3)
	(vp-shr-cr 24 r2)
	(vp-and-cr 0xffffff r3)
	(vp-mul-rr r2 r1)
	(vp-shr-cr 7 r1)
	(vp-shl-cr 24 r1)
	(vp-add-rr r3 r1)
	(call 'canvas 'to_premul '(r1) '(r1))
	(vp-cpy-rr r1 r2)
	(vp-shr-cr 24 r2)
	(breakif '(r2 = 0))
	(vpcase '(r2 = 0xff))
		(assign '((r0 canvas_array) (r0 canvas_stride)) '(r3 r2))
		(assign '((r3 array_begin)) '(r3))
		(vp-mul-rr r2 r8)
		(vp-shl-cr (log2 int_size) r7)
		(vp-shl-cr (log2 int_size) r9)
		(vp-add-rr r8 r3)
		(loop-start)
			(vp-cpy-rd-i r1 r3 r7)
			(vp-add-cr int_size r7)
		(loop-until '(r7 = r9))

		(exit 'canvas 'span_noclip '(r0))
		(vp-ret)
	(default)
		(vp-cpy-cr 0xff r6)
		(vp-cpy-cr 0x00ff00ff r4)
		(vp-cpy-cr 0xff00ff00 r5)
		(vp-sub-rr r2 r6)

		(assign '((r0 canvas_array) (r0 canvas_stride)) '(r3 r2))
		(assign '((r3 array_begin)) '(r3))
		(vp-mul-rr r2 r8)
		(vp-shl-cr (log2 int_size) r7)
		(vp-shl-cr (log2 int_size) r9)
		(vp-add-rr r8 r3)
		(vp-add-rr r3 r7)
		(vp-add-rr r3 r9)
		(loop-start)
			(vp-cpy-ir-ui r7 0 r2)

			(vp-cpy-rr r2 r3)
			(vp-and-rr r4 r2)
			(vp-and-rr r5 r3)
			(vp-mul-rr r6 r2)
			(vp-mul-rr r6 r3)
			(vp-shr-cr 8 r2)
			(vp-shr-cr 8 r3)
			(vp-and-rr r4 r2)
			(vp-and-rr r5 r3)
			(vp-add-rr r3 r2)
			(vp-add-rr r1 r2)

			(vp-cpy-ri-i r2 r7 0)
			(vp-add-cr int_size r7)
		(loop-until '(r7 = r9))
	(endswitch)

	(exit 'canvas 'span_noclip '(r0))
	(vp-ret)

(def-func-end)

(def-method 'canvas 'span)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = coverage (ulong)
	;r7 = x (pixels)
	;r8 = y (pixels)
	;r9 = x1 (pixels)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r1-r9
	;info
	;coverage is 0x0 to 0x80

	(entry 'canvas 'span '(r0 r1 r7 r8 r9))

	;clip check
	(assign '((r0 canvas_cx) (r0 canvas_cy) (r0 canvas_cx1) (r0 canvas_cy1)) '(r2 r3 r4 r5))
	(vpif '(r9 > r7) '(r9 > r2) '(r8 >= r3) '(r7 < r4) '(r8 < r5))
		(vpif '(r7 < r2))
			(vp-cpy-rr r2 r7)
		(endif)
		(vpif '(r9 > r4))
			(vp-cpy-rr r4 r9)
		(endif)
		(jump 'canvas 'span_noclip '(r0 r1 r7 r8 r9))
	(endif)

	(exit 'canvas 'span '(r0))
	(vp-ret)

(def-func-end)

(def-method 'canvas 'pick)
	;inputs
	;r0 = canvas object (ptr)
	;r7 = x (pixels)
	;r8 = y (pixels)
	;outputs
	;r0 = canvas object (ptr)
	;r1 = color (argb)
	;trashes
	;all but r0

	(entry 'canvas 'pick '(r0 r7 r8))

	;clip check
	(assign '((r0 canvas_cx) (r0 canvas_cy) (r0 canvas_cx1) (r0 canvas_cy1)) '(r3 r4 r5 r6))
	(vpif '(r7 >= r3) '(r8 >= r4) '(r7 < r5) '(r8 < r6))
		(assign '((r0 canvas_stride) (r0 canvas_array)) '(r1 r2))
		(vp-mul-rr r1 r8)
		(assign '((r2 array_begin)) '(r2))
		(vp-shl-cr (log2 int_size) r7)
		(vp-add-rr r8 r2)
		(vp-cpy-dr-i r2 r7 r1)
		(jump 'canvas 'to_argb '(r1))
	(endif)
	(vp-xor-rr r1 r1)

	(exit 'canvas 'pick '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'canvas 'plot)
	;inputs
	;r0 = canvas object (ptr)
	;r7 = x (pixels)
	;r8 = y (pixels)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;all but r0

	(entry 'canvas 'plot '(r0 r7 r8))

	;clip check
	(assign '((r0 canvas_cx) (r0 canvas_cy) (r0 canvas_cx1) (r0 canvas_cy1)) '(r3 r4 r5 r6))
	(switch)
	(breakif '(r7 < r3) '(r8 < r4) '(r7 >= r5) '(r8 >= r6))
	(assign '((r0 canvas_color)) '(r1))
	(call 'canvas 'to_premul '(r1) '(r1))
	(vp-cpy-rr r1 r2)
	(vp-shr-cr 24 r2)
	(breakif '(r2 = 0))
	(vpcase '(r2 = 0xff))
		(assign '((r0 canvas_stride) (r0 canvas_array)) '(r2 r3))
		(vp-mul-rr r2 r8)
		(assign '((r3 array_begin)) '(r3))
		(vp-shl-cr (log2 int_size) r7)
		(vp-add-rr r8 r3)
		(vp-cpy-rd-i r1 r3 r7)

		(exit 'canvas 'plot '(r0))
		(vp-ret)
	(default)
		(vp-cpy-cr 0xff r6)
		(vp-cpy-cr 0x00ff00ff r4)
		(vp-cpy-cr 0xff00ff00 r5)
		(vp-sub-rr r2 r6)

		(assign '((r0 canvas_stride) (r0 canvas_array)) '(r2 r3))
		(vp-mul-rr r2 r8)
		(assign '((r3 array_begin)) '(r3))
		(vp-shl-cr (log2 int_size) r7)
		(vp-add-rr r8 r3)
		(vp-add-rr r3 r7)

		(vp-cpy-ir-ui r7 0 r2)
		(vp-cpy-rr r2 r3)
		(vp-and-rr r4 r2)
		(vp-and-rr r5 r3)
		(vp-mul-rr r6 r2)
		(vp-mul-rr r6 r3)
		(vp-shr-cr 8 r2)
		(vp-shr-cr 8 r3)
		(vp-and-rr r4 r2)
		(vp-and-rr r5 r3)
		(vp-add-rr r3 r2)
		(vp-add-rr r1 r2)
		(vp-cpy-ri-i r2 r7 0)
	(endswitch)

	(exit 'canvas 'plot '(r0))
	(vp-ret)

(def-func-end)

(def-method 'canvas 'fbox)
	;inputs
	;r0 = canvas object (ptr)
	;r7 = x (pixels)
	;r8 = y (pixels)
	;r9 = w (pixels)
	;r10 = h (pixels)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;all but r0

	(ptr 'this)
	(int 'x 'y 'w 'h)

	(push-scope)
	(entry 'canvas 'fbox {this, x, y, w, h})

	;clip check
	(switch)
	(breakif {w <= 0 || h <= 0})
	(assign {x + w, y + h} {w, h})
	(breakif {x >= this->canvas_cx1 || w <= this->canvas_cx || y >= this->canvas_cy1 || h <= this->canvas_cy})
		(vpif {x < this->canvas_cx})
			(assign {this->canvas_cx} {x})
		(endif)
		(vpif {w > this->canvas_cx1})
			(assign {this->canvas_cx1} {w})
		(endif)
		(vpif {y < this->canvas_cy})
			(assign {this->canvas_cy} {y})
		(endif)
		(vpif {h > this->canvas_cy1})
			(assign {this->canvas_cy1} {h})
		(endif)
		(loop-start)
			(call 'canvas 'span_noclip {this, 0x80, x, y, w})
		(loop-until {(y + 1 => y) = h})
	(endswitch)

	(exit 'canvas 'fbox {this})
	(pop-scope)
	(return)

(def-func-end)
