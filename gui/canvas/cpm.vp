(include "sys/func.inc")
(include "gui/canvas/class.inc")
(include "gui/ctx/class.inc")
(include "class/stream/class.inc")
(include "class/array/class.inc")

(def-struct 'cpm)
	(uint 'ident)		;ident '.CPM' or '.FLM'
	(uint 'bytes)		;0 if not known, else total size
	(uint 'version)		;version number
	(uint 'type)		;image type
	(uint 'width)		;image w
	(uint 'height)		;image h
	(uint 'trans)		;image transparent colour
(def-struct-end)

(def-method 'canvas :info_cpm)
	;inputs
	;r5 = stream object (ptr)
	;outputs
	;r0 = -1 if error, else width (pixels)
	;r1 = -1 if error, else height (pixels)
	;r2 = -1 if error, else type (uint)
	;trashes
	;r0-r14

	(def-struct 'local)
		(struct 'header 'cpm)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'canvas :info_cpm '(r0))

	;read header
	(call 'stream :read '(r0 rsp cpm_size) '(_ r1))
	(switch)
	(breakif '(r1 /= cpm_size))
	(assign '((rsp cpm_ident)) '(r0))
	(vpcase `(r0 = ,(code "MPC." 4)))
	(vp-label 'okident)
		;return info
		(exit 'canvas :info_cpm '((rsp cpm_width) (rsp cpm_height) (rsp cpm_type)))
		(vp-free local_size)
		(vp-ret)
	(vpcase `(r0 = ,(code "MLF." 4)))
		(goto 'okident)
	(endswitch)

	;return error
	(exit 'canvas :info_cpm '(-1 -1 -1))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'canvas :load_cpm)
	;inputs
	;r5 = stream object (ptr)
	;outputs
	;r0 = 0 if error, else canvas object (ptr)
	;trashes
	;r0-r14

	(ptr 'this 'stream)
	(puint 'data 'data_end)
	(ulong 'bit_pool)
	(struct 'header 'cpm)
	(int 'length 'bit_pool_size)
	(ulong 'col)

	;save inputs
	(push-scope)
	(entry 'canvas :load_cpm {stream})

	;read header
	(call 'stream :read {stream, &header, cpm_size} {_, length})
	(gotoif {length /= cpm_size} 'error1)

	;check ident '.CPM' or '.FLM'
	(gotoifnot (cat {header.cpm_ident = } (str (code "MPC." 4))
			{ || header.cpm_ident = } (str (code "MLF." 4))) 'error1)

	;create canvas
	(call 'canvas :create {header.cpm_width, header.cpm_height, 1} {this})
	(vpif {this})
		;fill with transparent
		(call 'canvas :fill {this, 0})
		(assign {header.cpm_type} {this->canvas_stream_type})
		(assign {this->canvas_array->array_begin} {data})
		(assign {data + this->canvas_height * this->canvas_stride} {data_end})
		(assign {0 => bit_pool} {bit_pool_size})

		;decode acording to type
		(vp-def (len col trans data data_end))
		(loop-start)
			;get token
			(call 'stream :read_bits {stream, 8, bit_pool, bit_pool_size} {_, length, bit_pool, bit_pool_size})
			(assign {length} (list len))
			(gotoif `(,len = -1) 'error)
			(vpif `(,len >= 128))
				;run of a pixel
				(vp-sub-cr 127 len)
				(assign (list len) {length})
				(call 'stream :read_bits {stream, header.cpm_type, bit_pool, bit_pool_size} {_, col, bit_pool, bit_pool_size})
				(gotoif {col = -1} 'error)
				(call 'canvas :to_argb32 {col, header.cpm_type} (list col))

				;fill or skip
				(assign {length, header.cpm_trans, data, data_end}
					(list len trans data data_end))
				(vpif `(,col /= ,trans))
					(loop-start)
						(gotoif `(,data >= ,data_end) 'error)
						(vp-cpy-ri-i col data 0)
						(vp-sub-cr 1 len)
						(vp-add-cr int_size data)
					(loop-until `(,len = 0))
				(else)
					(vp-shl-cr (log2 int_size) len)
					(vp-add-rr len data)
				(endif)
			(else)
				;block of pixels
				(vp-add-cr 1 len)
				(loop-start)
					(assign (list len) {length})
					(call 'stream :read_bits {stream, header.cpm_type, bit_pool, bit_pool_size} {_, col, bit_pool, bit_pool_size})
					(gotoif {col = -1} 'error)
					(call 'canvas :to_argb32 {col, header.cpm_type} (list col))
					(assign {length, header.cpm_trans, data, data_end}
						(list len trans data data_end))
					(gotoif `(,data >= ,data_end) 'error)
					(vpif `(,col /= ,trans))
						(vp-cpy-ri-i col data 0)
					(endif)
					(vp-sub-cr 1 len)
					(vp-add-cr int_size data)
					(assign (list data) {data})
				(loop-until `(,len = 0))
			(endif)
			(assign (list data) {data})
		(loop-until `(,data = ,data_end))
		(call 'canvas :as_premul {this, this})
	(endif)

	(exit 'canvas :load_cpm {this})
	(return)

(vp-label 'error)
	(call 'canvas :deref {this})
(vp-label 'error1)
	(exit 'canvas :load_cpm '(0))
	(pop-scope)
	(return)

(def-func-end)

(def-method 'canvas :save_cpm)
	;inputs
	;r4 = canvas object (ptr)
	;r6 = stream object (ptr)
	;r7 = format (uint)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r0-r14

	(ptr 'this 'stream)
	(puint 'data 'data1 'data2)
	(ulong 'bit_pool)
	(struct 'header 'cpm)
	(int 'bit_pool_size)
	(uint 'format 'i 'j 'state 'len 'col 'next_col)

	;save inputs
	(push-scope)
	(entry 'canvas :save_cpm {this, stream, format})

	;write header
	(assign (str (code "MPC." 4)) {header.cpm_ident})
	(assign {0 => header.cpm_bytes} {header.cpm_trans})
	(assign {1} {header.cpm_version})
	(assign {format} {header.cpm_type})
	(assign {this->canvas_width} {header.cpm_width})
	(assign {this->canvas_height} {header.cpm_height})
	(call 'stream :write {stream, &header, cpm_size})

	;save canvas
	(assign {this->canvas_array->array_begin} {data})
	(assign {this->canvas_height * this->canvas_width} {len})
	(assign {0 => bit_pool => bit_pool_size => i} {state})

	(loop-while {i < len} 'pixloop)
		(switch)
		(vpcase {state = 0})
			;no state
			(call 'canvas :to_argb {data[i * int_size]} {col})
			(call 'canvas :from_argb32 {col, format} {col})
			(assign {i} {j})
			(assign {i + 1} {i})
			(vpif {i = len})
				(call 'stream :write_bits {stream, 0, 8, bit_pool, bit_pool_size} {_, bit_pool, bit_pool_size})
				(call 'stream :write_bits {stream, col, format, bit_pool, bit_pool_size} {_, bit_pool, bit_pool_size})
				(break 'pixloop)
			(endif)
			(call 'canvas :to_argb {data[i * int_size]} {next_col})
			(call 'canvas :from_argb32 {next_col, format} {next_col})
			(assign {2} {state})
			(continueif {col /= next_col} 'pixloop)
			(assign {1} {state})
			(continue 'pixloop)
		(default)
			;repeat state
			(call 'canvas :to_argb {data[i * int_size]} {next_col})
			(call 'canvas :from_argb32 {next_col, format} {next_col})
			(assign {i + 1} {i})
			(nextcaseif {state /= 1})
			(switch)
			(vpcase {col /= next_col})
				(assign {i - 1} {i})
				(goto 'dorep)
			(vpcase {i = len || (i - j) = 0x80})
			(vp-label 'dorep)
				(call 'stream :write_bits {stream, i - j - 1 + 0x80, 8, bit_pool, bit_pool_size} {_, bit_pool, bit_pool_size})
				(call 'stream :write_bits {stream, col, format, bit_pool, bit_pool_size} {_, bit_pool, bit_pool_size})
				(assign {0} {state})
			(endswitch)
			(continue 'pixloop)
		(default)
			;block state
			(switch)
			(vpcase {col = next_col})
				(assign {i - 1} {i})
				(goto 'doblk)
			(vpcase {i = len || (i - j) = 0x80})
			(vp-label 'doblk)
				(call 'stream :write_bits {stream, i - j - 1, 8, bit_pool, bit_pool_size} {_, bit_pool, bit_pool_size})
				(assign {&data[j * int_size], &data[i * int_size]} {data1, data2})
				(loop-start)
					(call 'canvas :to_argb {*data1} {col})
					(call 'canvas :from_argb32 {col, format} {col})
					(call 'stream :write_bits {stream, col, format, bit_pool, bit_pool_size} {_, bit_pool, bit_pool_size})
				(loop-until {(data1 + int_size => data1) = data2})
				(assign {0} {state})
				(continue 'pixloop)
			(endswitch)
			(assign {next_col} {col})
		(endswitch)
	(loop-end)
	(call 'stream :write_bits {stream, 0, 7, bit_pool, bit_pool_size})

	(exit 'canvas :save_cpm {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'canvas :next_frame)
	;inputs
	;r0 = canvas object (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r1-r14

	(ptr 'this)
	(puint 'data 'data_end)
	(ulong 'col)
	(int 'length)

	;save inputs
	(push-scope)
	(entry 'canvas :next_frame {this})

	(vpif {this->canvas_stream} 'error)
		;decode acording to type
		(assign {this->canvas_array->array_begin} {data})
		(assign {data + this->canvas_height * this->canvas_stride} {data_end})

		(vp-def (len col data data_end))
		(loop-start)
			;get token, loop back if stream end
			(loop-start)
				(call 'stream :read_char {this->canvas_stream} (list '_ len))
				(breakif `(,len /= -1))
				(assign {this->canvas_bufp} {this->canvas_stream->stream_bufp})
			(loop-end)

			;decode token
			(vpif `(,len >= 128))
				;skip
				(assign {data, data_end} (list data data_end))
				(vp-sub-cr 256 len)
				(vp-shl-cr (log2 int_size) len)
				(vp-sub-rr len data)
			(else)
				;block of pixels
				(loop-start)
					(assign (list len) {length})
					(call 'stream :read_bits {this->canvas_stream, this->canvas_stream_type, 0, 0} {_, col, _, _})
					(breakif {col = -1} 'error)
					(call 'canvas :to_argb32 {col, this->canvas_stream_type} (list col))
					(call 'canvas :to_premul (list col) (list col))
					(assign {length, data, data_end} (list len data data_end))
					(breakif `(,data >= ,data_end) 'error)
					(vp-cpy-ri-i col data 0)
					(vp-sub-cr 1 len)
					(vp-add-cr int_size data)
					(assign (list data) {data})
				(loop-until `(,len = 0))
			(endif)
			(assign (list data) {data})
		(loop-until `(,data = ,data_end))
	(endif)

	(exit 'canvas :next_frame {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'canvas :to_argb32)
	;inputs
	;r1 = col (uint)
	;r2 = pixel type (uint)
	;outputs
	;r1 = col (uint)
	;trashes
	;r1-r8

	(vp-def (col pix rh rl gh gl bh bl) '(r1 r2 r3 r4 r5 r6 r7 r8))

	(entry 'canvas :to_argb32 (list col pix))

	(switch)
	(vpcase `(,pix = 32))
		(vp-cpy-cr argb_black pix)
		(vp-xor-rr pix col)
		(break)
	(vpcase `(,pix = 24))
		(vp-cpy-cr argb_black pix)
		(vp-add-rr pix col)
		(break)
	(vpcase `(,pix = 16))
		(vp-cpy-rr col rh)
		(vp-cpy-rr col rl)
		(vp-cpy-rr col gh)
		(vp-cpy-rr col gl)
		(vp-cpy-rr col bh)
		(vp-cpy-rr col bl)
		(vp-and-cr 0b1111100000000000 rh)
		(vp-and-cr 0b1110000000000000 rl)
		(vp-and-cr 0b0000011111100000 gh)
		(vp-and-cr 0b0000011000000000 gl)
		(vp-and-cr 0b0000000000011111 bh)
		(vp-and-cr 0b0000000000011100 bl)
		(vp-shl-cr 8 rh)
		(vp-shl-cr 3 rl)
		(vp-shl-cr 5 gh)
		(vp-shr-cr 1 gl)
		(vp-shl-cr 3 bh)
		(vp-shr-cr 2 bl)
		(vp-cpy-cr argb_black col)
		(vp-add-rr rh rl)
		(vp-add-rr gh gl)
		(vp-add-rr bh bl)
		(vp-add-rr rl gl)
		(vp-add-rr bl col)
		(vp-add-rr gl col)
		(break)
	(vpcase `(,pix = 15))
		(vp-cpy-rr col rh)
		(vp-cpy-rr col rl)
		(vp-cpy-rr col gh)
		(vp-cpy-rr col gl)
		(vp-cpy-rr col bh)
		(vp-cpy-rr col bl)
		(vp-and-cr 0b1000000000000000 col)
		(vp-and-cr 0b0111110000000000 rh)
		(vp-and-cr 0b0111000000000000 rl)
		(vp-and-cr 0b0000001111100000 gh)
		(vp-and-cr 0b0000001110000000 gl)
		(vp-and-cr 0b0000000000011111 bh)
		(vp-and-cr 0b0000000000011100 bl)
		(vp-mul-cr 130560 col)
		(vp-shl-cr 9 rh)
		(vp-shl-cr 4 rl)
		(vp-shl-cr 6 gh)
		(vp-shr-cr 2 gl)
		(vp-shl-cr 3 bh)
		(vp-shr-cr 2 bl)
		(vp-add-rr rh rl)
		(vp-add-rr gh gl)
		(vp-add-rr bh bl)
		(vp-add-rr rl gl)
		(vp-add-rr bl col)
		(vp-add-rr gl col)
		(break)
	(vpcase `(,pix = 8))
		(vp-cpy-rr col rl)
		(vp-cpy-rr col gl)
		(vp-cpy-rr col bl)
		(vp-shl-cr 16 rl)
		(vp-shl-cr 8 gl)
		(vp-cpy-cr argb_black col)
		(vp-add-rr rl gl)
		(vp-add-rr bl col)
		(vp-add-rr gl col)
		(break)
	(default)
		(vpif `(,col = 0))
			(vp-cpy-cr argb_black col)
		(else)
			(vp-cpy-cr argb_white col)
		(endif)
	(endswitch)

	(exit 'canvas :to_argb32 (list col))
	(vp-ret)

(def-func-end)

(def-method 'canvas :from_argb32)
	;inputs
	;r1 = col (uint)
	;r2 = pixel type (uint)
	;outputs
	;r1 = col (uint)
	;trashes
	;r1-r5

	(vp-def (col pix r g b) '(r1 r2 r3 r4 r5))

	(entry 'canvas :from_argb32 (list col pix))

	(switch)
	(vpcase `(,pix = 32))
		(vp-cpy-cr argb_black pix)
		(vp-xor-rr pix col)
		(break)
	(vpcase `(,pix = 24))
		(vp-and-cr 0xffffff col)
		(break)
	(vpcase `(,pix = 16))
		(vp-cpy-rr col g)
		(vp-cpy-rr col b)
		(vp-shr-cr 8 col)
		(vp-shr-cr 5 g)
		(vp-shr-cr 3 b)
		(vp-and-cr 0b1111100000000000 col)
		(vp-and-cr 0b0000011111100000 g)
		(vp-and-cr 0b0000000000011111 b)
		(vp-add-rr g col)
		(vp-add-rr b col)
		(break)
	(vpcase `(,pix = 15))
		(vp-cpy-rr col r)
		(vp-cpy-rr col g)
		(vp-cpy-rr col b)
		(vp-shr-cr 16 col)
		(vp-shr-cr 8 r)
		(vp-shr-cr 5 g)
		(vp-shr-cr 3 b)
		(vp-and-cr 0b1000000000000000 col)
		(vp-and-cr 0b0111110000000000 r)
		(vp-and-cr 0b0000001111100000 g)
		(vp-and-cr 0b0000000000011111 b)
		(vp-add-rr r g)
		(vp-add-rr b col)
		(vp-add-rr g col)
		(break)
	(default)
		(vp-cpy-rr col g)
		(vp-cpy-rr col b)
		(vp-shr-cr 16 col)
		(vp-shr-cr 8 g)
		(vp-and-cr 0b11111111 col)
		(vp-and-cr 0b11111111 g)
		(vp-and-cr 0b11111111 b)
		(vp-mul-cr 19595 col)
		(vp-mul-cr 38469 g)
		(vp-mul-cr 7471 b)
		(vp-add-rr g col)
		(vp-add-rr b col)
		(vp-shr-cr 16 col)
		(breakif `(,pix = 8))
		(vp-shr-cr 7 col)
	(endswitch)

	(exit 'canvas :from_argb32 (list col))
	(vp-ret)

(def-func-end)
