(include "sys/func.inc")
(include "gui/canvas/class.inc")
(include "class/array/class.inc")

(def-method 'canvas :resize)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = source canvas object (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'source)
	(puint 'data 'sdata 'buf)
	(uint 'x 'y 'x2 'y2)
	(uint 'x1a 'x1b 'x1c 'x1d 'y1a 'y1b 'y1c 'y1d)
	(uint 'a 'r 'g 'b 'q 'weight_x 'weight_y)
	(long 'fw 'fh)

	(assign '((r0 canvas_width) (r0 canvas_height) (r1 canvas_width) (r1 canvas_height))
		'(r2 r3 r4 r5))
	(vp-shl-cr 1 r2)
	(vp-shl-cr 1 r3)
	(vpif '(r2 = r4) '(r3 = r5))
		(jump 'canvas :resize_2 '(r0 r1))
	(endif)
	(vp-shr-cr 1 r2)
	(vp-shr-cr 1 r3)
	(vp-mul-cr 3 r2)
	(vp-mul-cr 3 r3)
	(vpif '(r2 = r4) '(r3 = r5))
		(jump 'canvas :resize_3 '(r0 r1))
	(endif)

	(push-scope)
	(entry 'canvas :resize {this, source})

	(call 'sys_mem :alloc {(this->canvas_width + 1) * int_size} {buf, _})
	(assign {(source->canvas_width * 256) </ this->canvas_width} {fw})
	(assign {(source->canvas_height * 256) </ this->canvas_height} {fh})

	(assign {0} {x2})
	(loop-while {x2 < this->canvas_width})
		(assign {x2 *> fw} {(buf)[x2 * int_size]})
		(assign {x2 + 1} {x2})
	(loop-end)
	(assign {source->canvas_width * 256} {(buf)[x2 * int_size]})

	(assign {this->canvas_array->array_begin} {data})
	(assign {0} {y2})
	(loop-while {y2 < this->canvas_height})
		(assign {y2 *> fh} {y1a})
		(assign {y1a >> 8} {y1c})
		(assign {((y2 + 1) *> fh) - 1} {y1b})
		(assign {y1b >> 8} {y1d})

		(assign {0} {x2})
		(loop-while {x2 < this->canvas_width})
			(assign {(buf)[x2 * int_size]} {x1a})
			(assign {x1a >> 8} {x1c})
			(assign {(buf)[(x2 + 1) * int_size] - 1} {x1b})
			(assign {x1b >> 8} {x1d})

			(assign {0 => a => r => g => b} {q})

			(assign {y1c} {y})
			(loop-while {y <= y1d})
				(vp-def (weight_y y1c y1d y y1a y1b))
				(assign {256, y1c, y1d} (list weight_y y1c y1d))
				(vpif `(,y1c /= ,y1d))
					(assign {y, y1a, y1b} (list y y1a y1b))
					(vpif `(,y = ,y1c))
						(vp-and-cr 0xff y1a)
						(vp-sub-rr y1a weight_y)
					(elseif `(,y = ,y1d))
						(vp-and-cr 0xff y1b)
						(vp-add-cr 1 y1b)
						(vp-cpy-rr y1b weight_y)
					(endif)
				(endif)
				(assign (list weight_y) {weight_y})

				(assign {&(source->canvas_array->array_begin)[(y * source->canvas_width + x1c) * int_size]} {sdata})
				(assign {x1c} {x})
				(loop-while {x <= x1d})
					(vp-def (weight_x x1c x1d x x1a x1b))
 					(assign {256, x1c, x1d} (list weight_x x1c x1d))
					(vpif `(,x1c /= ,x1d))
						(assign {x, x1a, x1b} (list x x1a x1b))
						(vpif `(,x = ,x1c))
							(vp-and-cr 0xff x1a)
							(vp-sub-rr x1a weight_x)
						(elseif `(,x = ,x1d))
							(vp-and-cr 0xff x1b)
							(vp-add-cr 1 x1b)
							(vp-cpy-rr x1b weight_x)
						(endif)
					(endif)
					(assign (list weight_x) {weight_x})

					;multiply pixel channels by the pixel weight and accumulate
					(vp-def (r g b a q sr sg sb sa sdata weight))
					(assign {r, g, b, a, q, sdata, weight_x * weight_y}
						(list r g b a q sdata weight))
					(vp-cpy-ir-ui sdata 0 sa)
					(vp-add-cr int_size sdata)
					(vp-cpy-rr sa sr)
					(vp-cpy-rr sa sg)
					(vp-cpy-rr sa sb)
					(vp-shr-cr 8 sg)
					(vp-shr-cr 16 sb)
					(vp-shr-cr 24 sa)
					(vp-and-cr 0xff sr)
					(vp-and-cr 0xff sg)
					(vp-and-cr 0xff sb)
					(vp-mul-rr weight sr)
					(vp-mul-rr weight sg)
					(vp-mul-rr weight sb)
					(vp-mul-rr weight sa)
					(vp-add-rr sr r)
					(vp-add-rr sg g)
					(vp-add-rr sb b)
					(vp-add-rr sa a)
					(vp-add-rr weight q)
					(assign (list sdata r g b a q) {sdata, r, g, b, a, q})

					(assign {x + 1} {x})
				(loop-end)
				(assign {y + 1} {y})
			(loop-end)

			;divide by the pixel weight and store
			(vp-def (q r g b a data))
			(assign {(1 << 32) / q, r, g, b, a, data} (list q r g b a data))
			(vp-mul-rr q r)
			(vp-mul-rr q g)
			(vp-mul-rr q b)
			(vp-mul-rr q a)
			(vp-shr-cr 32 r)
			(vp-shr-cr 32 g)
			(vp-shr-cr 32 b)
			(vp-shr-cr 32 a)
			(vp-shl-cr 8 g)
			(vp-shl-cr 16 b)
			(vp-shl-cr 24 a)
			(vp-add-rr g r)
			(vp-add-rr b r)
			(vp-add-rr a r)
			(vp-cpy-ri-i r data 0)
			(vp-add-cr int_size data)
			(assign (list data) {data})

			(assign {x2 + 1} {x2})
		(loop-end)
		(assign {y2 + 1} {y2})
	(loop-end)

	(exit 'canvas :resize {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'canvas :resize_2)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = source canvas object (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r1-r14

	(vp-def (this source sdata xdata ydata data rb ga srb sga sw mga mrb))

	(entry 'canvas :resize_2 (list this source))

	(assign `((,this canvas_array) (,source canvas_array)) `(,data , sdata))
	(assign `((,data array_begin) (,sdata array_begin) (,source canvas_stride)
		(,source canvas_height) 0xff00ff00 0xff00ff) (list data sdata sw ydata mga mrb))

	(vp-mul-rr sw ydata)
	(vp-add-rr sdata ydata)
	(loop-while `(,sdata /= ,ydata))
		(vp-lea-d sdata sw xdata)
		(loop-while `(,sdata /= ,xdata))
			;accumulate pixel channels
			(vp-cpy-ir-ui sdata 0 ga)
			(vp-cpy-rr ga rb)
			(vp-and-rr mga ga)
			(vp-and-rr mrb rb)

			(vp-cpy-ir-ui sdata int_size sga)
			(vp-add-rr sw sdata)
			(vp-cpy-rr sga srb)
			(vp-and-rr mga sga)
			(vp-and-rr mrb srb)
			(vp-add-rr sga ga)
			(vp-add-rr srb rb)

			(vp-cpy-ir-ui sdata 0 sga)
			(vp-cpy-rr sga srb)
			(vp-and-rr mga sga)
			(vp-and-rr mrb srb)
			(vp-add-rr sga ga)
			(vp-add-rr srb rb)

			(vp-cpy-ir-ui sdata int_size sga)
			(vp-sub-rr sw sdata)
			(vp-cpy-rr sga srb)
			(vp-and-rr mga sga)
			(vp-and-rr mrb srb)
			(vp-add-rr sga ga)
			(vp-add-rr srb rb)

			;divide by the pixel weight and store
			(vp-shr-cr 2 ga)
			(vp-shr-cr 2 rb)
			(vp-and-rr mga ga)
			(vp-and-rr mrb rb)
			(vp-add-rr ga rb)
			(vp-cpy-ri-i rb data 0)

			(vp-add-cr int_size data)
			(vp-add-cr (* 2 int_size) sdata)
		(loop-end)
		(vp-add-rr sw sdata)
	(loop-end)

	(exit 'canvas :resize_2 (list this))
	(vp-ret)

(def-func-end)

(def-method 'canvas :resize_3)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = source canvas object (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r1-r14

	(vp-def (this source sdata xdata ydata data q rb ga srb sga sw mga mrb))

	(entry 'canvas :resize_3 (list this source))

	(assign `((,this canvas_array) (,source canvas_array)) `(,data , sdata))
	(assign `(,(/ (<< 1 32) 9) (,data array_begin) (,sdata array_begin) (,source canvas_stride)
		(,source canvas_height) 0xff00ff00 0xff00ff) (list q data sdata sw ydata mga mrb))

	(vp-mul-rr sw ydata)
	(vp-add-rr sdata ydata)
	(loop-while `(,sdata /= ,ydata))
		(vp-lea-d sdata sw xdata)
		(loop-while `(,sdata /= ,xdata))
			;accumulate pixel channels
			(vp-cpy-ir-ui sdata 0 ga)
			(vp-cpy-rr ga rb)
			(vp-and-rr mga ga)
			(vp-and-rr mrb rb)

			(vp-cpy-ir-ui sdata int_size sga)
			(vp-cpy-rr sga srb)
			(vp-and-rr mga sga)
			(vp-and-rr mrb srb)
			(vp-add-rr sga ga)
			(vp-add-rr srb rb)

			(vp-cpy-ir-ui sdata (* 2 int_size) sga)
			(vp-add-rr sw sdata)
			(vp-cpy-rr sga srb)
			(vp-and-rr mga sga)
			(vp-and-rr mrb srb)
			(vp-add-rr sga ga)
			(vp-add-rr srb rb)

			(vp-cpy-ir-ui sdata 0 sga)
			(vp-cpy-rr sga srb)
			(vp-and-rr mga sga)
			(vp-and-rr mrb srb)
			(vp-add-rr sga ga)
			(vp-add-rr srb rb)

			(vp-cpy-ir-ui sdata int_size sga)
			(vp-cpy-rr sga srb)
			(vp-and-rr mga sga)
			(vp-and-rr mrb srb)
			(vp-add-rr sga ga)
			(vp-add-rr srb rb)

			(vp-cpy-ir-ui sdata (* 2 int_size) sga)
			(vp-add-rr sw sdata)
			(vp-cpy-rr sga srb)
			(vp-and-rr mga sga)
			(vp-and-rr mrb srb)
			(vp-add-rr sga ga)
			(vp-add-rr srb rb)

			(vp-cpy-ir-ui sdata 0 sga)
			(vp-cpy-rr sga srb)
			(vp-and-rr mga sga)
			(vp-and-rr mrb srb)
			(vp-add-rr sga ga)
			(vp-add-rr srb rb)

			(vp-cpy-ir-ui sdata int_size sga)
			(vp-cpy-rr sga srb)
			(vp-and-rr mga sga)
			(vp-and-rr mrb srb)
			(vp-add-rr sga ga)
			(vp-add-rr srb rb)

			(vp-cpy-ir-ui sdata (* 2 int_size) sga)
			(vp-sub-rr sw sdata)
			(vp-cpy-rr sga srb)
			(vp-sub-rr sw sdata)
			(vp-and-rr mga sga)
			(vp-and-rr mrb srb)
			(vp-add-rr sga ga)
			(vp-add-rr srb rb)

			;divide by the pixel weight and store
			(vp-cpy-rr ga sga)
			(vp-cpy-rr rb srb)
			(vp-shr-cr 24 sga)
			(vp-shr-cr 16 srb)
			(vp-shr-cr 8 ga)
			(vp-and-cr 0xfff rb)
			(vp-and-cr 0xfff ga)
			(vp-mul-rr q sga)
			(vp-mul-rr q srb)
			(vp-mul-rr q ga)
			(vp-mul-rr q rb)
			(vp-shr-cr 32 sga)
			(vp-shr-cr 32 srb)
			(vp-shr-cr 32 ga)
			(vp-shr-cr 32 rb)
			(vp-shl-cr 8 ga)
			(vp-shl-cr 16 srb)
			(vp-shl-cr 24 sga)
			(vp-add-rr ga rb)
			(vp-add-rr srb rb)
			(vp-add-rr sga rb)
			(vp-cpy-ri-i rb data 0)

			(vp-add-cr int_size data)
			(vp-add-cr (* 3 int_size) sdata)
		(loop-end)
		(vp-add-rr sw sdata)
		(vp-add-rr sw sdata)
	(loop-end)

	(exit 'canvas :resize_3 (list this))
	(vp-ret)

(def-func-end)
