(include "sys/func.inc")
(include "gui/canvas/class.inc")
(include "class/list/class.inc")
(include "gui/path/class.inc")

(def-method 'canvas :set_edges)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = list of path objects (ptr)
	;r2 = x (fixed)
	;r3 = y (fixed)
	;r4 = y scale (int)
	;outputs
	;r0 = canvas object (ptr)
	;r1 = min_x (fixed)
	;r2 = min_y (fixed)
	;r3 = max_x (fixed)
	;r4 = max_y (fixed)
	;trashes
	;r1-r14

	(ptr 'this)
	(union
		(ptr 'polygons)
		(pptr 'iter_end_polygons 'iter_begin_polygons))
	(int 'ys 'ye 'xs 'xe 'x 'y 'x1 'y1)
	(pint 'iter_edge1 'iter_edge2 'iter_begin_polygon 'iter_end_polygon)
	(uint 'length 'yscale 'cy 'cy1)

	(push-scope)
	(entry 'canvas :set_edges {this, polygons, x, y, yscale})

	;fill edges, find min and max xy, clip edges not visible or redundant
	(assign {yscale * this->canvas_cy, yscale * this->canvas_cy1} {cy, cy1})
	(assign {x + 0.5, y + 0.5, +max_int+, +min_int+, +max_int+, +min_int+, 0} {x, y, xs, xe, ys, ye, length})
	(call 'list :get_both {polygons} {_, iter_begin_polygons, iter_end_polygons})
	(loop-while {iter_begin_polygons /= iter_end_polygons})
		(call 'path :get_both {*iter_begin_polygons} {_, iter_begin_polygon, iter_end_polygon})
		(call 'array :set_capacity {this->canvas_edges, length + ((iter_end_polygon - iter_begin_polygon) >> 4) * (edge_size >> 3)})
		(call 'array :get_begin {this->canvas_edges} {_, iter_edge1})
		(assign {iter_edge1 + length * long_size} {iter_edge2})
		(vpif {iter_end_polygon - iter_begin_polygon >= long_size * 6})
			(assign {iter_end_polygon[-long_size * 2] + x} {x1})
			(assign {(iter_end_polygon[-long_size] + y) * yscale >>> +fp_shift+} {y1})
			(loop-start)
				(vp-def (xlow iter_edge2 xhigh x y x1 x2 y1 y2 xs xe ys ye cy cy1))
				(assign {x1, y1, xs, xe, ys, ye, cy, cy1, iter_edge2,
					iter_begin_polygon[0] + x, (iter_begin_polygon[long_size] + y) * yscale >>> +fp_shift+}
					(list x1 y1 xs xe ys ye cy cy1 iter_edge2 x2 y2))
				(vpif `(,y1 /= ,y2))
					(vp-cpy-rr x2 x)
					(vp-asr-cr +fp_shift+ x)
					(vpif `(,x < ,xs))
						(vp-cpy-rr x xs)
					(endif)
					(vpif `(,x > ,xe))
						(vp-cpy-rr x xe)
					(endif)
					(vp-cpy-cr 1 x)
					(vpif `(,y2 < ,y1))
						(vp-swp-rr x1 x2)
						(vp-swp-rr y1 y2)
						(vp-cpy-cr -1 x)
					(endif)
					(breakif `(,y2 <= ,cy) `(,y1 >= ,cy1))
					(vp-cpy-rr x2 xlow)
					(vp-cpy-rr y2 y)
					(vp-sub-rr x1 xlow)
					(vp-sub-rr y1 y)
					(vp-ext-rr xlow xhigh)
					(vp-div-rrr y xhigh xlow)
					(vpif `(,y1 < ,cy))
						(vp-cpy-rr cy y)
						(vp-sub-rr y1 y)
						(vp-mul-rr xlow y)
						(vp-cpy-rr cy y1)
						(vp-add-rr y x1)
					(endif)
					(vp-cpy-ri-i x1 iter_edge2 edge_x)
					(vp-cpy-ri-i y1 iter_edge2 edge_ys)
					(vp-cpy-ri-i y2 iter_edge2 edge_ye)
					(vp-cpy-ri-i xlow iter_edge2 edge_dda)
					(vp-cpy-ri-i x iter_edge2 edge_w)
					(vpif `(,y1 < ,ys))
						(vp-cpy-rr y1 ys)
					(endif)
					(vpif `(,y2 > ,ye))
						(vp-cpy-rr y2 ye)
					(endif)
					(vp-add-cr edge_size iter_edge2)
					(assign (list iter_edge2 xs ys xe ye) {iter_edge2, xs, ys, xe, ye})
				(endif)
				(assign {iter_begin_polygon[0] + x} {x1})
				(assign {(iter_begin_polygon[long_size] + y) * yscale >>> +fp_shift+} {y1})
			(loop-until {(iter_begin_polygon + long_size * 2 => iter_begin_polygon) = iter_end_polygon})
			(assign {(iter_edge2 - iter_edge1) >> 3} {length})
		(endif)
		(assign {iter_begin_polygons + ptr_size} {iter_begin_polygons})
	(loop-end)
	(call 'array :set_length {this->canvas_edges, length})

	(exit 'canvas :set_edges {this, xs, ys, xe, ye})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'canvas :fpoly)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = x (fixed)
	;r2 = y (fixed)
	;r3 = winding mode (0/1)
	;r4 = list of path objects (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r1-r14

	(ptr 'this)
	(union
		(ptr 'polygons)
		(pint 'sorted_list)
		(pint 'tracker_node 'tracker_last 'tracker_list))
	(int 'ys 'ye 'xs 'xe 'x 'y 'om 'min_x 'max_x)
	(uint 'mode 'yscale 'cy 'cy1)

	(push-scope)
	(entry 'canvas :fpoly {this, x, y, mode, polygons})

	;fill edges, find min and max xy, clip edges not visible or redundant
	(assign {1} {yscale})
	(vpif {this->canvas_flags})
		(assign {8} {yscale})
	(endif)
	(call 'canvas :set_edges {this, polygons, x, y, yscale} {_, xs, ys, xe, ye})

	;clip check
	(assign {yscale * this->canvas_cy, yscale * this->canvas_cy1} {cy, cy1})
	(vpif {xs < this->canvas_cx1 && xe > this->canvas_cx && ys < cy1 && ye > cy})
		;setup active edge list, edge starts and coverage
		(assign {0} {tracker_list})
		(vpifnot {this->canvas_edges_start})
			(call 'sys_mem :calloc {this->canvas_height * 8 * ptr_size} {this->canvas_edges_start, _})
		(endif)
		(vpif {this->canvas_flags})
			(assign {+max_int+, +min_int+} {min_x, max_x})
			(vpifnot {this->canvas_coverage})
				(call 'sys_mem :calloc {this->canvas_width} {this->canvas_coverage, _})
			(endif)
		(endif)

		;edge pointers into edge starts
		(call 'array :get_both {this->canvas_edges} {_, tracker_node, tracker_last})
		(vp-def (edges_start edge_node edge_last edge_tmp edge_list_head))
		(assign {this->canvas_edges_start, tracker_node, tracker_last}
			(list edges_start edge_node edge_last))
		(loop-start)
			(vp-cpy-ir-i edge_node edge_ys edge_list_head)
			(vp-mul-cr ptr_size edge_list_head)
			(vp-add-rr edges_start edge_list_head)
			(ln-add-fnode edge_list_head 0 edge_node edge_tmp)
			(vp-add-cr edge_size edge_node)
		(loop-until `(,edge_node = ,edge_last))

		;for each scanline
		(loop-while {ys < ye})
			;include new edges that begin on this scanline
			(vp-def (tracker_list_head starts_node starts_last starts_new starts_tmp ys y))
			(assign {&(this->canvas_edges_start)[ys * ptr_size], &tracker_list, ys}
				(list starts_node tracker_list_head ys))
			(loop-start)
				(ln-next-fnode starts_node starts_last)
				(vp-cpy-ir-i starts_node edge_ys y)
				(continueif `(,y /= ,ys))
				(vp-cpy-rr starts_node starts_new)
				(ln-remove-fnode starts_node starts_last)
				(ln-add-fnode tracker_list_head 0 starts_new starts_tmp)
			(loop-end)

			;sort active edges on x
			(vpif {!this->canvas_flags || mode})
				(assign {0} {sorted_list})
				(vp-def (sorted_list_head tracker_node tracker_last tracker_new
					sorted_node sorted_last x1 x2))
				(assign {&sorted_list, &tracker_list} (list sorted_list_head tracker_node))
				(loop-start)
					(ln-next-fnode tracker_node tracker_last)
					(vp-cpy-rr tracker_node tracker_new)
					(ln-remove-fnode tracker_node tracker_last)
					(vp-cpy-ir-i tracker_new edge_x x1)
					(loop-flist sorted_list_head 0 sorted_node sorted_last)
						(vp-cpy-ir-i sorted_node edge_x x2)
					(loop-until `(,x1 <= ,x2))
					(ln-add-fnode sorted_last 0 tracker_new tracker_last)
				(loop-end)
				(assign {sorted_list} {tracker_list})
			(endif)

			;antialiased ?
			(vpif {this->canvas_flags})
				;draw edges into coverage mask
				(vp-def (tracker_node mask xo cx cx1 x xp xb xm min_x max_x w v))
				(assign {&tracker_list, this->canvas_coverage, int($sample_offsets + ((ys & 7) << 2)),
					1 << (ys & 7), this->canvas_cx << +fp_shift+, (this->canvas_cx1 - 1) << +fp_shift+, min_x, max_x, mode}
					(list tracker_node mask xo xm cx cx1 min_x max_x v))
				(vpif `(,v = 0))
					;odd even
					(loop-start)
						(ln-next-fnode tracker_node tracker_node)
						(vp-cpy-ir-i tracker_node edge_x x)
						(vp-add-rr xo x)
						(vpif `(,x < ,cx))
							(vp-cpy-rr cx x)
						(elseif `(,x > ,cx1))
							(vp-cpy-rr cx1 x)
						(endif)
						(vp-asr-cr +fp_shift+ x)
						(vp-cpy-dr-ub mask x xb)
						(vpif `(,x < ,min_x))
							(vp-cpy-rr x min_x)
						(endif)
						(vpif `(,x > ,max_x))
							(vp-cpy-rr x max_x)
						(endif)
						(vp-xor-rr xm xb)
						(vp-cpy-rd-b xb mask x)
					(loop-end)
				(else)
					;non zero
					(loop-start)
						(ln-next-fnode tracker_node tracker_node)
						(vp-cpy-ir-i tracker_node edge_x x)
						(vp-cpy-ir-i tracker_node edge_w w)
						(vp-add-rr xo x)
						(vpif `(,x < ,cx))
							(vp-cpy-rr cx x)
						(elseif `(,x > ,cx1))
							(vp-cpy-rr cx1 x)
						(endif)
						(vp-asr-cr +fp_shift+ x)
						(vp-cpy-dr-ub mask x xb)
						(vpif `(,x < ,min_x))
							(vp-cpy-rr x min_x)
						(endif)
						(vp-xor-rr xm xb)
						(vp-cpy-rd-b xb mask x)
						(loop-start)
							(vp-cpy-ir tracker_node ln_fnode_next tracker_node)
							(vp-cpy-ir-i tracker_node edge_w v)
							(vp-add-rr v w)
						(loop-until `(,w = 0))
						(vp-cpy-ir-i tracker_node edge_x x)
						(vp-add-rr xo x)
						(vpif `(,x < ,cx))
							(vp-cpy-rr cx x)
						(elseif `(,x > ,cx1))
							(vp-cpy-rr cx1 x)
						(endif)
						(vp-asr-cr +fp_shift+ x)
						(vp-cpy-dr-ub mask x xb)
						(vpif `(,x > ,max_x))
							(vp-cpy-rr x max_x)
						(endif)
						(vp-xor-rr xm xb)
						(vp-cpy-rd-b xb mask x)
					(loop-end)
				(endif)
				(assign (list min_x max_x) {min_x, max_x})

				;flush coverage mask to scan line
				(gotoif {((ys & 7) = 7) || ((ys + 1) = ye)} 'flush_mask)
				(breakif {ys + 1 < cy1})
			(vp-label 'flush_mask)
				(vp-def (this c x y x1 mask m om max_x mask_to_coverage v)
					(method-input 'canvas :span))
				(assign {this, min_x, max_x, ys >> 3} (list this x max_x y))
				(breakif `(,x > ,max_x))
				(vp-add-cr 1 max_x)
				(vp-xor-rr om om)
				(assign (list max_x y om) {max_x, y, om})
				(loop-start)
					(assign {$mask_to_coverage} (list mask_to_coverage))
					(vp-cpy-ir this canvas_coverage mask)
					(vp-cpy-rr x x1)
					(vp-cpy-rr om m)
					(loop-start)
						(vp-cpy-dr-ub mask x1 c)
						(vp-add-cr 1 x1)
						(vp-xor-rr c m)
						(breakif `(,x1 >= ,max_x))
					(loop-until `(,m /= ,om))
					(vp-lea-i x1 -1 v)
					(vp-xor-rr c c)
					(vp-cpy-rd-b c mask v)
					(vp-cpy-dr-ub mask_to_coverage om c)
					(assign (list m x1) {om, x})
					(call 'canvas :span_noclip (list this c x y x1) (list this))
					(assign {x, max_x, y, om} (list x max_x y om))
				(loop-until `(,x >= ,max_x))
				(assign {+max_int+, +min_int+} {min_x, max_x})
			(else)
				;draw spans for mode
				(vp-def (this c x1 ys x2 w v tracker_node) (method-input 'canvas :span))
				(assign {mode, this, &tracker_list} (list v this tracker_node))
				(vpif `(,v = 0))
					;odd even
					(loop-start)
						(ln-next-fnode tracker_node tracker_node)
						(assign {ys} (list ys))
						(vp-cpy-ir-i tracker_node edge_x x1)
						(vp-cpy-ir tracker_node ln_fnode_next tracker_node)
						(vp-cpy-ir-i tracker_node edge_x x2)
						(vp-asr-cr +fp_shift+ x1)
						(vp-asr-cr +fp_shift+ x2)
						(assign (list tracker_node) {tracker_node})
						(call 'canvas :span (list this 0x80 x1 ys x2) (list this))
						(assign {tracker_node} (list tracker_node))
					(loop-end)
				(else)
					;non zero
					(loop-start)
						(ln-next-fnode tracker_node tracker_node)
						(assign {ys} (list ys))
						(vp-cpy-ir-i tracker_node edge_x x1)
						(vp-cpy-ir-i tracker_node edge_w w)
						(loop-start)
							(vp-cpy-ir tracker_node ln_fnode_next tracker_node)
							(vp-cpy-ir-i tracker_node edge_w v)
							(vp-add-rr v w)
						(loop-until `(,w = 0))
						(vp-cpy-ir-i tracker_node edge_x x2)
						(vp-asr-cr +fp_shift+ x1)
						(vp-asr-cr +fp_shift+ x2)
						(assign (list tracker_node) {tracker_node})
						(call 'canvas :span (list this 0x80 x1 ys x2) (list this))
						(assign {tracker_node} (list tracker_node))
					(loop-end)
				(endif)
			(endif)

			;next sub scanline
			(breakif {(ys + 1 => ys) >= cy1})

			;step the edges and remove any dead ones
			(vp-def (tracker_node tracker_last ys x dda))
			(assign {&tracker_list, ys} (list tracker_node ys))
			(loop-start)
			(vp-label 'start)
				(ln-next-fnode tracker_node tracker_last)
				(vp-cpy-ir-i tracker_node edge_ye x)
				(vpif `(,x /= ,ys))
					(vp-cpy-ir-i tracker_node edge_x x)
					(vp-cpy-ir-i tracker_node edge_dda dda)
					(vp-add-rr dda x)
					(vp-cpy-ri-i x tracker_node edge_x)
					(goto 'start)
				(endif)
				(ln-remove-fnode tracker_node tracker_last)
			(loop-end)
		(loop-end)
	(endif)

	(exit 'canvas :fpoly {this})
	(pop-scope)
	(return)

(vp-label 'sample_offsets)
	(apply vp-int (map (lambda (o)
		(- o 0.5)) '(0.25 0.875 0.5 0.125 0.75 0.375 0.0 0.625)))

(vp-label 'mask_to_coverage)
	(apply vp-byte (map (lambda (m)
		(/ (* 0x80 (apply + (map (lambda (s)
			(logand 1 (>> m s))) (const (push (list quote) (range 0 8)))))) 8)) (range 0 256)))

(def-func-end)
