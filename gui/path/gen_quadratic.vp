(include "sys/func.inc")
(include "gui/path/class.inc")
(include "sys/math/class.inc")

(def-method 'path :gen_quadratic)
	;inputs
	;r0 = path object (ptr)
	;r1 = stack array object (ptr)
	;r2 = p1x (fixed)
	;r3 = p1y (fixed)
	;r4 = p2x (fixed)
	;r5 = p2y (fixed)
	;r6 = p3x (fixed)
	;r7 = p3y (fixed)
	;r8 = tolerance (fixed)
	;outputs
	;r0 = path object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'stack)
	(pulong 'iter_end)
	(union
		(ulong 'p1 'p2 'p3 'p12 'p23 'p123)
		(int 'p1x 'p1y 'p2x 'p2y 'p3x 'p3y
			'p12x 'p12y 'p23x 'p23y 'p123x 'p123y))
	(uint 'start 'length)
	(int 'eps)

	(push-scope)
	(entry 'path :gen_quadratic {this, stack, p1x, p1y, p2x, p2y, p3x, p3y, eps})

	;output first point
	(vec-set 0)
	(call 'path :push_back2 {this, p1x, p1y})

	(d-call 'array :get_length {stack} {_, start})
	(loop-start)
		;calculate the mid-path
		(vec-load 4 {p1x, p1y, p2x, p2y})
		(vec-dup 2)
		(vec-load 2 {p3x, p3y})
		(vec-add 4)
		(vec-asr 4 1)
		(vec-tee 4 {p12x, p12y, p23x, p23y})
		(vec-add 2)
		(vec-asr 2 1)
		(vec-store 2 {p123x, p123y})

		;flatness test
		(vec-load 1 {p1x} {p3x})
		(vec-add 1)
		(vec-load 1 {p2x})
		(vec-dup 1)
		(vec-dif 3)
		(vec-load 1 {p1y} {p3y})
		(vec-add 1)
		(vec-load 1 {p2y})
		(vec-dup 1)
		(vec-dif 3)
		(vec-abs 2)
		(vec-sum 2)

		(vec-load 1 {eps})
		(bind '(d e) (vec-pop 2))
		(vpif `(,d <= ,e))
			;output point
			(call 'path :push_back2 {this, p123x, p123y})
		(else)
			;continue subdivision
			(d-call 'array :get_length {stack} {_, length})
			(call 'array :set_capacity {stack, length + 6})
			(call 'array :get_end {stack} {_, iter_end})
			(call 'array :set_length {stack, length + 6})
			(vec-load 7 {p123, p23, p3, p1, p12, p123, iter_end})
			(vec-store-long 6 (elem 0 (vec-pop 1)))
		(endif)

		(d-call 'array :get_length {stack} {_, length})
		(breakif {length = start})
		(call 'array :set_length {stack, length - 3})
		(call 'array :get_end {stack} {_, iter_end})
		(vec-load 1 {iter_end})
		(vec-load-long 3 (elem 0 (vec-top 1)))
		(vec-store 3 {p1, p2, p3})
		(vec-pop 1)
	(loop-end)

	;output last point
	(call 'path :push_back2 {this, p3x, p3y})

	(exit 'path :gen_quadratic {this})
	(pop-scope)
	(return)

(def-func-end)
