(include "sys/func.inc")
(include "gui/path/class.inc")
(include "class/fixed/class.inc")
(include "class/lisp/class.inc")

(def-method 'path :lisp_transform)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'path :lisp_transform '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 8) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'path :transform))
	(list-bind-args r1 (array-map-args in '(7 6 0 1 2 3 4 5))
		'(fixed fixed fixed fixed fixed fixed path path))
	(call 'path :transform in '(r0))
	(call 'obj :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'path :lisp_transform '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(path-transform m1x m1y m2x m2y trx try src dst)" error_msg_wrong_types r1))
	(signature '(fixed fixed fixed fixed fixed fixed path path)))

(def-func-end)

(def-method 'path :lisp_simplify)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'path :lisp_simplify '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 3) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'path :simplify))
	(list-bind-args r1 (array-map-args in '(3 2 1 0)) '(fixed _ path path))
	(assign '((rsp 0)) `(,(elem 2 in)))
	(assign `((,(elem 2 in) lisp_stack)) `(,(elem 2 in)))
	(call 'path :simplify in '(r0))
	(call 'obj :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'path :lisp_simplify '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(path-simplify tol src dst)" error_msg_wrong_types r1))
	(signature '(fixed path path)))

(def-func-end)

(def-method 'path :lisp_filter)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'path :lisp_filter '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 3) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'path :filter_polyline))
	(list-bind-args r1 (array-map-args in '(2 1 0)) '(fixed path path))
	(call 'path :filter_polyline in '(r0))
	(call 'obj :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'path :lisp_filter '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(path-filter tol src dst)" error_msg_wrong_types r1))
	(signature '(fixed path path)))

(def-func-end)

(def-method 'path :lisp_gen_quadratic)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'path :lisp_gen_quadratic '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 8) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'path :gen_quadratic))
	(list-bind-args r1 (array-map-args in '(8 7 0 1 2 3 4 5 6))
		'(fixed fixed fixed fixed fixed fixed fixed _ path))
	(assign '((rsp 0)) `(,(elem 1 in)))
	(assign `((,(elem 1 in) lisp_stack)) `(,(elem 1 in)))
	(call 'path :gen_quadratic in '(r0))
	(call 'obj :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'path :lisp_gen_quadratic '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(path-gen-quadratic p1x p1y p2x p2y p3x p3y tol dst) -> dst" error_msg_wrong_types r1))
	(signature '(fixed fixed fixed fixed fixed fixed fixed path)))

(def-func-end)

(def-method 'path :lisp_gen_cubic)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'path :lisp_gen_cubic '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 10) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'path :gen_cubic))
	(list-bind-args r1 (array-map-args in '(10 9 0 1 2 3 4 5 6 7 8))
		'(fixed fixed fixed fixed fixed fixed fixed fixed fixed _ path))
	(assign '((rsp 0)) `(,(elem 1 in)))
	(assign `((,(elem 1 in) lisp_stack)) `(,(elem 1 in)))
	(call 'path :gen_cubic in '(r0))
	(call 'obj :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'path :lisp_gen_cubic '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(path-gen-cubic p1x p1y p2x p2y p3x p3y p4x p4y tol dst) -> dst" error_msg_wrong_types r1))
	(signature '(fixed fixed fixed fixed fixed fixed fixed fixed fixed path)))

(def-func-end)

(def-method 'path :lisp_gen_arc)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'path :lisp_gen_arc '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 7) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'path :gen_arc))
	(list-bind-args r1 (array-map-args in '(7 6 0 1 2 3 4 5))
		'(fixed fixed fixed fixed fixed fixed _ path))
	(assign '((rsp 0)) `(,(elem 1 in)))
	(assign `((,(elem 1 in) lisp_stack)) `(,(elem 1 in)))
	(call 'path :gen_arc in '(r0))
	(call 'obj :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'path :lisp_gen_arc '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(path-gen-arc cx cy start end radius tol dst) -> dst" error_msg_wrong_types r1))
	(signature '(fixed fixed fixed fixed fixed fixed path)))

(def-func-end)

(def-method 'path :lisp_stroke_polylines)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'path :lisp_stroke_polylines '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 7) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'path :stroke_polylines))
	(list-bind-args r1 (array-map-args in '(0 7 6 1 2 3 4 5))
		'(list fixed fixed num num num list _))
	(assign '((rsp 0)) `(,(elem 1 in)))
	(assign `((,(elem 1 in) lisp_stack)) `(,(elem 1 in)))
	(call 'path :stroke_polylines in '(r0))
	(call 'obj :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'path :lisp_stroke_polylines '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(path-stroke-polylines dst radius tol join cap1 cap2 src) -> dst" error_msg_wrong_types r1))
	(signature '(list fixed fixed num num num list)))

(def-func-end)

(def-method 'path :lisp_stroke_polygons)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'path :lisp_stroke_polygons '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 5) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'path :stroke_polygons))
	(list-bind-args r1 (array-map-args in '(0 5 4 1 2 3))
		'(list fixed fixed num list _))
	(assign '((rsp 0)) `(,(elem 1 in)))
	(assign `((,(elem 1 in) lisp_stack)) `(,(elem 1 in)))
	(call 'path :stroke_polygons in '(r0))
	(call 'obj :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'path :lisp_stroke_polygons '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(path-stroke-polygons dst radius tol join src) -> dst" error_msg_wrong_types r1))
	(signature '(list fixed fixed num list)))

(def-func-end)
