(include "sys/func.inc")
(include "gui/path/class.inc")
(include "class/list/class.inc")
(include "sys/math/class.inc")

(def-method 'path :stroke_joints)
	;inputs
	;r0 = path object (ptr)
	;r1 = stack array object (ptr)
	;r2 = in path start iter (plong)
	;r3 = in path end iter (plong)
	;r4 = p1x (fixed)
	;r5 = p1y (fixed)
	;r6 = p2x (fixed)
	;r7 = p2y (fixed)
	;r8 = radius (fixed)
	;r9 = tolerance (fixed)
	;r10 = join style (byte)
	;outputs
	;r0 = path object (ptr)
	;trashes
	;r1-r14

	(union
		(ulong 'p1 'p2 'p3 'l2_v 'l2_pv 'l2_npv 'l2_rv 'l1_v 'l1_npv 'l1_rv)
		(int 'p1x 'p1y 'p2x 'p2y 'p3x 'p3y
			'l2_vx 'l2_vy 'l2_pvx 'l2_pvy 'l2_npvx 'l2_npvy 'l2_rvx 'l2_rvy
			'l1_vx 'l1_vy 'l1_npvx 'l1_npvy 'l1_rvx 'l1_rvy))
	(plong 'iter_i 'iter_j)
	(ptr 'this 'stack)
	(int 'radius 'eps 'step 'c 'c1)
	(byte 'join_style)

	(push-scope)
	(used-syms 'l2_pv 'l1_vx 'l1_vy 'p3)
	(entry 'path :stroke_joints {this, stack, iter_i, iter_j, p1x, p1y, p2x, p2y, radius, eps, join_style})

	(vpif {iter_i /= iter_j})
		(vpif {iter_j > iter_i})
			(assign {2 * long_size} {step})
		(else)
			(assign {-2 * long_size} {step})
		(endif)

		(vec-set 0)
		(vec-load 2 {p2x, p2y} {p1x, p1y})
		(vec-sub 2)
		(vec-tee 2 {l2_vx, l2_vy})
		(vec-perp)
		(vec-tee 2 {l2_pvx, l2_pvy})
		(vec-fnorm 2)
		(vec-tee 2 {l2_npvx, l2_npvy})
		(vec-load 1 {radius})
		(vec-fscale 2)
		(vec-store 2 {l2_rvx, l2_rvy})

		(loop-start)
			(vec-load 4 {p2, l2_v, l2_npv, l2_rv})
			(vec-store 4 {p1, l1_v, l1_npv, l1_rv})
			(assign {iter_i[0]} {p2x})
			(assign {iter_i[long_size]} {p2y})
			(assign {iter_i + step} {iter_i})
			(vec-load 2 {p2x, p2y} {p1x, p1y})
			(vec-sub 2)
			(vec-tee 2 {l2_vx, l2_vy})
			(vec-perp)
			(vec-tee 2 {l2_pvx, l2_pvy})
			(vec-fnorm 2)
			(vec-tee 2 {l2_npvx, l2_npvy})
			(vec-load 1 {radius})
			(vec-fscale 2)
			(vec-store 2 {l2_rvx, l2_rvy})

			;what kind of join
			(vec-load 2 {l1_npvx, l1_npvy} {l2_npvx, l2_npvy})
			(vec-dup 4)
			(vec-perp)
			(vec-fdot 2)
			(vec-store 1 {c})
			(vec-fdot 2)
			(vec-store 1 {c1})

			(switch)
			(vpcase {(c < 0.01) && (c > -0.01) || (c1 < -0.9)})
				;acuracy limit
				(goto 'do_bevel)
			(vpcase {c <= 0 || join_style = join_miter})
				;mitre join
				(vec-load 2 {p1x, p1y})
				(vec-dup 2)
				(vec-load 4 {l1_rvx, l1_rvy, l2_rvx, l2_rvy})
				(vec-add 4)
				(vec-store 4 {p3x, p3y, p1x, p1y})
				(call 'sys_math :f_intersect {p3x, p3y, p1x, p1y, l1_vx, l1_vy, l2_vx, l2_vy} {p1x, p1y})
				(goto 'out_p1)
			(vpcase {join_style = join_bevel})
			(vp-label 'do_bevel)
				;bevel join
				(vec-load 2 {p1x, p1y})
				(vec-dup 2)
				(vec-load 4 {l1_rvx, l1_rvy, l2_rvx, l2_rvy})
				(vec-add 4)
				(vec-store 4 {p3x, p3y, p1x, p1y})
				(call 'path :push_back2 {this, p3x, p3y})
			(vp-label 'out_p1)
				(call 'path :push_back2 {this, p1x, p1y})
			(else)
				;rounded join
				(call 'path :gen_clerp {this, stack, p1x, p1y, l1_rvx, l1_rvy, l2_rvx, l2_rvy, radius, eps})
			(endswitch)
		(loop-until {iter_i = iter_j})
	(endif)

	(exit 'path :stroke_joints {this})
	(pop-scope)
	(return)

(def-func-end)
