(include "sys/func.inc")
(include "gui/path/class.inc")
(include "sys/math/class.inc")

(def-method 'path :filter_polygon)
	;inputs
	;r0 = path object (ptr)
	;r1 = source path object, can be same (ptr)
	;r2 = tolerance (fixed)
	;outputs
	;r0 = path object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'that)
	(pptr 'iter_begin 'iter_end)
	(int 'eps)

	(push-scope)
	(entry 'path :filter_polygon {this, that, eps})

	(call 'path :filter_polyline {this, that, eps})
	(call 'path :get_both {this} {_, iter_begin, iter_end})

	(vec-set 0)
	(vec-load 2 {iter_end, iter_begin})
	(vec-dup 2)
	(vec-dif 2)
	(vpif `(,(elem 0 (vec-pop 1)) > ,(* 2 long_size)))
		(vec-load 1 {eps})
		(vec-fsquare 1)
		(bind '(e i x) (vec-top 3))
		(vec-load-long 2 i)
		(vec-load-long 2 e (* -2 long_size))
		(vec-fdistance-squared 2)
		(vpif `(,(elem 0 (vec-pop 1)) < ,x))
			(call 'path :pop_back2 {this})
		(endif)
	(endif)

	(exit 'path :filter_polygon {this})
	(pop-scope)
	(return)

(def-func-end)
