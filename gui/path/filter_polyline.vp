(include "sys/func.inc")
(include "gui/path/class.inc")
(include "sys/math/class.inc")

(def-method 'path :filter_polyline)
	;inputs
	;r0 = path object (ptr)
	;r1 = source path object, can be same (ptr)
	;r2 = tolerance (fixed)
	;outputs
	;r0 = path object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'that)
	(plong 'iter_begin 'iter_end 'iter_this)
	(int 'eps)

	(push-scope)
	(entry 'path :filter_polyline {this, that, eps})

	(call 'path :get_both {that} {_, iter_begin, iter_end})
	(call 'path :get_begin {this} {_, iter_this})

	(vec-set 0)
	(vec-load 2 {iter_end, iter_begin})
	(vec-dup 2)
	(vec-dif 2)
	(vpif `(,(elem 0 (vec-pop 1)) > ,(* 2 long_size)))
		(vec-load 1 {eps})
		(vec-fsquare 1)
		(vec-load 1 {iter_this})
		(bind '(e i x j) (vec-top 4))
		(loop-start 'outer_loop)
			(vpif `(,i /= ,j))
				(vec-load-long 2 i)
				(vec-store-long 2 j)
			(endif)
			(loop-start)
				(vp-add-cr (* 2 long_size) i)
				(breakif `(,i = ,e) 'outer_loop)
				(vec-load-long 2 j)
				(vec-load-long 2 i)
				(vec-fdistance-squared 2)
			(loop-until `(,(elem 0 (vec-pop 1)) >= ,x))
			(vp-add-cr (* 2 long_size) j)
		(loop-end)
		(vec-store 1 {iter_end})
		(call 'path :set_length {this, (iter_end - iter_this >> 3) + 2})
	(endif)

	(exit 'path :filter_polyline {this})
	(pop-scope)
	(return)

(def-func-end)
