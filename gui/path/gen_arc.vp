(include "sys/func.inc")
(include "gui/path/class.inc")
(include "sys/math/class.inc")

(def-method 'path :gen_arc)
	;inputs
	;r0 = path object (ptr)
	;r1 = stack array object (ptr)
	;r2 = cx (fixed)
	;r3 = cy (fixed)
	;r4 = start angle (fixed)
	;r5 = end angle (fixed)
	;r6 = radius (fixed)
	;r7 = tolerance (fixed)
	;outputs
	;r0 = path object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'stack)
	(int 'v1x 'v1y 'v2x 'v2y 'cx 'cy 'radius 'eps)
	(union
		(int 'ca1 'ca2 'sa1 'sa2)
		(int 'a1 'a2 'ah))

	(push-scope)
	(entry 'path :gen_arc {this, stack, cx, cy, a1, a2, radius, eps})

	(vec-set 0)
	(vec-load 2 {a1, +fp_2pi+})
	(vec-fmod 1)
	(vec-store 1 {a1})
	(vpif {a2 > +fp_2pi+})
		(vec-load 2 {a2, +fp_2pi+})
		(vec-fmod 1)
		(vec-store 1 {a2})
	(endif)

	(vpif {a2 <= +fp_hpi+})
		(assign {a1 + a2} {a2})
		(call 'sys_math :f_sin {a1} {sa1})
		(call 'sys_math :f_cos {a1} {ca1})
		(call 'sys_math :f_sin {a2} {sa2})
		(call 'sys_math :f_cos {a2} {ca2})
		(vec-load 5 {sa1, ca1, sa2, ca2, radius})
		(vec-fscale 4)
		(vec-store 2 {v2x, v2y} {v1x, v1y})
		(call 'path :gen_clerp {this, stack, cx, cy, v1x, v1y, v2x, v2y, radius, eps})
	(else)
		(assign {a2 >>> 1} {ah})
		(assign {a2 - ah} {a2})
		(call 'path :gen_arc {this, stack, cx, cy, a1, ah, radius, eps})
		(call 'path :gen_arc {this, stack, cx, cy, a1 + ah, a2, radius, eps})
	(endif)

	(exit 'path :gen_arc {this})
	(pop-scope)
	(return)

(def-func-end)
