(import 'sys/func.inc)
(import 'sys/heap/class.inc)
(import 'sys/kernel/class.inc)
(import 'gui/sdl2.inc)
(import 'gui/label/class.inc)
(import 'class/string/class.inc)
(import 'gui/region/class.inc)
(import 'gui/ctx/class.inc)

(defcvar 'dual_buffers t)

(def-method 'gui 'statics)
	(times gui_statics_size (vp-byte 0))
(def-func-end)

(def-method 'gui 'init)
	;inputs
	;r0 = sdl function table (pptr)

	;init sdl function table
	(f-bind 'gui 'statics r4)
	(vp-cpy-ri r0 r4 gui_statics_sdl_funcs)

	;init region heap
	(jump 'sys_heap 'init '((& r4 gui_statics_rect_heap) rect_size (mul rect_size 32)))

(def-func-end)

(def-func 'gui/gui/gui 8192)
	;gui process

	(def-struct 'local)
		(ptr 'statics)
		(ptr 'key_view)
		(ptr 'mouse_view)
		(ulong 'mouse_mbox_id)
		(ulong 'key_mbox_id)
		(int 'mouse_x)
		(int 'mouse_y)
		(uint 'mouse_buttons)
		(ubyte 'quit)
	(def-struct-end)

	(struct 'locals 'local)

	;init vars
	(push-scope)
	(assign (cat {@} (f-path 'gui 'statics)) {locals.local_statics})
	(assign {0, 0, 0, 0, 0, 0} {locals.local_key_view, locals.local_mouse_view,
		locals.local_mouse_buttons, locals.local_mouse_x, locals.local_mouse_y, locals.local_quit})

	;kernel callback for first update
	;this will init SDL etc
	(call 'sys_task 'callback {&locals, $update_callback})

	;allocate background view for screen
	(call 'label 'create nil {locals.local_statics->gui_statics_screen})

	;size, color and opaque
	(call 'label 'change {locals.local_statics->gui_statics_screen, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT})
	(call 'label 'set_long_prop {locals.local_statics->gui_statics_screen, prop_color, argb_black})
	(call 'label 'dirty_all {locals.local_statics->gui_statics_screen})

	;for now fire up the test apps
	;this might be an gui auto run list eventually
	(call 'sys_task 'open_child {"apps/launcher/app.lisp", kn_call_open})
	(call 'sys_task 'open_child {"apps/clock/app.lisp", kn_call_open})

	;gui event loop
	(loop-start)
		;kernel callback for update
		(call 'sys_task 'callback {&locals, $update_callback})

		;frame rate of gui updates
		(call 'sys_task 'sleep {1000000/30})
	(loop-until {locals.local_quit})

	;deinit
	(call 'sys_task 'callback {&locals, $deinit_callback})
	(pop-scope)
	(return)

(vp-label 'update_callback)
	;inputs
	;r0 = user data

	(ptr 'user 'old_stack 'owner 'msg 'data 'view)
	(int 'flag 'key)
	(struct 'event 256)

	;align stack
	(vp-cpy-rr rsp r1)
	(push-scope)
	(vp-and-cr -16 rsp)
	(entry {user, old_stack})

	;create screen window ?
	(vpifnot {user->local_statics->gui_statics_window})
		;init sdl2
		(sdl-call 'sdl 'sdl_set_main_ready)
		(sdl-call 'sdl 'sdl_init {SDL_INIT_VIDEO | SDL_INIT_EVENTS})
		(sdl-call 'sdl 'ttf_init)

		;create window
		(sdl-call 'sdl 'sdl_create_window
			{$title, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_OPENGL}
			{user->local_statics->gui_statics_window})

		;create renderer
		(sdl-call 'sdl 'sdl_create_renderer
			{user->local_statics->gui_statics_window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC}
			{user->local_statics->gui_statics_renderer})

		;set blend mode
		(sdl-call 'sdl 'sdl_set_render_draw_blend_mode {user->local_statics->gui_statics_renderer, SDL_BLENDMODE_BLEND})
	(endif)

	;update screen
	(vpif {user->local_statics->gui_statics_screen && user->local_statics->gui_statics_dirty_flag})
		;update the screen and refresh
		(call 'gui 'update {user->local_statics->gui_statics_screen})
		(sdl-call 'sdl 'sdl_render_present {user->local_statics->gui_statics_renderer})
		(assign {0} {user->local_statics->gui_statics_dirty_flag})
	(endif)

	;any sdl events ?
	(loop-start)
		(sdl-call 'sdl 'sdl_poll_event {0} {flag})
		(breakifnot {flag})
		(sdl-call 'sdl 'sdl_poll_event {&event})
		(switch)
		(case {event.sdl_common_event_type == SDL_MOUSEMOTION})
			;update mouse state
			(assign {event.sdl_mouse_motion_event_x} {user->local_mouse_x})
			(assign {event.sdl_mouse_motion_event_y} {user->local_mouse_y})
			(assign {event.sdl_mouse_motion_event_state} {user->local_mouse_buttons})
			(breakifnot {user->local_mouse_view})

			;send event message
		(vp-label 'send_event)
			(assign {user->local_mouse_view} {view})
		(vp-label 'send_event1)
			(call 'sys_mail 'alloc {ev_msg_mouse_size} {msg, data})
			(assign {ev_type_mouse} {data->ev_msg_type})
			(assign {user->local_mouse_mbox_id} {msg->msg_dest.id_mbox})
			(call 'sys_kernel 'id nil {msg->msg_dest.id_cpu})
			(assign {view->component_id} {data->ev_msg_target_id})
			(assign {user->local_mouse_buttons} {data->ev_msg_mouse_buttons})
			(assign {user->local_mouse_x} {data->ev_msg_mouse_x})
			(assign {user->local_mouse_y} {data->ev_msg_mouse_y})
			(assign {user->local_mouse_x - view->view_ctx_x} {data->ev_msg_mouse_rx})
			(assign {user->local_mouse_y - view->view_ctx_y} {data->ev_msg_mouse_ry})
			(call 'sys_mail 'send {msg})
			(break)
		(case {event.sdl_common_event_type == SDL_MOUSEBUTTONDOWN})
			;update mouse state
			(assign {event.sdl_mouse_button_event_x} {user->local_mouse_x})
			(assign {event.sdl_mouse_button_event_y} {user->local_mouse_y})
			(assign {event.sdl_mouse_button_event_button | user->local_mouse_buttons} {user->local_mouse_buttons})

			;find view affinity
			(call 'view 'hit_tree {user->local_statics->gui_statics_screen,
				user->local_mouse_x, user->local_mouse_y} {_, user->local_mouse_view, _, _})
			(vpif {user->local_mouse_view == user->local_statics->gui_statics_screen})
				(assign {0} {user->local_mouse_view})
			(endif)
			(breakifnot {user->local_mouse_view})

			;lookup view owner mailbox
			(call 'view 'find_owner {user->local_mouse_view} {_, owner})
			(breakifnot {owner})
			(assign {owner->tk_node_mbox_id} {user->local_mouse_mbox_id})
			(goto 'send_event)
		(case {event.sdl_common_event_type == SDL_MOUSEBUTTONUP})
			;update mouse state
			(assign {event.sdl_mouse_button_event_x} {user->local_mouse_x})
			(assign {event.sdl_mouse_button_event_y} {user->local_mouse_y})
			(assign {event.sdl_mouse_button_event_button ^ user->local_mouse_buttons} {user->local_mouse_buttons})
			(breakifnot {user->local_mouse_view})
			(assign {user->local_mouse_view} {view})
			(assign {0} {user->local_mouse_view})
			(goto 'send_event1)
		(case {event.sdl_common_event_type == SDL_KEYDOWN})
			;find view for keys
			(call 'view 'hit_tree {user->local_statics->gui_statics_screen,
				user->local_mouse_x, user->local_mouse_y} {_, user->local_key_view, _, _})
			(breakifnot {user->local_key_view})

			;lookup view owner mailbox
			(call 'view 'find_owner {user->local_key_view} {_, owner})
			(breakifnot {owner})

			;save owner mailbox
			(assign {owner->tk_node_mbox_id} {user->local_key_mbox_id})

			;cook key based on mods (very crude for now)
			(call 'cook_key {event.sdl_keyboard_event_keysym.sdl_keysym_sym,
				event.sdl_keyboard_event_keysym.sdl_keysym_mod} {key})
			
			;send event message
			(call 'sys_mail 'alloc {ev_msg_key_size} {msg, data})
			(assign {ev_type_key} {data->ev_msg_type})
			(assign {user->local_key_mbox_id} {msg->msg_dest.id_mbox})
			(call 'sys_kernel 'id nil {msg->msg_dest.id_cpu})
			(assign {user->local_key_view->component_id} {data->ev_msg_target_id})
			(assign {event.sdl_keyboard_event_keysym.sdl_keysym_scancode} {data->ev_msg_key_keycode})
			(assign {key} {data->ev_msg_key_key})
			(call 'sys_mail 'send {msg})
			(break)
		(case {event.sdl_common_event_type == SDL_QUIT})
			;(assign {-1} {user->local_quit})
		(endswitch)
	(loop-end)

	(assign {old_stack} '(rsp))
	(pop-scope-syms)
	(return)

(vp-label 'cook_key)
	;inputs
	;r0 = key
	;r1 = mod
	;inputs
	;r0 = cooked key

	(uint 'key 'mod)
	(pubyte 'codes)

	(push-scope)
	(entry {key, mod})

	(vpif {mod & 0x2003})
		(assign {$shifted} {codes})
		(loop-while {*codes})
			(vpif {*codes == key})
				(assign {codes[1]} {key})
				(break)
			(endif)
			(assign {codes + 2} {codes})
		(loop-end)
	(endif)

	(exit {key})
	(pop-scope)
	(return)

(vp-label 'deinit_callback)
	;inputs
	;r0 = user data

	(ptr 'user 'old_stack)

	;align stack
	(vp-cpy-rr rsp r1)
	(push-scope)
	(vp-and-cr -16 rsp)
	(entry {user, old_stack})

	;free any screen
	(vpif {user->local_statics->gui_statics_screen})
		(call 'view 'deref {user->local_statics->gui_statics_screen})
		(assign {0} {user->local_statics->gui_statics_screen})
	(endif)

	;destroy any window
	(vpif {user->local_statics->gui_statics_window})
		(sdl-call 'sdl 'sdl_destroy_window {user->local_statics->gui_statics_window})
		(sdl-call 'sdl 'ttf_quit)
		(sdl-call 'sdl 'sdl_quit)
	(endif)

	;free old region and deinit region heap
	(call 'region 'free {user->local_statics->gui_statics_rect_heap, user->local_statics->gui_statics_old_region})
	(call 'sys_heap 'deinit {user->local_statics->gui_statics_rect_heap})

	(assign {old_stack} '(rsp))
	(pop-scope-syms)
	(return)

(vp-label 'title)
	(vp-string "ChrysaLisp GUI Window") (vp-byte 0)
(vp-label 'shifted)
	(vp-string "qQwWeErRtTyYuUiIoOpPaAsSdDfFgGhHjJkKlLzZxXcCvVbBnNmM")
	(vp-string "1!2@3#4$5%6^7&8*9(0)§±-_=+[{]};:\|,<.>/?`~'")
	(vp-byte char_double_quote 0)

(def-func-end)

(def-method 'gui 'add)
	;inputs
	;r0 = view object (ptr)
	;outputs
	;r0 = view object (ptr)
	;trashes
	;all but r0

	(vp-push r0)
	(f-bind 'gui 'statics r2)
	(call 'view 'add_front '((r2 gui_statics_screen) r0))
	(call 'sys_task 'tcb '() '(r1))
	(vp-pop r0)
	(vp-cpy-ri r1 r0 component_tcb)
	(call 'view 'dirty_all '(r0))
	(vp-ret)

(def-func-end)

(def-method 'gui 'update)
	;inputs
	;r0 = root view object (ptr)
	;trashes
	;all

	(def-struct 'local)
		(ptr 'root)
		(ptr 'ctx_flist)
		(ptr 'ctx_next)
		(struct 'ctx 'ctx)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(vp-cpy-ri r0 rsp local_root)

	;iterate through views back to front
	;setting abs cords
	(vp-xor-rr r7 r7)
	(vp-xor-rr r8 r8)
	(call 'view 'backward_tree '(r0 r0 ($ abs_down_callback) ($ abs_up_callback)))

	;iterate through views back to front
	;create visible region at root
	(call 'view 'backward_tree '(r0 r0 ($ null_func_down_callback) ($ visible_up_callback)))

(when dual_buffers
	;copy visable region to new region
	(vp-xor-rr r1 r1)
	(vp-push r0 r1)
	(vp-lea-i r0 view_dirty_region r1)
	(assign '((r0 view_w i) (r0 view_h i)) '(r9 r10))
	(f-bind 'gui 'statics r0)
	(vp-add-cr gui_statics_rect_heap r0)
	(call 'region 'copy_rect '(r0 r1 rsp 0 0 r9 r10))

	;paste old visible region into root
	(vp-cpy-ir rsp 8 r0)
	(vp-lea-i r0 view_dirty_region r2)
	(f-bind 'gui 'statics r1)
	(vp-lea-i r1 gui_statics_rect_heap r0)
	(vp-add-cr gui_statics_old_region r1)
	(call 'region 'paste_region '(r0 r1 r2 0 0) '(r0))

	;free old region and splice over new region
	(f-bind 'gui 'statics r4)
	(call 'region 'free '(r0 (& r4 gui_statics_old_region)))
	(vp-pop r0 r1)
	(vp-cpy-ri r1 r4 gui_statics_old_region)
)

	;iterate through views front to back
	;distribute visible region
	(vp-xor-rr r1 r1)
	(vp-cpy-ri r1 rsp local_ctx_flist)
	(call 'view 'forward_tree '(r0 rsp ($ distribute_down_callback) ($ distribute_up_callback)))

	;draw all on draw list, and free dirty regions
	(f-bind 'gui 'statics r1)
	(vp-cpy-ir r1 gui_statics_renderer r1)
	(vp-cpy-ri r1 rsp (add local_ctx ctx_sdl_ctx))
	(loop-flist rsp local_ctx_flist r0 r0)
		(vp-cpy-ri r0 rsp local_ctx_next)
		(vp-sub-cr view_ctx_node r0)
		(assign '((r0 view_ctx_x i) (r0 view_ctx_y i)) '(r7 r8))
		(vp-lea-i rsp local_ctx r1)
		(vp-lea-i r0 view_dirty_region r2)
		(assign '(r7 r8) '((r1 ctx_x i) (r1 ctx_y i)))
		(vp-cpy-ri r2 r1 ctx_dirty_region)
		(call 'view 'draw '(r0 r1))
		(vp-cpy-ir rsp local_ctx_next r1)
		(vp-sub-cr (sub view_ctx_node view_dirty_region) r1)
		(f-bind 'gui 'statics r0)
		(vp-add-cr gui_statics_rect_heap r0)
		(call 'region 'free '(r0 r1))
		(vp-cpy-ir rsp local_ctx_next r0)
	(loop-end)

	(vp-free local_size)
	(vp-ret)

(vp-label 'null_func_down_callback)
	(vp-cpy-rr r0 r1)
(vp-label 'null_func_up_callback)
	(vp-ret)

(vp-label 'abs_down_callback)
	(assign '((r0 view_x i) (r0 view_y i)) '(r9 r10))
	(vp-add-rr r9 r7)
	(vp-add-rr r10 r8)
	(assign '(r7 r8) '((r0 view_ctx_x i) (r0 view_ctx_y i)))
	(vp-ret)

(vp-label 'abs_up_callback)
	(assign '((r0 view_x i) (r0 view_y i)) '(r9 r10))
	(vp-sub-rr r9 r7)
	(vp-sub-rr r10 r8)
	(vp-ret)

(vp-label 'visible_up_callback)
	(def-struct 'vis)
		(ptr 'this)
		(ptr 'root)
		(ptr 'next)
		(ptr 'region)
	(def-struct-end)

	;save inputs
	(vp-alloc vis_size)
	(vp-cpy-ri r0 rsp vis_this)
	(vp-cpy-ri r1 rsp vis_root)

	;region heap
	(f-bind 'gui 'statics r0)
	(vp-add-cr gui_statics_rect_heap r0)

	;remove opaque region from ancestors if not root
	(vp-cpy-ir rsp vis_this r1)
	(vp-cpy-ir rsp vis_root r2)
	(vpif '(r1 != r2))
		;remove my opaque region from ancestors
		(vp-xor-rr r2 r2)
		(vp-cpy-ri r2 rsp vis_region)

		;first copy any opaque region
		(assign '((r1 view_x i) (r1 view_y i)) '(r7 r8))
		(vp-cpy-ir r1 hash_map_parent r2)
		(assign '((r2 view_w i) (r2 view_h i)) '(r9 r10))
		(vp-mul-cr -1 r7)
		(vp-mul-cr -1 r8)
		(vp-add-rr r7 r9)
		(vp-add-rr r8 r10)
		(vp-add-cr view_opaque_region r1)
		(vp-lea-i rsp vis_region r2)
		(call 'region 'copy_rect '(r0 r1 r2 r7 r8 r9 r10) '(r0))

		;remove from ancestors
		(vp-cpy-ir rsp vis_this r1)
		(loop-start)
			(vp-cpy-ir r1 hash_map_parent r2)
			(vp-cpy-ri r2 rsp vis_next)

			;exit if clipped away
			(vp-cpy-ir rsp vis_region r3)
			(breakif '(r3 == 0))

			;translate temp opaque region
			(assign '((r1 view_x i) (r1 view_y i)) '(r7 r8))
			(vp-lea-i rsp vis_region r1)
			(call 'region 'translate '(r1 r7 r8))

			;clip temp opaque region
			(vp-cpy-ir rsp vis_next r2)
			(vp-lea-i rsp vis_region r1)
			(call 'region 'clip_rect '(r0 r1 0 0 (r2 view_w i) (r2 view_h i)) '(r0))

			;remove temp opaque region
			(vp-lea-i rsp vis_region r1)
			(vp-cpy-ir rsp vis_next r2)
			(vp-add-cr view_dirty_region r2)
			(call 'region 'remove_region '(r0 r1 r2 0 0) '(r0))

			(vp-cpy-ir rsp vis_next r1)
			(vp-cpy-ir rsp vis_root r2)
		(loop-until '(r1 == r2))

		;free any temp region
		(vp-lea-i rsp vis_region r1)
		(call 'region 'free '(r0 r1) '(r0))
	(endif)

	;clip local dirty region with parent bounds if not root
	(vp-cpy-ir rsp vis_this r1)
	(vp-cpy-ir r1 hash_map_parent r2)
	(vp-cpy-ir rsp vis_root r3)
	(vpif '(r1 == r3))
		(vp-cpy-rr r1 r2)
	(endif)
	(assign '((r1 view_x i) (r1 view_y i) (r2 view_w i) (r2 view_h i)) '(r7 r8 r9 r10))
	(vp-mul-cr -1 r7)
	(vp-mul-cr -1 r8)
	(vp-add-rr r7 r9)
	(vp-add-rr r8 r10)
	(vp-add-cr view_dirty_region r1)
	(call 'region 'clip_rect '(r0 r1 r7 r8 r9 r10) '(r0))

	;paste local dirty region onto parent if not root
	(vp-cpy-ir rsp vis_this r1)
	(vp-cpy-ir rsp vis_root r3)
	(vpif '(r1 != r3))
		(assign '((r1 view_x i) (r1 view_y i)) '(r7 r8))
		(vp-cpy-ir r1 hash_map_parent r2)
		(vp-add-cr view_dirty_region r1)
		(vp-add-cr view_dirty_region r2)
		(call 'region 'paste_region '(r0 r1 r2 r7 r8) '(r0))

		;free local dirty region
		(vp-cpy-ir rsp vis_this r1)
		(vp-add-cr view_dirty_region r1)
		(call 'region 'free '(r0 r1))
	(endif)

	(vp-cpy-ir rsp vis_this r0)
	(vp-free vis_size)
	(vp-ret)

(vp-label 'distribute_down_callback)
	(def-struct 'dist)
		(ptr 'this)
		(ptr 'data)
		(ptr 'next)
	(def-struct-end)

	;save inputs
	(vp-alloc dist_size)
	(vp-cpy-ri r0 rsp dist_this)
	(vp-cpy-ri r1 rsp dist_data)

	;region heap
	(f-bind 'gui 'statics r0)
	(vp-add-cr gui_statics_rect_heap r0)

	;copy view from parent if not root
	(vp-cpy-ir rsp dist_this r2)
	(vp-cpy-ir r1 local_root r3)
	(vpif '(r2 != r3))
		;copy my area from parent
		(vp-cpy-ir r2 hash_map_parent r1)
		(assign '((r2 view_ctx_x i) (r2 view_ctx_y i) (r2 view_w i) (r2 view_h i)) '(r7 r8 r9 r10))
		(vp-add-rr r7 r9)
		(vp-add-rr r8 r10)
		(vp-add-cr view_dirty_region r1)
		(vp-add-cr view_dirty_region r2)
		(call 'region 'copy_rect '(r0 r1 r2 r7 r8 r9 r10) '(r0))

		;did we find any
		(vp-cpy-ir rsp dist_this r1)
		(vp-cpy-ir r1 view_dirty_region r1)
		(vpif '(r1 != 0))
			;remove my opaque region from ancestors
			(vp-cpy-ir rsp dist_this r2)
			(loop-start)
				(vp-cpy-ir r2 hash_map_parent r2)
				(vp-cpy-ri r2 rsp dist_next)

				(vp-cpy-ir rsp dist_this r1)
				(assign '((r1 view_ctx_x i) (r1 view_ctx_y i)) '(r7 r8))
				(vp-add-cr view_opaque_region r1)
				(vp-add-cr view_dirty_region r2)
				(call 'region 'remove_region '(r0 r1 r2 r7 r8) '(r0))

				(vp-cpy-ir rsp dist_next r2)
				(vp-cpy-ir rsp dist_data r1)
				(vp-cpy-ir r1 local_root r3)
			(loop-until '(r2 == r3))
		(endif)
	(endif)

	;r1 will be 0 or not depending on haveing any dirty region
	(vp-cpy-ir rsp dist_this r0)
	(vp-free dist_size)
	(vp-ret)

(vp-label 'distribute_up_callback)
	;add myself to draw list if not empty
	(vp-cpy-ir r0 view_dirty_region r2)
	(vpif '(r2 != 0))
		(vp-lea-i r0 view_ctx_node r2)
		(vp-add-cr local_ctx_flist r1)
		(ln-add-fnode r1 0 r2 r3)
	(endif)
	(vp-ret)

(def-func-end)
