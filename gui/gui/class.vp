(include "sys/func.inc")
(include "sys/heap/class.inc")
(include "sys/kernel/class.inc")
(include "sys/pii/class.inc")
(include "gui/gui/class.inc")
(include "class/sym/class.inc")
(include "class/list/class.inc")
(include "gui/region/class.inc")
(include "gui/backdrop/class.inc")
(include "gui/view/lisp.inc")

(def-method 'gui :statics)
	(times gui_statics_size (vp-byte 0))
(def-func-end)

(def-method 'gui :statics_init)

	;init region heap
	(f-bind 'gui :statics r4)
	(vp-xor-rr r0 r0)
	(assign '(r0 r0) '((r4 gui_statics_mouse_x) (r4 gui_statics_mouse_y)))
	(jump 'sys_heap :init '((& r4 gui_statics_rect_heap) rect_size 32))

(def-func-end)

(def-func 'gui/gui/gui 16)
	;gui process
	;inputs
	;r0 = lisp object pointer (ptr)
	;r1 = lisp args list (ptr)

	(def-struct 'local)
		(ptr 'statics 'this)
		(ulong 'mouse_id 'key_id)
		(uint 'mouse_buttons)
		(ubyte 'quit)
	(def-struct-end)

	;init vars
	(vp-alloc local_size)
	(f-bind 'gui :statics r2)
	(assign '(r0 r2) '((rsp local_this) (rsp local_statics)))
	(vp-xor-rr r3 r3)
	(assign '(r3 r3 r3 r3)
		'((rsp local_mouse_id) (rsp local_key_id) (rsp local_mouse_buttons) (rsp local_quit)))

	;save background view for screen
	(array-bind-args r1 '(r1))
	(assign '(r1) '((r2 gui_statics_screen)))

	;temp objects
	(call 'list :create nil '(r0))
	(assign '((rsp local_statics)) '(r1))
	(assign '(r0) '((r1 gui_statics_temps)))

	;gui event loop
	(call 'sys_task :set_priority '(2))
	(loop-start)
		;kernel callback for update
		(call 'sys_task :callback '(rsp ($ update_callback)))
		;frame rate of gui updates
		(call 'sys_task :sleep '((/ 1000000 60)))
		(assign '((rsp local_quit)) '(r0))
	(loop-until '(r0 /= 0))

	;deinit
	(call 'sys_task :callback '(rsp ($ deinit_callback)))
	(vp-free local_size)
	(vp-ret)

(vp-label 'update_callback)
	;inputs
	;r0 = user data

	(ptr 'user 'msg 'data 'view 'old_stack)
	(struct 'owner_id 'id)
	(int 'flag)
	(struct 'event 256)

	(vp-cpy-rr rsp r1)
	(push-scope)
	(vp-and-cr -16 rsp)
	(entry {user, old_stack})

	;create screen window ?
	(vpifnot {user->local_statics->gui_statics_window})
		;init sdl2
		(host-call 'host :sdl_set_main_ready)
		(host-call 'host :sdl_init {SDL_INIT_VIDEO | SDL_INIT_EVENTS})

		;create window
		(host-call 'host :sdl_create_window
			{$title, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
				user->local_statics->gui_statics_screen->view_w,
				user->local_statics->gui_statics_screen->view_h,
				SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE}
			{user->local_statics->gui_statics_window})

		;create renderer and back buffer
		(cond
			((> num_old_regions 0)
				(host-call 'host :sdl_create_renderer
					{user->local_statics->gui_statics_window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC}
					{user->local_statics->gui_statics_renderer}))
			(t
				(host-call 'host :sdl_create_renderer
					{user->local_statics->gui_statics_window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC | SDL_RENDERER_TARGETTEXTURE}
					{user->local_statics->gui_statics_renderer})
				(host-call 'host :sdl_create_texture
					{user->local_statics->gui_statics_renderer, SDL_PIXELFORMAT_RGB888, SDL_TEXTUREACCESS_TARGET,
					user->local_statics->gui_statics_screen->view_w,
					user->local_statics->gui_statics_screen->view_h}
					{user->local_statics->gui_statics_texture})))

		;set blend mode
		(host-call 'host :sdl_set_render_draw_blend_mode {user->local_statics->gui_statics_renderer, SDL_BLENDMODE_BLEND})
	(endif)

	;update screen
	(vpif {user->local_statics->gui_statics_dirty_flag})
		(cond
			((> num_old_regions 0)
				;no render to texture
				(call 'gui :update {user->local_statics->gui_statics_screen}))
			(t
				;render to back buffer texture
				(host-call 'host :sdl_set_render_target {user->local_statics->gui_statics_renderer, user->local_statics->gui_statics_texture})
				(call 'gui :update {user->local_statics->gui_statics_screen})
				(host-call 'host :sdl_set_render_target {user->local_statics->gui_statics_renderer, 0})
				(host-call 'host :sdl_render_copy {user->local_statics->gui_statics_renderer, user->local_statics->gui_statics_texture, 0, 0})))

		;swap, clear temps and dirty flag
		(host-call 'host :sdl_render_present {user->local_statics->gui_statics_renderer})
		(call 'list :clear {user->local_statics->gui_statics_temps})
		(assign {0} {user->local_statics->gui_statics_dirty_flag})
	(endif)

	;any sdl events ?
	(loop-start)
		(host-call 'host :sdl_poll_event {0} {flag})
		(breakifnot {flag})
		(host-call 'host :sdl_poll_event {&event})
		(switch)
		(vpcase {event.sdl_common_event_type = SDL_MOUSEMOTION})
			;update mouse state
			(assign {event.sdl_mouse_motion_event_state} {user->local_mouse_buttons})
			(assign {event.sdl_mouse_button_event_x} {user->local_statics->gui_statics_mouse_x})
			(assign {event.sdl_mouse_button_event_y} {user->local_statics->gui_statics_mouse_y})

			;send event message
		(vp-label 'send_event)
			(breakifnot {user->local_mouse_id})
			(call 'view :find_id {user->local_statics->gui_statics_screen, user->local_mouse_id} {_, view})
			(breakifnot {view})
			(call 'view :find_owner {view} {_, owner_id.id_id})
			(breakifnot {owner_id.id_id})
			(call 'sys_mail :alloc {ev_msg_mouse_size} {msg, data})
			(assign {ev_type_mouse} {data->ev_msg_type})
			(assign {view->component_id} {data->ev_msg_target_id})
			(assign {owner_id.id_id} {msg->msg_dest.id_id})
			(assign {user->local_mouse_buttons} {data->ev_msg_mouse_buttons})
			(assign {(event.sdl_mouse_button_event_x => data->ev_msg_mouse_x) - view->view_ctx_x} {data->ev_msg_mouse_rx})
			(assign {(event.sdl_mouse_button_event_y => data->ev_msg_mouse_y) - view->view_ctx_y} {data->ev_msg_mouse_ry})
			(call 'sys_mail :send {msg})
			(breakif {user->local_mouse_buttons})
			(assign {0} {user->local_mouse_id})
			(break)
		(vpcase {event.sdl_common_event_type = SDL_MOUSEBUTTONDOWN})
			;update mouse state
			(assign {event.sdl_mouse_button_event_button | user->local_mouse_buttons} {user->local_mouse_buttons})

			;find view affinity
			(call 'view :hit_tree {user->local_statics->gui_statics_screen,
				event.sdl_mouse_button_event_x, event.sdl_mouse_button_event_y} {_, view, _, _})
			(assign {view->component_id} {user->local_mouse_id})
			(goto 'send_event)
		(vpcase {event.sdl_common_event_type = SDL_MOUSEBUTTONUP})
			;update mouse state
			(assign {event.sdl_mouse_button_event_button ^ user->local_mouse_buttons} {user->local_mouse_buttons})
			(goto 'send_event)
		(vpcase {event.sdl_common_event_type = SDL_KEYDOWN})
			;find keyboard id
			(call 'view :hit_tree {user->local_statics->gui_statics_screen,
				user->local_statics->gui_statics_mouse_x, user->local_statics->gui_statics_mouse_y}
				{_, view, _, _})
			(assign {view->component_id} {user->local_key_id})

			;find view for keys
			(call 'view :find_id {user->local_statics->gui_statics_screen, user->local_key_id} {_, view})
			(breakifnot {view})
			(call 'view :find_owner {view} {_, owner_id.id_id})
			(breakifnot {owner_id.id_id})

			;send event message
			(call 'sys_mail :alloc {ev_msg_key_size} {msg, data})
			(assign {ev_type_key} {data->ev_msg_type})
			(assign {owner_id.id_id} {msg->msg_dest.id_id})
			(assign {view->component_id} {data->ev_msg_target_id})
			(assign {event.sdl_keyboard_event_keysym.sdl_keysym_scancode} {data->ev_msg_key_keycode})
			(call 'cook_key {event.sdl_keyboard_event_keysym.sdl_keysym_sym,
				event.sdl_keyboard_event_keysym.sdl_keysym_mod} {data->ev_msg_key_key})
			(call 'sys_mail :send {msg})
			(break)
		(vpcase {event.sdl_common_event_type = SDL_WINDOWEVENT})
			(switch)
			(vpcase {event.sdl_window_event_event = SDL_WINDOWEVENT_SIZE_CHANGED})
			(when (= num_old_regions 0)
				;resize back buffer and redraw in full
				(host-call 'host :sdl_destroy_texture {user->local_statics->gui_statics_texture})
				(host-call 'host :sdl_create_texture
					{user->local_statics->gui_statics_renderer, SDL_PIXELFORMAT_RGB888, SDL_TEXTUREACCESS_TARGET, event.sdl_window_event_data1, event.sdl_window_event_data2}
					{user->local_statics->gui_statics_texture}))

				;change backdrop size, send gui event to all top level views
				(call 'backdrop :set_bounds '{user->local_statics->gui_statics_screen, 0, 0, event.sdl_window_event_data1, event.sdl_window_event_data2})
				(call 'backdrop :forward {user->local_statics->gui_statics_screen, user, $send_gui_event})
				(call 'backdrop :set_flags '{user->local_statics->gui_statics_screen, +view_flag_dirty_all+, +view_flag_dirty_all+})
				(break)
			(vpcase {event.sdl_window_event_event = SDL_WINDOWEVENT_RESTORED})
				(call 'backdrop :set_flags '{user->local_statics->gui_statics_screen, +view_flag_dirty_all+, +view_flag_dirty_all+})
				(break)
			(endswitch)
		;;	(break)
		;; (vpcase {event.sdl_common_event_type = SDL_QUIT})
		;; 	(assign {-1} {user->local_quit})
		;; 	(break)
		(endswitch)
	(loop-end)

	(assign {old_stack} '(rsp))
	(pop-scope-syms)
	(return)

(vp-label 'deinit_callback)
	;inputs
	;r0 = user data

	(ptr 'user 'old_stack 'iter_begin 'iter_end)

	(vp-cpy-rr rsp r1)
	(push-scope)
	(vp-and-cr -16 rsp)
	(entry {user, old_stack})

	;free any screen
	(vpif {user->local_statics->gui_statics_screen})
		(call 'view :deref {user->local_statics->gui_statics_screen})
		(assign {0} {user->local_statics->gui_statics_screen})
	(endif)

	;destroy any window
	(vpif {user->local_statics->gui_statics_window})
		(host-call 'host :sdl_destroy_window {user->local_statics->gui_statics_window})
		(host-call 'host :sdl_quit)
	(endif)

	;free old regions and deinit region heap
	(assign {&user->local_statics->gui_statics_old_regions} {iter_begin})
	(assign {&iter_begin[num_old_regions * ptr_size]} {iter_end})
	(loop-while {iter_begin /= iter_end})
		(call 'region :free {user->local_statics->gui_statics_rect_heap, iter_begin})
		(assign {iter_begin + ptr_size} {iter_end})
	(loop-end)
	(call 'sys_heap :deinit {user->local_statics->gui_statics_rect_heap})

	(assign {old_stack} '(rsp))
	(pop-scope-syms)
	(return)

(vp-label 'send_gui_event)
	;send gui event
	(ptr 'this 'user 'msg 'data)
	(struct 'owner_id 'id)

	(push-scope)
	(entry {this, user})

	(call 'view :find_owner {this} {_, owner_id.id_id})
	(vpif {owner_id.id_id})
		(call 'sys_mail :alloc {ev_msg_gui_size} {msg, data})
		(assign {ev_type_gui} {data->ev_msg_type})
		(assign {owner_id.id_id} {msg->msg_dest.id_id})
		(assign {this->component_id} {data->ev_msg_target_id})
		(call 'sys_mail :send {msg})
	(endif)

	(exit {this})
	(pop-scope)
	(return)

(vp-label 'cook_key)
	;inputs
	;r0 = key
	;r1 = mod
	;outputs
	;r0 = cooked key
	;trashes
	;r0-r2

	(entry '(r0 r1))

	(vp-and-cr 0x2003 r1)
	(vpif '(r1 /= 0) 'exit)
		(assign '(($ shifted)) '(r2))
		(loop-start)
			(vp-cpy-ir-ub r2 0 r1)
			(breakif '(r1 = 0))
			(vpif '(r1 = r0))
				(vp-cpy-ir-ub r2 1 r0)
				(break 'exit)
			(endif)
			(vp-add-cr short_size r2)
		(loop-end)
	(endif)

	(exit '(r0))
	(vp-ret)

(vp-label 'title)
	(vp-string "ChrysaLisp GUI Window") (vp-byte 0)
(vp-label 'shifted)
	(vp-string "qQwWeErRtTyYuUiIoOpPaAsSdDfFgGhHjJkKlLzZxXcCvVbBnNmM")
	(vp-string "1!2@3#4$5%6^7&8*9(0)§±-_=+[{]};:\|,<.>/?`~'")
	(vp-byte 34 0)

(def-func-end)

(def-method 'gui :update)
	;inputs
	;r0 = root view object (ptr)
	;trashes
	;r0-r14

	(def-struct 'local)
		(ptr 'root 'ctx_flist 'ctx_next)
		(when (/= num_old_regions 0)
			(ptr 'damaged_region)
			(uint 'index))
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(entry 'gui :update '(r0))
	(assign '(r0) '((rsp local_root)))

	;iterate through views back to front
	;setting abs cords
	(vp-xor-rr r7 r7)
	(vp-xor-rr r8 r8)
	(call 'view :backward_tree '(r0 r0 ($ abs_down_callback) ($ abs_up_callback)))

	;iterate through views back to front
	;create visible region at root
	(call 'view :backward_tree '(r0 r0 ($ visible_down_callback) ($ visible_up_callback)))

	(when (/= num_old_regions 0)
		;copy new damaged region
		(vp-xor-rr r1 r1)
		(assign '(r1) '((rsp local_damaged_region)))
		(f-bind 'gui :statics r4)
		(call 'region :copy_rect '((& r4 gui_statics_rect_heap) (& r0 view_dirty_region)
			(& rsp local_damaged_region) 0 0 (r0 view_w) (r0 view_h)) '(r0))

		;paste old damaged region into root
		(f-bind 'gui :statics r4)
		(assign '((& r4 gui_statics_old_regions) (r4 gui_statics_old_region_index) (rsp local_root)) '(r1 r2 r3))
		(call 'region :paste_region '(r0 (& r1 r2) (& r3 view_dirty_region) 0 0) '(r0))

		;free old damaged region
		(f-bind 'gui :statics r4)
		(assign '((& r4 gui_statics_old_regions) (r4 gui_statics_old_region_index)) '(r1 r2))
		(call 'region :free '(r0 (& r1 r2)) '(r0))

		;paste new damaged region into all old damaged regions
		(assign '((r4 gui_statics_old_region_index)) '(r2))
		(loop-start)
			(vp-add-cr ptr_size r2)
			(vpif (list r2 '= (* num_old_regions ptr_size)))
				(vp-xor-rr r2 r2)
			(endif)
			(assign '((& r4 gui_statics_old_regions) (r4 gui_statics_old_region_index)) '(r1 r3))
			(breakif '(r2 = r3))
			(assign '(r2) '((rsp local_index)))
			(call 'region :paste_region '(r0 (& rsp local_damaged_region) (& r1 r2) 0 0) '(r0))
			(assign '((rsp local_index)) '(r2))
			(f-bind 'gui :statics r4)
		(loop-end)
		(assign '((rsp local_damaged_region)) '(r0))
		(assign '(r0) '((r1 r2)))

		;move on to next old region
		(vp-add-cr ptr_size r2)
		(vpif (list r2 '= (* num_old_regions ptr_size)))
			(vp-xor-rr r2 r2)
		(endif)
		(assign '((rsp local_root) r2) '(r0 (r4 gui_statics_old_region_index))))

	;iterate through views front to back
	;distribute visible region
	(vp-xor-rr r1 r1)
	(assign '(r1) '((rsp local_ctx_flist)))
	(call 'view :forward_tree '(r0 rsp ($ distribute_down_callback) ($ distribute_up_callback)))

	;draw all views on draw list, and free dirty regions
	(loop-flist rsp local_ctx_flist r0 r0)
		(assign '(r0) '((rsp local_ctx_next)))
		(vp-sub-cr view_ctx_node r0)
		(call 'view :draw '(r0))
		(assign '((rsp local_ctx_next)) '(r1))
		(vp-sub-cr (- view_ctx_node view_dirty_region) r1)
		(f-bind 'gui :statics r0)
		(vp-add-cr gui_statics_rect_heap r0)
		(call 'region :free '(r0 r1))
		(assign '((rsp local_ctx_next)) '(r0))
	(loop-end)

	(vp-free local_size)
	(vp-ret)

(vp-label 'abs_down_callback)
	(entry 'view :forward_tree_callback '(r0 r1))

	(assign '((r0 view_x) (r0 view_y)) '(r9 r10))
	(vp-add-rr r9 r7)
	(vp-add-rr r10 r8)
	(assign '(r7 r8) '((r0 view_ctx_x) (r0 view_ctx_y)))

	(exit 'view :forward_tree_callback '(r0 r1))
	(vp-ret)

(vp-label 'abs_up_callback)
	(entry 'view :forward_tree_callback '(r0 r1))

	(assign '((r0 view_x) (r0 view_y)) '(r9 r10))
	(vp-sub-rr r9 r7)
	(vp-sub-rr r10 r8)

	(exit 'view :forward_tree_callback '(r0 r1))
	(vp-ret)

(vp-label 'visible_down_callback)
	(def-struct 'vis)
		(ptr 'this 'root 'next 'region)
	(def-struct-end)

	;save inputs
	(vp-alloc vis_size)
	(entry 'view :forward_tree_callback '((rsp vis_this) (rsp vis_root)))

	;region heap
	(f-bind 'gui :statics r0)
	(vp-add-cr gui_statics_rect_heap r0)

	;remove opaque region from ancestors if not root
	(assign '((rsp vis_this) (rsp vis_root)) '(r1 r2))
	(vpif '(r1 /= r2))
		;remove my opaque region from ancestors
		(vp-xor-rr r2 r2)
		(assign '(r2 (r1 view_flags)) '((rsp vis_region) r3))
		(vp-and-cr +view_flag_opaque+ r3)
		(vpif '(r3 /= 0))
			;remove entire view from ancestors
			(assign '(0 0 (r1 view_w) (r1 view_h)) '(r7 r8 r9 r10))
			(loop-start)
				(assign '((r1 hmap_parent)) '(r2))
				(assign '(r2) '((rsp vis_next)))

				;translate region
				(assign '((r1 view_x) (r1 view_y) (r2 view_w) (r2 view_h)) '(r11 r12 r13 r14))
				(vp-add-rr r11 r7)
				(vp-add-rr r12 r8)
				(vp-add-rr r11 r9)
				(vp-add-rr r12 r10)

				;clip to parent, exit if clipped away
				(breakif '(r7 >= r13) '(r8 >= r14) '(r9 <= 0) '(r10 <= 0))
				(vpif '(r7 < 0))
					(assign '(0) '(r7))
				(endif)
				(vpif '(r8 < 0))
					(assign '(0) '(r8))
				(endif)
				(vpif '(r9 > r13))
					(assign '(r13) '(r9))
				(endif)
				(vpif '(r10 > r14))
					(assign '(r14) '(r10))
				(endif)

				;remove opaque region
				(call 'region :remove_rect '(r0 (& r2 view_dirty_region) r7 r8 r9 r10) '(r0))

				(assign '((rsp vis_next) (rsp vis_root)) '(r1 r2))
			(loop-until '(r1 = r2))
		(else)
			;use opaque region, so my opaque area is the visble region
			(assign '((r1 hmap_parent) (r1 view_x) (r1 view_y)) '(r2 r7 r8))
			(assign '((r2 view_w) (r2 view_h)) '(r9 r10))
			(vp-mul-cr -1 r7)
			(vp-mul-cr -1 r8)
			(vp-add-rr r7 r9)
			(vp-add-rr r8 r10)
			(vp-add-cr view_opaque_region r1)
			(vp-lea-i rsp vis_region r2)
			(call 'region :copy_rect '(r0 r1 r2 r7 r8 r9 r10) '(r0))

			;remove from ancestors
			(assign '((rsp vis_this)) '(r1))
			(loop-start)
				(assign '((r1 hmap_parent)) '(r2))
				(assign '(r2) '((rsp vis_next)))

				;exit if clipped away
				(assign '((rsp vis_region)) '(r3))
				(breakif '(r3 = 0))

				;translate temp opaque region
				(assign '((r1 view_x) (r1 view_y)) '(r7 r8))
				(vp-lea-i rsp vis_region r1)
				(call 'region :translate '(r1 r7 r8))

				;clip temp opaque region
				(assign '((rsp vis_next)) '(r2))
				(vp-lea-i rsp vis_region r1)
				(call 'region :clip_rect '(r0 r1 0 0 (r2 view_w) (r2 view_h)) '(r0))

				;remove temp opaque region
				(vp-lea-i rsp vis_region r1)
				(assign '((rsp vis_next)) '(r2))
				(vp-add-cr view_dirty_region r2)
				(call 'region :remove_region '(r0 r1 r2 0 0) '(r0))

				(assign '((rsp vis_next) (rsp vis_root)) '(r1 r2))
			(loop-until '(r1 = r2))

			;free any temp region
			(call 'region :free '(r0 (& rsp vis_region)) '(r0))
		(endif)
	(endif)

	(exit 'view :forward_tree_callback '((rsp vis_this) r0))
	(vp-free vis_size)
	(vp-ret)

(vp-label 'visible_up_callback)
	;save inputs
	(vp-alloc vis_size)
	(entry 'view :forward_tree_callback '((rsp vis_this) (rsp vis_root)))

	;region heap
	(f-bind 'gui :statics r0)
	(vp-add-cr gui_statics_rect_heap r0)

	;clip local dirty region with parent bounds
	(assign '((rsp vis_this) (rsp vis_root)) '(r1 r3))
	(assign '((r1 hmap_parent)) '(r2))
	(vpif '(r1 = r3))
		(vp-cpy-rr r1 r2)
	(endif)
	(assign '((r1 view_x) (r1 view_y) (r2 view_w) (r2 view_h)) '(r7 r8 r9 r10))
	(vp-mul-cr -1 r7)
	(vp-mul-cr -1 r8)
	(vp-add-rr r7 r9)
	(vp-add-rr r8 r10)
	(vp-add-cr view_dirty_region r1)
	(call 'region :clip_rect '(r0 r1 r7 r8 r9 r10) '(r0))

	;paste local dirty region onto parent if not root
	(assign '((rsp vis_this) (rsp vis_root)) '(r1 r3))
	(vpif '(r1 /= r3))
		(assign '((r1 view_x) (r1 view_y) (r1 hmap_parent)) '(r7 r8 r2))
		(vp-add-cr view_dirty_region r1)
		(vp-add-cr view_dirty_region r2)
		(call 'region :paste_region '(r0 r1 r2 r7 r8) '(r0))

		;free local dirty region
		(assign '((rsp vis_this)) '(r1))
		(vp-add-cr view_dirty_region r1)
		(call 'region :free '(r0 r1) '(r0))
	(endif)

	;if dirty all flag then paste entire view onto parent
	(assign '((rsp vis_this)) '(r2))
	(assign '((r2 view_flags)) '(r3))
	(vp-and-cr +view_flag_dirty_all+ r3)
	(vpif '(r3 /= 0))
		;clear dirty all flag
		(assign '((r2 view_flags)) '(r3))
		(vp-and-cr (lognot +view_flag_dirty_all+) r3)
		(assign '(r3 (r2 view_x) (r2 view_y) (r2 view_w) (r2 view_h)) '((r2 view_flags) r7 r8 r9 r10))
		(vp-add-rr r7 r9)
		(vp-add-rr r8 r10)
		(assign '((rsp vis_root) (r2 hmap_parent)) '(r3 r1))
		(vpif '(r2 = r3))
			(vp-cpy-rr r2 r1)
		(endif)
		(vp-add-cr view_dirty_region r1)
		(call 'region :paste_rect '(r0 r1 r7 r8 r9 r10))
	(endif)

	(exit 'view :forward_tree_callback '((rsp vis_this) r1))
	(vp-free vis_size)
	(vp-ret)

(vp-label 'distribute_down_callback)
	(def-struct 'dist)
		(ptr 'this 'data 'next)
	(def-struct-end)

	;save inputs
	(vp-alloc dist_size)
	(entry 'view :forward_tree_callback '((rsp dist_this) r1))
	(assign '(r1) '((rsp dist_data)))

	;region heap
	(f-bind 'gui :statics r0)
	(vp-add-cr gui_statics_rect_heap r0)

	;copy view from parent if not root
	(assign '((rsp dist_this) (r1 local_root)) '(r2 r3))
	(vpif '(r2 /= r3))
		;remove opaque region from ancestors
		(assign '((r2 hmap_parent) (r2 view_ctx_x) (r2 view_ctx_y)
			(r2 view_w) (r2 view_h)) '(r1 r7 r8 r9 r10))
		(vp-add-rr r7 r9)
		(vp-add-rr r8 r10)
		(vp-add-cr view_dirty_region r1)
		(vp-add-cr view_dirty_region r2)

		;copy my area from parent
		(call 'region :copy_rect '(r0 r1 r2 r7 r8 r9 r10) '(r0))

		;did we find any opaque region ?
		(assign '((rsp dist_this)) '(r2))
		(assign '((r2 view_dirty_region)) '(r1))
		(vpif '(r1 /= 0))
			;remove my opaque region from ancestors
			(assign '((r2 view_flags)) '(r3))
			(vp-and-cr +view_flag_opaque+ r3)
			(vpif '(r3 /= 0))
				;remove entire view from ancestors
				(loop-start)
					(assign '((r2 hmap_parent)) '(r1))
					(assign '(r1) '((rsp dist_next)))

					;clip to parent
					(assign '((r1 view_ctx_x) (r1 view_ctx_y) (r1 view_w) (r1 view_h)) '(r11 r12 r13 r14))
					(vp-add-rr r11 r13)
					(vp-add-rr r12 r14)
					(breakif '(r7 >= r13) '(r8 >= r14) '(r9 <= r11) '(r10 <= r12))
					(vpif '(r7 < r11))
						(assign '(r11) '(r7))
					(endif)
					(vpif '(r8 < r12))
						(assign '(r12) '(r8))
					(endif)
					(vpif '(r9 > r13))
						(assign '(r13) '(r9))
					(endif)
					(vpif '(r10 > r14))
						(assign '(r14) '(r10))
					(endif)

					(vp-add-cr view_dirty_region r1)
					(call 'region :remove_rect '(r0 r1 r7 r8 r9 r10) '(r0))

					(assign '((rsp dist_data) (rsp dist_next)) '(r1 r2))
					(assign '((r1 local_root)) '(r1))
				(loop-until '(r1 = r2))
			(else)
				;remove opaque region from ancestors
				(assign '(r2) '(r1))
				(loop-start)
					(assign '((r1 hmap_parent)) '(r2))
					(assign '(r2) '((rsp dist_next)))

					(assign '((rsp dist_this)) '(r1))
					(assign '((r1 view_ctx_x) (r1 view_ctx_y)) '(r7 r8))
					(vp-add-cr view_opaque_region r1)
					(vp-add-cr view_dirty_region r2)
					(call 'region :remove_region '(r0 r1 r2 r7 r8) '(r0))

					(assign '((rsp dist_data) (rsp dist_next)) '(r2 r1))
					(assign '((r2 local_root)) '(r2))
				(loop-until '(r1 = r2))
			(endif)

			;return flag for recursion or not
			(assign '((rsp dist_this)) '(r2))
			(assign '((r2 view_dirty_region)) '(r1))
		(endif)
	(endif)

	;r1 will be 0 or not depending on haveing any dirty region
	(exit 'view :forward_tree_callback '((rsp dist_this) r1))
	(vp-free dist_size)
	(vp-ret)

(vp-label 'distribute_up_callback)
	;add myself to draw list if not empty
	(entry 'view :forward_tree_callback '(r0 r1))

	(assign '((r0 view_dirty_region)) '(r2))
	(vpif '(r2 /= 0))
		(vp-lea-i r0 view_ctx_node r2)
		(vp-add-cr local_ctx_flist r1)
		(ln-add-fnode r1 0 r2 r3)
	(endif)

	(exit 'view :forward_tree_callback '(r0 r1))
	(vp-ret)

(def-func-end)
