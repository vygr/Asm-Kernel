(include "sys/func.inc")
(include "gui/pixmap/class.inc")
(include "class/str/class.inc")
(include "class/stream/class.inc")
(include "class/array/class.inc")
(include "lib/consts/colors.inc")

(def-struct 'tga)
	(ubyte 'imagedata)	;id field offset
	(ubyte 'colmap)		;color map
	(ubyte 'type)		;targa type
	(ubyte 'a 'b)		;nint16 colmap_fei	;color map origin (non aligned !)
	(ubyte 'c 'd)		;nint16 colmap_num	;color map number (non aligned !)
	(ubyte 'colmap_size)	;color map size
	(struct 'pad 4)		;padding ?
	(ushort 'width)
	(ushort 'height)
	(ubyte 'depth)
	(ubyte 'origin)
(def-struct-end)

(def-method 'pixmap :info_tga)
	;inputs
	;r5 = stream object (ptr)
	;outputs
	;r0 = -1 if error, else width (pixels)
	;r1 = -1 if error, else height (pixels)
	;r2 = -1 if error, else type (uint)
	;trashes
	;r0-r14

	(def-struct 'local)
		(struct 'header 'tga)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'pixmap :info_tga '(r0))

	;read header
	(call 'stream :read '(r0 rsp tga_size) '(_ r1))
	(switch)
	(breakif '(r1 /= tga_size))
	(assign '((rsp tga_depth) (rsp tga_type)) '(r2 r3))
	(breakif '(r3 /= 2))
	(vpcase '(r2 = 32))
	(vp-label 'okdepth)
		;return info
		(exit 'pixmap :info_tga '((rsp tga_width) (rsp tga_height) r2))
		(vp-free local_size)
		(vp-ret)
	(vpcase '(r2 = 24))
		(goto 'okdepth)
	(endswitch)

	;return error
	(exit 'pixmap :info_tga '(-1 -1 -1))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'pixmap :load_tga)
	;inputs
	;r5 = stream object (ptr)
	;outputs
	;r0 = 0 if error, else pixmap object (ptr)
	;trashes
	;r0-r14

	(ptr 'this 'stream)
	(puint 'data 'data_end)
	(ulong 'bit_pool)
	(struct 'header 'tga)
	(int 'length 'bit_pool_size)
	(ulong 'col)

	;save inputs
	(push-scope)
	(entry 'pixmap :load_tga {stream})

	;read header
	(call 'stream :read {stream, &header, tga_size} {_, length})
	(gotoif {length /= tga_size || header.tga_type /= 2} 'error1)
	(gotoif {header.tga_depth /= 32 && header.tga_depth /= 24} 'error1)

	;create pixmap
	(call 'pixmap :create {header.tga_width, header.tga_height} {this})
	(vpif {this})
		(assign {&this->pixmap_data} {data})
		(assign {data + this->pixmap_height * this->pixmap_stride} {data_end})
		(assign {0 => bit_pool} {bit_pool_size})

		;decode acording to type
		(loop-start)
			(call 'stream :read_bits {stream, header.tga_depth, bit_pool, bit_pool_size} {_, col, bit_pool, bit_pool_size})
			(gotoif {col = -1} 'error)
			(vpif {header.tga_depth = 24})
				(assign {+argb_black+ + col} {col})
			(endif)
			(assign {col} {*data})
		(loop-until {(data + int_size => data) = data_end})
		(call 'pixmap :as_premul {this, this})
	(endif)

	(exit 'pixmap :load_tga {this})
	(return)

(vp-label 'error)
	(call 'pixmap :deref {this})
(vp-label 'error1)
	(exit 'pixmap :load_tga '(0))
	(pop-scope)
	(return)

(def-func-end)
