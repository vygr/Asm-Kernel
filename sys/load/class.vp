(include "sys/func.inc")
(include "sys/load/class.inc")
(include "sys/str/class.inc")
(include "sys/kernel/class.inc")
(include "class/str/class.inc")
(include "sys/pii/class.inc")

(def-method 'sys_load :statics)
	(times ld_statics_size (vp-byte 0))
(def-func-end)

(def-method 'sys_load :init)
	;inputs
	;system argv
	;host function table
	;info
	;register inputs are dependant on the platform ABI
	;they are extracted via (abi-arg 0) and (abi-arg 1)

	;save inputs
	(tk-save-state)
	(vp-push (abi-arg 0))
	(vp-cpy-rr (abi-arg 1) r14)

	;allocate relloc/stat/name buffer
	(host-call-table 'host :mmap r14 '(ld_reloc_buf_size -1 mmap_data) '(r0))

	;get loader statics and bind function !
	(vp-lea-p 'fn_start r5)
	(assign '((r5 fn_header_length)) '(r1))
	(vp-add-rr r1 r5)
	(assign '(r5 (r5 fn_header_length)) '(r4 r1))
	(vp-add-rr r1 r5)
	(assign '((r5 fn_header_entry)) '(r1))
	(vp-add-rr r1 r5)
	(assign '((r4 fn_header_entry)) '(r1))
	(vp-add-rr r1 r4)

	;save host function table
	(assign '(r14) '((r5 ld_statics_host_funcs)))

	;init reloc buffer address etc
	(assign '(r0 r0) '((r5 ld_statics_reloc_stack) (r5 ld_statics_reloc_buffer)))
	(vp-add-cr ld_reloc_size r0)
	(assign '(r0) '((r5 ld_statics_name_buffer)))
	(vp-add-cr ld_name_size r0)
	(assign '(r0) '((r5 ld_statics_stat_buffer)))

	;add all prebound functions to function list
	(vp-lea-p 'fn_start r1)
	(loop-start)
		(assign '((r1 fn_header_length)) '(r2))
		(breakif '(r2 = 0))
		(ln-add-fnode r5 ld_statics_function_flist r1 r0)
		(vp-add-rr r2 r1)
	(loop-end)

	;bind all prebound function intra references
	(vp-lea-p 'fn_start r2)
	(loop-start)
		(assign '((r2 fn_header_length)) '(r1))
		(breakif '(r1 = 0))
		(assign '((r2 fn_header_links) (r2 fn_header_paths)) '(r0 r3))
		(vp-add-rr r2 r0)
		(vp-add-rr r2 r3)
		(vp-add-rr r1 r2)
		(loop-while '(r0 /= r3))
			(vp-push r0 r2 r3 r4)
			(vp-cpy-ir r0 0 r1)
			(vp-add-rr r1 r0)
			;sys/load/bind
			(vp-call-r r4)
			(vpif '(r0 = 0))
				;no such function
				(host-call-table 'host :write r14 `(2 ($ bind_error) (- ,(label-sym 'bind_error_end) ,(label-sym 'bind_error))))
				(vp-cpy-ir rsp (* ptr_size 3) r0)
				(vp-cpy-ir r0 0 r1)
				(vp-add-rr r0 r1)
				(vp-cpy-rr r1 r2)
				(loop-start)
					(vp-cpy-ir-ub r2 0 r0)
					(vp-add-cr byte_size r2)
				(loop-until '(r0 = 0))
				(vp-sub-rr r1 r2)
				(vp-sub-cr 1 r2)
				(host-call-table 'host :write r14 '(2 r1 r2))
				(host-call-table 'host :write r14 '(2 ($ bind_error_end) 1))
				(host-call-table 'host :exit r14 '(1))
			(endif)
			(vp-cpy-rr r0 r1)
			(vp-pop r0 r2 r3 r4)
			(vp-cpy-ri r1 r0 0)
			(vp-add-cr ptr_size r0)
		(loop-end)
	(loop-end)

	;kernel inputs
	(assign `(,(str (f-path 'sys_kernel :kernel))) '(r0))
	(vp-call-r r4)
	(vp-cpy-rr r0 r1)
	(vp-pop r0)
	(vp-call-r r1)
	(tk-load-state)
	(vp-cpy-cr 0 r0)
	(vp-ret)

(vp-label 'bind_error)
	(vp-string "Prebind error: ")
(vp-label 'bind_error_end)
	(vp-byte char_lf)

(def-func-end)

(def-method 'sys_load :bind)
	;input
	;r0 = c string function path name (pubyte)
	;output
	;r0 = 0 else, function entry pointer (ptr)
	;trashes
	;r1-r7

	;save pathname
	(vp-cpy-rr r0 r6)

	;get loader statics !
	(vp-lea-p 'fn_start r7)
	(assign '((r7 fn_header_length)) '(r0))
	(vp-add-rr r0 r7)
	(assign '((r7 fn_header_entry)) '(r0))
	(vp-add-rr r0 r7)

	;check if function already present !
	(loop-flist r7 ld_statics_function_flist r5 r5)
		(vp-cpy-rr r6 r0)
		(vp-lea-i r5 fn_header_pathname r1)
		(loop-start)
			(vp-cpy-ir-ub r0 0 r2)
			(vp-cpy-ir-ub r1 0 r3)
			(vp-sub-rr r3 r2)
			(breakif '(r2 /= 0) '(r3 = 0))
			(vp-add-cr byte_size r0)
			(vp-add-cr byte_size r1)
		(loop-end)
	(loop-until '(r2 = 0))
	(vpif '(r5 /= 0))
		;found function already loaded
		(assign '((r5 fn_header_entry)) '(r0))
		(vp-add-rr r5 r0)
		(vp-ret)
	(endif)

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;at this point the functions we call have been bound !
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	;create filename
	(call 'sys_str :copy `(,(cat "obj/" *cpu* "/" *abi* "/") (r7 ld_statics_name_buffer)) '(_ r1))
	(vp-sub-cr 1 r1)
	(call 'sys_str :copy '(r6 r1))
	(assign '((r7 ld_statics_name_buffer)) '(r6))

	;get length of function on disk
	(call 'sys_pii :stat '(r6 (r7 ld_statics_stat_buffer)) '(r0))
	(vpif '(r0 /= 0))
	(vp-label 'funcexit)
		(vp-xor-rr r0 r0)
		(vp-ret)
	(endif)

	;test for regular file only
	(assign '((r7 ld_statics_stat_buffer)) '(r0))
	(assign '((r0 stat_mode)) '(r0))
	(vp-and-cr s_ifmt r0)
	(gotoif '(r0 /= s_ifreg) 'funcexit)

	;ensure space for new function
	(assign '((r7 ld_statics_block_start) (r7 ld_statics_block_end) (r7 ld_statics_stat_buffer))
		'(r1 r2 r0))
	(vp-sub-rr r1 r2)
	(assign '((r0 stat_fsize)) '(r0))
	(vpif '(r2 < r0))
		;not enough so allocate new function buffer
		(call 'sys_pii :mmap '(ld_block_size -1 mmap_exec) '(r0))
		(assert '(r0 /= 0))

		;add to block list for freeing
		(ln-add-fnode r7 ld_statics_block_flist r0 r1)

		;set block pointers for loading
		(vp-add-cr ptr_size r0)
		(assign '(r0) '((r7 ld_statics_block_start)))
		(vp-add-cr (- ld_block_size ptr_size) r0)
		(assign '(r0) '((r7 ld_statics_block_end)))
	(endif)

	;open function file
	(call 'sys_pii :open '(r6 file_open_read) '(r6))

	;read into buffer
	(assign '((r7 ld_statics_stat_buffer)) '(r2))
	(call 'sys_pii :read '(r6 (r7 ld_statics_block_start) (r2 stat_fsize)))
	(assign '((r7 ld_statics_stat_buffer)) '(r2))
	(call 'sys_pii :clear_icache '((r7 ld_statics_block_start) (r2 stat_fsize)))

	;close function file
	(call 'sys_pii :close '(r6))

	;check loaded length equals file size
	(assign '((r7 ld_statics_block_start) (r7 ld_statics_stat_buffer)) '(r3 r2))
	(assign '((r3 fn_header_length) (r2 stat_fsize)) '(r0 r1))
	(vpif '(r0 /= r1))
		(call 'sys_pii :write_str '(2 "Length field error !"))
		(call 'sys_pii :exit '(1))
	(endif)

	;add to function list
	(ln-add-fnode r7 ld_statics_function_flist r3 r0)

	;relocate vtable so we can discard paths
	(assign '((r7 ld_statics_reloc_stack)) '(r1))
	(vp-cpy-rr r1 r5)

	;copy paths to reloc buffer
	(assign '((r3 fn_header_paths) (r3 fn_header_length)) '(r0 r2))
	(vp-add-rr r3 r0)
	(vp-add-rr r3 r2)
	(loop-while '(r0 /= r2))
		(vp-cpy-ir-b r0 0 r4)
		(vp-cpy-ri-b r4 r1 0)
		(vp-add-cr byte_size r0)
		(vp-add-cr byte_size r1)
	(loop-end)

	;push reloc buffer entry
	(vp-add-cr (dec (* ptr_size 2)) r1)
	(vp-and-cr (neg ptr_size) r1)
	(assign '(r5 r1) `((r1 ,(neg ptr_size)) (r7 ld_statics_reloc_stack)))

	;overflow check
	(assign '((r7 ld_statics_name_buffer)) '(r2))
	(vpif '(r1 > r2))
		(call 'sys_pii :write_str '(2 "Reloc buffer overflow !"))
		(call 'sys_pii :exit '(1))
	(endif)

	;bind links to paths in reloc buffer
	(assign '((r3 fn_header_links) (r3 fn_header_paths)) '(r0 r1))
	(vp-add-rr r3 r0)
	(vp-add-rr r3 r1)
	(vp-sub-rr r1 r5)
	(loop-while '(r0 /= r1))
		(vp-cpy-ir r0 0 r2)
		(vp-add-rr r0 r2)
		(vp-add-rr r5 r2)
		(vp-cpy-ri r2 r0 0)
		(vp-add-cr ptr_size r0)
	(loop-end)

	;adjust block start
	(assign '((r3 fn_header_paths)) '(r0))
	(vp-add-rr r3 r0)
	(vp-add-cr (dec ptr_size) r0)
	(vp-and-cr (neg ptr_size) r0)
	(assign '(r0) '((r7 ld_statics_block_start)))

	;load and link function references
	;now actual addresses of strings in the reloc buffer
	(assign '((r3 fn_header_links)) '(r0))
	(vp-add-rr r3 r0)
	(loop-start)
		(assign '((r3 fn_header_paths)) '(r1))
		(vp-add-rr r3 r1)
		(breakif '(r0 = r1))
		(vp-push r3 r0)
		(call 'fn_entry '((r0 0)))
		(vpif '(r0 = 0))
			;no such file
			(call 'sys_pii :write_str '(2 "Bind error: "))
			(assign '((rsp 0)) '(r0))
			(call 'sys_pii :write_str '(2 (r0 0)))
			(call 'sys_pii :write_char '(2 char_lf))
			(call 'sys_pii :exit '(1))
		(endif)
		(vp-cpy-rr r0 r1)
		(vp-pop r3 r0)
		(vp-cpy-ri r1 r0 0)
		(vp-add-cr ptr_size r0)
	(loop-end)

	;get loader statics !
	(vp-lea-p 'fn_start r7)
	(assign '((r7 fn_header_length)) '(r0))
	(vp-add-rr r0 r7)
	(assign '((r7 fn_header_entry)) '(r0))
	(vp-add-rr r0 r7)

	;pop reloc buffer
	(assign '((r7 ld_statics_reloc_stack)) '(r0))
	(vp-cpy-ir r0 (neg ptr_size) r0)
	(assign '(r0) '((r7 ld_statics_reloc_stack)))

	;return function address
	(assign '((r3 fn_header_entry)) '(r0))
	(vp-add-rr r3 r0)
	(vp-ret)

(def-func-end)
