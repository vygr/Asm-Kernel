(include "sys/func.inc")
(include "sys/link/class.inc")
(include "sys/mail/class.inc")

(def-method 'sys_mail :in)
	;inputs
	;r0 = link input msg buffer (ptr)
	;trashes
	;r0-r14

	(ptr 'rx_msg 'msg 'parcel_list)
	(uint 'len)

	(push-scope)
	(entry 'sys_mail :in {rx_msg})

	;look up parcel in mailbox
	(assign (cat {@} (f-path 'sys_mail :statics) {.ml_statics_parcel_list}) {parcel_list})
	(vp-def (next node src psrc))
	(assign {parcel_list, rx_msg->lk_msg_stamp.msg_src.id_id} (list next src))
	(loop-list-forward next 0 node next)
		(vp-cpy-ir node (+ msg_src id_id) psrc)
	(loop-until (list src '= psrc))
	(assign (list node) {msg})
	(vpif (list next '= 0))
		;new parcel
		(call 'sys_mail :alloc {rx_msg->lk_msg_stamp.msg_total_length} {msg, _})
		(assign {rx_msg->lk_msg_stamp.msg_dest.id_id} {msg->msg_dest.id_id})
		(assign {rx_msg->lk_msg_stamp.msg_src.id_id} {msg->msg_src.id_id})
		(assign {rx_msg->lk_msg_stamp.msg_total_length} {msg->msg_total_length})
		(assign {parcel_list, msg} (list next node))
		(lh-add-at-tail next node src)
	(endif)

	;copy fragment data
	(assign {rx_msg->lk_msg_stamp.msg_frag_length} {len})
	(assign {msg->msg_frag_offset + len} {msg->msg_frag_offset})
	(assign {msg->msg_total_length - len} {msg->msg_total_length})
	(call 'sys_mem :copy {&rx_msg->lk_msg_data,
		msg->msg_frag_data + rx_msg->lk_msg_stamp.msg_frag_offset, len})

	;clear link status
	(assign {lk_chan_status_ready} {rx_msg->lk_msg_status})

	;got all needed ?
	(vpifnot {msg->msg_total_length})
		;yes, remove parcel and post it
		(assign {msg} (list node))
		(ln-remove-node node next)
		(call 'sys_mail :send {msg})
	(endif)

	(pop-scope)
	(return)

(def-func-end)
