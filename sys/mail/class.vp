(include "sys/func.inc")
(include "sys/link/class.inc")
(include "sys/kernel/class.inc")
(include "class/list/class.inc")
(include "class/sym/class.inc")
(include "class/hmap/class.inc")
(include "class/num/class.inc")
(include "lib/consts/chars.inc")

(def-method 'sys_mail :statics)
	;info
	;mail static data
	(times ml_statics_size (vp-byte 0))
(def-func-end)

(def-method 'sys_mail :statics_init)
	;info
	;init the mailbox system, heap, buckets and id

	(f-bind 'sys_mail :statics r12)
	(vp-xor-rr r0 r0)
	(assign '(r0 (& r12 ml_statics_mbox_buckets)) '((r12 ml_statics_next_mbox_id) r0))
	(vp-lea-i r0 (* num_mbox_buckets lh_list_size) r1)
	(loop-start)
		(lh-init r0 r2)
		(vp-add-cr lh_list_size r0)
	(loop-until '(r0 = r1))
	(jump 'sys_heap :init '((& r12 ml_statics_mbox_heap) mbox_size 32))

(def-func-end)

(def-method 'sys_mail :statics_init1)
	;info
	;init the mail system

	;init off chip and fragments list
	(f-bind 'sys_mail :statics r12)
	(vp-lea-i r12 ml_statics_offchip_list r0)
	(lh-init r0 r1)
	(vp-lea-i r12 ml_statics_parcel_list r0)
	(lh-init r0 r1)

	;init postmen task
	(vp-xor-rr r0 r0)
	(assign '(r0) '((r12 ml_statics_session)))
	(call 'sys_task :start `((@ ,(f-path 'sys_mail :out))) '(_ _ r2))
	(f-bind 'sys_mail :statics r12)
	(assign '(r2) '((r12 ml_statics_out_mbox_addr)))

	;services, links and routing
	(call 'array :create nil '((r12 ml_statics_links_array)))
	(call 'hmap :create '(($ key_num) 1) '((r12 ml_statics_service_map)))
	(call 'hmap :create '(($ key_num) 13) '((r12 ml_statics_routing_map)))

	;init header heap
	(jump 'sys_heap :init '((& r12 ml_statics_msg_heap) msg_size 64))

(vp-label 'key_num)
	;inputs
	;r0 = num1 object (ptr)
	;r1 = num2 object (ptr)
	;outputs
	;r0 = num1 object (ptr)
	;r1 = 0 if same

	(entry '(r0 r1))

	(assign '((r0 num_value) (r1 num_value)) '(r0 r1))
	(vp-sub-rr r0 r1)
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :alloc_mbox)
	;outputs
	;r0 = mailbox id (uint)
	;r1 = mailbox address (ptr)
	;trashes
	;r0-r5

	;pick next id
	(f-bind 'sys_mail :statics r4)
	(assign '((r4 ml_statics_next_mbox_id)) '(r3))
	(loop-start)
		(vp-cpy-rr r3 r5)
		(vp-and-cr (dec num_mbox_buckets) r5)
		(vp-mul-cr lh_list_size r5)
		(vp-add-rr r4 r5)
		(loop-list-forward r5 ml_statics_mbox_buckets r1 r2)
			(assign '((r1 mbox_id)) '(r0))
		(loop-until '(r3 = r0))
		(breakif '(r2 = 0))
		(vp-cpy-cr 0xffffffff r2)
		(vp-add-cr 1 r3)
		(vp-and-rr r2 r3)
	(loop-end)
	(vp-lea-i r3 1 r0)
	(assign '(r0) '((r4 ml_statics_next_mbox_id)))

	;allocate mailbox with this id
	(call 'sys_heap :alloc '((& r4 ml_statics_mbox_heap)) '(_ r1))
	(vp-xor-rr r2 r2)
	(assign '(r3 r2) '((r1 mbox_id) (r1 mbox_tcb)))
	(vp-lea-i r1 mbox_list r0)
	(lh-init r0 r2)
	(vp-add-cr ml_statics_mbox_buckets r5)
	(lh-add-at-tail r5 r1 r2)

	(exit 'sys_mail :alloc_mbox '(r3 r1))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :free_mbox)
	;inputs
	;r0 = mailbox id (uint)
	;trashes
	;r0-r4

	(entry 'sys_mail :free_mbox '(r0))

	(call 'sys_mail :validate '(r0) '(r0))
	(vpif '(r0 /= 0))
		;remove mailbox node
		(vp-cpy-rr r0 r1)
		(ln-remove-node r1 r2)

		;free mailbox node
		(f-bind 'sys_mail :statics r1)
		(vp-add-cr ml_statics_mbox_heap r1)
		(hp-freecell r1 r0 r2)

 		;splice any dead mail to postman
		(call 'sys_mail :junk_mail '((& r0 mbox_list)))
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :junk_mail)
	;inputs
	;r3 = mail list pointer (ptr)
	;trashes
	;r0-r4

	(entry 'sys_mail :junk_mail '(r3))

	;splice any junk mail to postman
	(lh-is-empty r3 0 r1)
	(vpif '(r1 /= 0))
		;resume postman if needed
		(f-bind 'sys_mail :statics r1)
		(assign '((r1 ml_statics_out_mbox_addr)) '(r4))
		(assign '((r4 mbox_tcb)) '(r0))
		(vpif '(r0 /= 0))
			(vp-xor-rr r1 r1)
			(assign '(r1) '((r4 mbox_tcb)))
			(call 'sys_task :resume '(r0))
		(endif)
		;splice junk mail
		(lh-get-head r3 0 r0)
		(lh-get-tail r3 0 r1)
		(lh-get-tail r4 mbox_list r2)
		(vp-add-cr (+ mbox_list lh_list_tail) r4)
		(ln-set-succ r2 0 r0)
		(ln-set-pred r0 0 r2)
		(ln-set-succ r1 0 r4)
		(ln-set-pred r4 0 r1)
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :validate)
	;inputs
	;r0 = mailbox id (uint)
	;outputs
	;r0 = 0, else mailbox address (ptr)
	;trashes
	;r0-r3

	(vp-def (node next mid id))

	(entry 'sys_mail :validate `(,id))

	(vp-cpy-rr id next)
	(f-bind 'sys_mail :statics node)
	(vp-and-cr (dec num_mbox_buckets) next)
	(vp-mul-cr lh_list_size next)
	(vp-shl-cr 32 id)
	(vp-shr-cr 32 id)
	(vp-add-rr next node)
	(loop-list-forward node ml_statics_mbox_buckets node next)
		(assign `((,node mbox_id)) `(,mid))
	(loop-until (list mid '= id))
	(vpif (list next '= 0))
		;not found
		(vp-cpy-rr next node)
	(endif)

	(exit 'sys_mail :validate `(,node))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :mymail)
	;outputs
	;r0 = mail address (ptr)
	;r1 = string data (pubyte)
	;trashes
	;r0-r2

	(f-bind 'sys_task :statics r0)
	(assign '((r0 tk_statics_current_tcb)) '(r0))
	(jump 'sys_mail :read '((r0 tk_node_mbox_addr)))

(def-func-end)

(def-method 'sys_mail :alloc)
	;inputs
	;r0 = mail size (bytes)
	;outputs
	;r0 = mail message (ptr)
	;r1 = string data (pubyte)
	;trashes
	;r0-r4

	(entry 'sys_mail :alloc '(r3))

	(call 'str :create_from_buffer '(0 r3) '(r4))
	(f-bind 'sys_mail :statics r0)
	(call 'sys_heap :alloc '((& r0 ml_statics_msg_heap)) '(_ r0))
	(vp-xor-rr r2 r2)
	(vp-lea-i r4 str_data r1)
	(assign '(r4 r1 r3 r2)
		'((r0 msg_obj) (r0 msg_frag_data) (r0 msg_frag_length) (r0 msg_total_length)))

	(exit 'sys_mail :alloc '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :alloc_obj)
	;inputs
	;r0 = object (ptr)
	;r1 = data (pubyte)
	;r2 = data length (bytes)
	;outputs
	;r0 = mail message (ptr)
	;trashes
	;r0-r5

	(entry 'sys_mail :alloc_obj '(r0 r4 r5))

	(call 'obj :ref '(r0) '(r3))
	(f-bind 'sys_mail :statics r0)
	(call 'sys_heap :alloc '((& r0 ml_statics_msg_heap)) '(_ r0))
	(vp-xor-rr r1 r1)
	(assign '(r3 r4 r5 r1)
		'((r0 msg_obj) (r0 msg_frag_data) (r0 msg_frag_length) (r0 msg_total_length)))

	(exit 'sys_mail :alloc_obj '(r0))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :free)
	;inputs
	;r0 = mail message (ptr)
	;trashes
	;r0-r14

	(entry 'sys_mail :free '(r0))

	(vpif '(r0 /= 0))
		(vp-push r0)
		(call 'str :deref '((r0 msg_obj)))
		(f-bind 'sys_mail :statics r0)
		(vp-pop r1)
		(call 'sys_heap :free '((& r0 ml_statics_msg_heap) r1))
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :free_obj)
	;inputs
	;r0 = mail message (ptr)
	;outputs
	;r0 = 0 if msg was 0, else object (ptr)
	;r1 = data (pubyte)
	;r2 = data length (bytes)
	;trashes
	;r0-r5

	(entry 'sys_mail :free_obj '(r0))

	(vpif '(r0 /= 0))
		(assign '((r0 msg_obj) (r0 msg_frag_data) (r0 msg_frag_length)) '(r3 r4 r5))
		(f-bind 'sys_mail :statics r2)
		(call 'sys_heap :free '((& r2 ml_statics_msg_heap) r0))
		(vp-cpy-rr r3 r0)
		(vp-cpy-rr r4 r1)
		(vp-cpy-rr r5 r2)
	(endif)

	(exit 'sys_mail :free_obj '(r0 r1 r2))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :read)
	;inputs
	;r0 = mailbox address (ptr)
	;outputs
	;r0 = mail address (ptr)
	;r1 = string data (pubyte)
	;trashes
	;r0-r2

	(entry 'sys_mail :read '(r0))

	(lh-is-empty r0 mbox_list r2)
	(vpif '(r2 = 0))
		(f-bind 'sys_task :statics r1)
		(assign '((r1 tk_statics_current_tcb)) '(r1))
		(assign '(r1) '((r0 mbox_tcb)))
		(call 'sys_task :suspend)
	(endif)
	(lh-get-head r0 mbox_list r0)
	(vp-cpy-rr r0 r1)
	(ln-remove-node r1 r2)

	(exit 'sys_mail :read '(r0 (r0 msg_frag_data)))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :send)
	;inputs
	;r0 = mail message (ptr)
	;trashes
	;r0-r4

	(entry 'sys_mail :send '(r4))

	;on or off chip ?
	(call 'sys_kernel :id '() '(r0))
	(vp-cpy-ir-ui r4 (+ msg_dest id_cpu) r1)
	(vpif '(r0 = r1))
		;on this chip
		(call 'sys_mail :validate `((r4 ,(+ msg_dest id_mbox))) '(r1))
		(vpif '(r1 = 0))
			;must use postman task for junk mail
			(f-bind 'sys_mail :statics r1)
			(assign '((r1 ml_statics_out_mbox_addr)) '(r1))
		(endif)
	(vp-label 'post_it)
		(vp-add-cr mbox_list r1)
		(lh-add-at-tail r1 r4 r0)
		(assign `((r1 ,(- mbox_tcb mbox_list))) '(r0))
		(vpif '(r0 /= 0))
			(vp-xor-rr r4 r4)
			(assign '(r4) `((r1 ,(- mbox_tcb mbox_list))))
			(call 'sys_task :resume '(r0))
		(endif)
	(else)
		;going off chip
		(f-bind 'sys_mail :statics r1)
		(assign '((r4 msg_frag_length)) '(r0))
		(switch)
		(vpcase '(r0 > lk_data_size))
			;must use postman task for parcels
			(assign '((r1 ml_statics_out_mbox_addr)) '(r1))
			(goto 'post_it)
		(default)
			;queue it on the outgoing packet list
			(vp-add-cr ml_statics_offchip_list r1)
			(lh-add-at-tail r1 r4 r0)
		(endif)
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :poll)
	;inputs
	;r0 = mailbox id array object (ptr)
	;outputs
	;r0 = -1, else mailbox index (uint)
	;r4 = mailbox id array begin iter (pptr)
	;r5 = mailbox id array end iter (pptr)
	;trashes
	;r0-r6

	(vp-def (idx iter_begin iter_end iter) '(r0 r4 r5 r6))

	(entry 'sys_mail :poll '(r0))

	;check if any have mail
	(class/array/get_both r0 iter iter_end)
	(vp-cpy-rr iter iter_begin)
	(loop-start)
		(switch)
		(assign `((,iter id_mbox)) `(,idx))
		(breakif (list idx '= 0))
		(call 'sys_mail :validate `(,idx) `(,idx))
		(breakif (list idx '= 0))
		(lh-is-empty idx mbox_list idx)
		(breakif (list idx '= 0))
			;return mailbox index
			(vp-sub-rr iter_begin iter)
			(vp-shr-cr (log2 long_size) iter)
			(exit 'sys_mail :poll `(,iter ,iter_begin ,iter_end))
			(vp-ret)
		(endswitch)
		(vp-add-cr long_size iter)
	(loop-until (list iter '= iter_end))

	(exit 'sys_mail :poll `(-1 ,iter_begin ,iter_end))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :select)
	;inputs
	;r0 = mailbox id array object (ptr)
	;outputs
	;r0 = mailbox index (uint)
	;trashes
	;r0-r8

	(vp-def (idx iter_begin iter_end iter ids tcb) '(r0 r4 r5 r6 r7 r8))

	(entry 'sys_mail :select `(,ids))

	(loop-start)
		;check if any have mail
		(call 'sys_mail :poll `(,ids) `(,idx ,iter_begin ,iter_end))
		(vpif (list idx '/= -1))
			;return mailbox index
			(exit 'sys_mail :select `(,idx))
			(vp-ret)
		(endif)

		;fill in all tcb's
		(f-bind 'sys_task :statics tcb)
		(assign `((,tcb tk_statics_current_tcb)) `(,tcb))
		(vp-call 'set_tcbs)

		;suspend till some mail arrives
		(call 'sys_task :suspend)

		;clear all tcb's !
		(vp-xor-rr tcb tcb)
		(vp-call 'set_tcbs)
	(loop-end)

(vp-label 'set_tcbs)
	(assign `(,iter_begin) `(,iter))
	(loop-start)
		(switch)
		(assign `((,iter id_mbox)) `(,idx))
		(breakif (list idx '= 0))
		(call 'sys_mail :validate `(,idx) `(,idx))
		(breakif (list idx '= 0))
			(assign `(,tcb) `((,idx mbox_tcb)))
		(endswitch)
		(vp-add-cr long_size iter)
	(loop-until (list iter '= iter_end))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :service)
	;inputs
	;r0 = service name str object (ptr)
	;r1 = mailbox id num object (ptr)
	;r2 = service info str object (ptr)
	;outputs
	;r0 = service entry str object (ptr)
	;trashes
	;r0-r14

	(ptr 'name 'id 'info 'cat 'tmp1 'tmp2)

	(push-scope)
	(entry 'sys_mail :service {name, id, info})

	;create service entry
	(call 'obj :ref {name})
	(call 'obj :ref {info})
	(call 'list :create nil {cat})
	(call 'list :push_back {cat, name})
	(call 'str :create_from_long {id->num_value, -16} {tmp2})
	(call 'str :create_from_buffer {",0x0000000000000000", 19 - tmp2->str_length} {tmp1})
	(call 'list :push_back2 {cat, tmp1, tmp2})
	(call 'str :create_from_buffer {",", 1} {tmp1})
	(call 'list :push_back2 {cat, tmp1, info})
	(call 'str :cat {name, cat} {name})
	(call 'list :destroy {cat})

	(exit 'sys_mail :service {name})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_mail :declare)
	;inputs
	;r0 = service name str object (ptr)
	;r1 = mailbox id num object (ptr)
	;r2 = service info str object (ptr)
	;outputs
	;r0 = service key str object (ptr)
	;trashes
	;r0-r14

	(ptr 'name 'id 'info 'key 'bucket 'set 'session)
	(pptr 'tuple)

	(push-scope)
	(entry 'sys_mail :declare {name, id, info})

	;insert into service map
	(call 'num :create {id->num_value >> 32} {key})
	(call 'hmap :find (cat {@} (f-path 'sys_mail :statics) {.ml_statics_service_map, key}) {_, tuple, bucket})
	(vpifnot {tuple})
		(call 'list :create nil {tuple})
		(call 'num :create {0} {session})
		(call 'hset :create `((@ ,(f-path 'str :same)) 1) {set})
		(call 'list :push_back2 {tuple, session, set})
		(call 'list :push_back2 {bucket, key, tuple})
	(else)
		(assign {tuple[ptr_size]} {tuple})
		(call 'num :destroy {key})
	(endif)
	(call 'list :get_second {tuple} {_, set})
	(call 'sys_mail :service {name, id, info} {name})
	(call 'hset :insert {set, name})
	(call 'sys_mail :ping)

	(exit 'sys_mail :declare {name})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_mail :enquire)
	;inputs
	;r0 = service prefix str object (ptr)
	;outputs
	;r0 = matching service entries list object (ptr)
	;trashes
	;r0-r14

	(def-struct 'local)
		(ptr 'prefix 'entries)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'sys_mail :enquire '((rsp local_prefix)))

	(call 'list :create nil '((rsp local_entries)))
	(f-bind 'sys_mail :statics r0)
	(call 'hmap :for_each '((r0 ml_statics_service_map) ($ callback1) rsp))

	(exit 'sys_mail :enquire '((rsp local_entries)))
	(vp-free local_size)
	(vp-ret)

(vp-label 'callback1)
	;inputs
	;r0 = predicate data (ptr)
	;r1 = element iterator (ptr)

	(entry 'hmap :each_callback '(r0 r1))

	(assign '((r1 ptr_size) 1) '(r2 r1))
	(class/array/get_element r2 r1 r1 r2)
	(jump 'hset :for_each '(r1 ($ callback2) r0))

(vp-label 'callback2)
	;inputs
	;r0 = predicate data (ptr)
	;r1 = element iterator (ptr)

	(entry 'hset :each_callback '(r0 r1))

	(assign '((r1 0)) '(r1))
	(vp-push r0 r1)
	(call 'str :starts_with '((r0 local_prefix) r1) '(_ r2))
	(vp-pop r0 r1)
	(vpif '(r2 = 0))
		(class/obj/ref r1 r2)
		(jump 'list :push_back '((r0 local_entries) r1))
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :forget)
	;inputs
	;r0 = service key str object (ptr)
	;trashes
	;r0-r14

	;find in service map and erase
	(f-bind 'sys_mail :statics r1)
	(call 'hmap :for_each '((r1 ml_statics_service_map) ($ callback) r0))
	(jump 'sys_mail :ping)

(vp-label 'callback)
	;inputs
	;r0 = predicate data (ptr)
	;r1 = element iterator (ptr)

	(entry 'hmap :each_callback '(r0 r1))

	(vp-swp-rr r0 r1)
	(assign '((r0 ptr_size) 1) '(r2 r0))
	(class/array/get_element r2 r0 r0 r2)
	(call 'hset :find '(r0 r1) '(r0 r1 r2))
	(vpif '(r1 /= 0))
		(jump 'hset :erase '(r0 r1 r2))
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'sys_mail :ping)
	;trashes
	;r0-r14
	;info
	;ping services out to network

	(def-struct 'cat)
		(ptr 'entries 'lf)
	(def-struct-end)

	(ptr 'key 'bucket 'set 'msg 'data 'services 'mail_statics)
	(pptr 'tuple)
	(struct 'cat 'cat)

	(push-scope)

	(call 'num :create (cat {@} (f-path 'sys_task :statics) {.tk_statics_cpu_id}) {key})
	(assign (cat {@} (f-path 'sys_mail :statics)) {mail_statics})
	(call 'hmap :find {mail_statics->ml_statics_service_map, key} {_, tuple, bucket})
	(vpif {tuple})
		(assign {tuple[ptr_size], +char_lf+} {tuple, cat.cat_lf})
		(call 'str :create_from_buffer {&cat.cat_lf, 1} {cat.cat_lf})
		(call 'list :create nil {cat.cat_entries})
		(call 'list :get_second {tuple} {_, set})
		(call 'hset :for_each {set, $callback, &cat})
		(call 'str :cat {cat.cat_lf, cat.cat_entries} {services})
		(call 'sys_mail :alloc {kn_msg_ping_services + services->str_length} {msg, data})
		(assign {key->num_value << 32} {msg->msg_dest.id_id})
		(assign {kn_call_ping} {data->kn_msg_func})
		(assign {msg->msg_dest.id_cpu} {data->kn_msg_ping_origin})
		(assign {0} {data->kn_msg_ping_hops})
		(assign {msg->msg_dest.id_cpu} {data->kn_msg_ping_via})
		(assign {(mail_statics->ml_statics_session + 1) => mail_statics->ml_statics_session} {data->kn_msg_ping_session})
		(call 'sys_mem :copy {&services->str_data, &data->kn_msg_ping_services, services->str_length})
		(call 'sys_mail :send {msg})
		(call 'list :destroy {cat.cat_entries})
		(call 'str :destroy {services})
		(call 'str :destroy {cat.cat_lf})
	(endif)
	(jump 'num :destroy {key})

	(pop-scope-syms)

(vp-label 'callback)
	;inputs
	;r0 = predicate data (ptr)
	;r1 = element iterator (ptr)

	(entry 'hset :each_callback '(r0 r1))

	(assign '((r1 0) (r0 cat_lf)) '(r1 r2))
	(class/obj/ref r1 r3)
	(class/obj/ref r2 r3)
	(jump 'list :push_back2 '((r0 cat_entries) r1 r2))

(def-func-end)

(def-method 'sys_mail :devices)
	;outputs
	;r0 = known device cpu array object (ptr)
	;trashes
	;r0-r14

	(call 'array :create nil '(r0))
	(vp-push r0)
	(f-bind 'sys_mail :statics r0)
	(call 'hmap :for_each '((r0 ml_statics_routing_map) ($ callback) (rsp 0)))
	(vp-pop r0)

	(exit 'sys_mail :devices '(r0))
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data (ptr)
	;r1 = element iterator (ptr)

	(entry 'hmap :each_callback '(r0 r1))

	(assign '((r1 0)) '(r1))
	(assign '((r1 num_value)) '(r1))
	(jump 'array :push_back '(r0 r1))

(def-func-end)
