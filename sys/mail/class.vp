(include 'sys/func.inc)
(include 'sys/link/class.inc)
(include 'sys/kernel/class.inc)
(include 'class/array/class.inc)
(include 'class/symbol/class.inc)
(include 'class/hash_map/class.inc)
(include 'class/pair/class.inc)
(include 'class/integer/class.inc)

(def-method 'sys_mail 'statics)
	;info
	;mail static data
	(times ml_statics_size (vp-byte 0))
(def-func-end)

(def-method 'sys_mail 'init)
	;info
	;init the mbox array and mbox free array

	(f-bind 'sys_mail 'statics r12)
	(call 'array 'create nil '(r0))
	(call 'array 'set_capacity '(r0 32) '((r12 ml_statics_mbox_array)))
	(call 'array 'create nil '((r12 ml_statics_mbox_free_array)))
	(jump 'sys_heap 'init '((& r12 ml_statics_mbox_heap) mbox_size (mul mbox_size 32)))

(def-func-end)

(def-method 'sys_mail 'init1)
	;info
	;init the mail system

	;init off chip list
	(f-bind 'sys_mail 'statics r12)
	(vp-lea-i r12 ml_statics_offchip_list r0)
	(lh-init r0 r1)

	;init out postmen task
	(vp-xor-rr r0 r0)
	(vp-cpy-ri-i r0 r12 ml_statics_parcel_id)
	(call 'sys_task 'start `((@ ,(f-path 'sys_mail 'out))) '(_ _ r2))
	(f-bind 'sys_mail 'statics r12)
	(vp-cpy-ri r2 r12 ml_statics_out_mbox_addr)

	;create link array
	(call 'array 'create nil '((r12 ml_statics_links_array)))

	;create declare map
	(call 'hash_map 'create '(0 1) '((r12 ml_statics_declare_map)))

	;init header heap
	(jump 'sys_heap 'init '((& r12 ml_statics_msg_heap) msg_size (mul msg_size 64)))

(def-func-end)

(def-method 'sys_mail 'alloc_mbox)
	;outputs
	;r0 = mailbox id (uint)
	;r1 = mailbox address (ptr)
	;trashes
	;r2-r7

	(f-bind 'sys_mail 'statics r4)
	(d-call 'array 'get_length '((r4 ml_statics_mbox_free_array)) '(r0 r1))
	(vpif '(r1 != 0))
		(call 'array 'get_back '(r0) '(r0 r3))
		(d-call 'array 'pop_back '(r0))
		(call 'array 'get_element '((r4 ml_statics_mbox_array) r3) '(_ r1))

		(exit 'sys_mail 'alloc_mbox '(r3 r1))
		(vp-ret)
	(else)
		(call 'sys_heap 'alloc '((& r4 ml_statics_mbox_heap)) '(_ r1))
		(ml-init r1 r2 r0)
		(call 'array 'push_back '((r4 ml_statics_mbox_array) r1) '(r0 r1))
		(vp-cpy-ir-ui r0 array_length r0)
		(vp-sub-cr 1 r0)

		(exit 'sys_mail 'alloc_mbox '(r0 r1))
		(vp-ret)
	(endif)

(def-func-end)

(def-method 'sys_mail 'free_mbox)
	;inputs
	;r0 = mailbox id (uint)
	;trashes
	;r0-r7

	(entry 'sys_mail 'free_mbox '(r1))

	(f-bind 'sys_mail 'statics r0)
	(jump 'array 'push_back '((r0 ml_statics_mbox_free_array) r1))

(def-func-end)

(def-method 'sys_mail 'mbox_addr)
	;inputs
	;r0 = mailbox id (uint)
	;outputs
	;r0 = mailbox address (ptr)
	;trashes
	;r0-r2

	(entry 'sys_mail 'mbox_addr '(r0))

	(vp-cpy-cr 0xffffffff r1)
	(vp-and-rr r0 r1)
	(f-bind 'sys_mail 'statics r0)
	(call 'array 'get_element '((r0 ml_statics_mbox_array) r1) '(_ r0))

	(exit 'sys_mail 'mbox_addr '(r0))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail 'mymail)
	;outputs
	;r0 = mail address (ptr)
	;r1 = string data (pubyte)
	;trashes
	;r2

	(f-bind 'sys_task 'statics r0)
	(vp-cpy-ir r0 tk_statics_current_tcb r0)
	(jump 'sys_mail 'read '((r0 tk_node_mbox_addr)))

(def-func-end)

(def-method 'sys_mail 'trymail)
	;outputs
	;r0 = 0, else mail address (ptr)
	;r1 = string data (pubyte)
	;trashes
	;r2

	(f-bind 'sys_task 'statics r0)
	(vp-cpy-ir r0 tk_statics_current_tcb r0)
	(jump 'sys_mail 'try_read '((r0 tk_node_mbox_addr)))

(def-func-end)

(def-method 'sys_mail 'alloc)
	;inputs
	;r0 = mail size (bytes)
	;outputs
	;r0 = mail message (ptr)
	;r1 = string data (pubyte)
	;trashes
	;r2-r7

	(entry 'sys_mail 'alloc '(r7))

	(vp-xor-rr r0 r0)
	(call 'string 'create_from_buffer '(r0 r7) '(r4))
	(f-bind 'sys_mail 'statics r0)
	(call 'sys_heap 'alloc '((& r0 ml_statics_msg_heap)) '(_ r0))
	(vp-xor-rr r2 r2)
	(vp-lea-i r4 string_data r1)
	(vp-cpy-ri r4 r0 msg_parcel_obj)
	(vp-cpy-ri r1 r0 msg_parcel_data)
	(vp-cpy-ri-i r7 r0 msg_length)
	(vp-cpy-ri-i r2 r0 msg_parcel_length)

	(exit 'sys_mail 'alloc '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail 'alloc_obj)
	;inputs
	;r0 = object (ptr)
	;r1 = data (pubyte)
	;r2 = data length (bytes)
	;outputs
	;r0 = mail message (ptr)
	;trashes
	;r1-r5

	(entry 'sys_mail 'alloc_obj '(r0 r4 r5))

	(call 'obj 'ref '(r0) '(r3))
	(f-bind 'sys_mail 'statics r0)
	(call 'sys_heap 'alloc '((& r0 ml_statics_msg_heap)) '(_ r0))
	(vp-xor-rr r1 r1)
	(vp-cpy-ri r3 r0 msg_parcel_obj)
	(vp-cpy-ri r4 r0 msg_parcel_data)
	(vp-cpy-ri-i r5 r0 msg_length)
	(vp-cpy-ri-i r1 r0 msg_parcel_length)

	(exit 'sys_mail 'alloc_obj '(r0))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail 'free)
	;inputs
	;r0 = mail message (ptr)
	;trashes
	;all

	(entry 'sys_mail 'free '(r0))

	(vpif '(r0 != 0))
		(vp-push r0)
		(call 'string 'deref '((r0 msg_parcel_obj)))
		(f-bind 'sys_mail 'statics r0)
		(vp-pop r1)
		(call 'sys_heap 'free '((& r0 ml_statics_msg_heap) r1))
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'sys_mail 'free_obj)
	;inputs
	;r0 = mail message (ptr)
	;outputs
	;r0 = 0 if msg was 0, else object (ptr)
	;r1 = data (pubyte)
	;r2 = data length (bytes)
	;trashes
	;r3-r5

	(entry 'sys_mail 'free_obj '(r0))

	(vpif '(r0 != 0))
		(vp-cpy-ir r0 msg_parcel_obj r3)
		(vp-cpy-ir r0 msg_parcel_data r4)
		(vp-cpy-ir-ui r0 msg_length r5)

		(f-bind 'sys_mail 'statics r2)
		(call 'sys_heap 'free '((& r2 ml_statics_msg_heap) r0))

		(vp-cpy-rr r3 r0)
		(vp-cpy-rr r4 r1)
		(vp-cpy-rr r5 r2)
	(endif)

	(exit 'sys_mail 'free_obj '(r0 r1 r2))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail 'read)
	;inputs
	;r0 = mailbox address (ptr)
	;outputs
	;r0 = mail address (ptr)
	;r1 = string data (pubyte)
	;trashes
	;r2

	(entry 'sys_mail 'read '(r0))

	(lh-is-empty r0 0 r2)
	(vpif '(r2 == 0))
		(f-bind 'sys_task 'statics r1)
		(vp-cpy-ir r1 tk_statics_current_tcb r1)
		(vp-cpy-ri r1 r0 mbox_tcb)
		(call 'sys_task 'suspend)
	(endif)
	(lh-get-head r0 0 r0)
	(vp-cpy-rr r0 r1)
	(ln-remove-node r1 r2)

	(exit 'sys_mail 'read '(r0 (r0 msg_parcel_data)))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail 'try_read)
	;inputs
	;r0 = mailbox address (ptr)
	;outputs
	;r0 = 0, else mail address (ptr)
	;r1 = string data (pubyte)
	;trashes
	;r2

	(entry 'sys_mail 'try_read '(r0))

	(lh-get-head r0 0 r0)
	(vp-cpy-rr r0 r1)
	(ln-get-succ r0 0 r0)
	(vpif '(r0 != 0))
		(vp-cpy-rr r1 r0)
		(ln-remove-node r1 r2)
		(vp-cpy-ir r0 msg_parcel_data r1)
	(endif)

	(exit 'sys_mail 'try_read '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail 'send)
	;inputs
	;r0 = mail message (ptr)
	;trashes
	;r0-r2

	;on or off chip ?
	(entry 'sys_mail 'send '(r2))

	(call 'sys_kernel 'id '() '(r0))
	(vp-cpy-ir-ui r2 (add msg_dest id_cpu) r1)
	(vpif '(r0 == r1))
		;on this chip
		(f-bind 'sys_mail 'statics r0)
		(vp-cpy-ir-ui r2 (add msg_dest id_mbox) r1)
		(vp-cpy-ir r0 ml_statics_mbox_array r0)
		(vp-shl-cr (log2 ptr_size) r1)
		(vp-cpy-ir r0 array_array r0)
		(vp-cpy-dr r0 r1 r1)
	(vp-label 'post_it)
		(lh-add-at-tail r1 r2 r0)
		(vp-cpy-ir r1 mbox_tcb r0)
		(vpif '(r0 != 0))
			(vp-xor-rr r2 r2)
			(vp-cpy-ri r2 r1 mbox_tcb)
			(call 'sys_task 'resume '(r0))
		(endif)
	(else)
		;going off chip
		(f-bind 'sys_mail 'statics r1)
		(vp-cpy-ir-ui r2 msg_length r0)
		(vpif '(r0 > lk_data_size))
			;must use postman task
			(vp-cpy-ir r1 ml_statics_out_mbox_addr r1)
			(vp-jmp 'post_it)
		(else)
			;queue it on the outgoing packet list
			(vp-lea-i r1 ml_statics_offchip_list r1)
			(lh-add-at-tail r1 r2 r0)
		(endif)
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'sys_mail 'select)
	;inputs
	;r0 = mailbox address array (pptr)
	;r1 = mailbox count (uint)
	;outputs
	;r0 = mailbox index (uint)
	;trashes
	;r1-r4

	(entry 'sys_mail 'select '(r0 r1))

	(vp-cpy-rr r0 r3)
	(vp-shl-cr (log2 ptr_size) r1)
	(vp-lea-d r0 r1 r1)
	(loop-start)
		;check if any have mail
		(vp-cpy-rr r3 r0)
		(loop-start)
			(vp-cpy-ir r0 0 r2)
			(vpif '(r2 != 0))
				(lh-is-empty r2 0 r2)
				(vpif '(r2 != 0))
					;return first mailbox not empty
					(vp-sub-rr r3 r0)
					(vp-shr-cr (log2 ptr_size) r0)

					(exit 'sys_mail 'select '(r0))
					(vp-ret)
				(endif)
			(endif)
			(vp-add-cr ptr_size r0)
		(loop-until '(r0 == r1))

		;fill in all tcb's and suspend
		(f-bind 'sys_task 'statics r4)
		(vp-cpy-ir r4 tk_statics_current_tcb r4)
		(vp-cpy-rr r3 r0)
		(loop-start)
			(vp-cpy-ir r0 0 r2)
			(vpif '(r2 != 0))
				(vp-cpy-ri r4 r2 mbox_tcb)
			(endif)
			(vp-add-cr ptr_size r0)
		(loop-until '(r0 == r1))

		(call 'sys_task 'suspend)

		;clear all tcb's
		(vp-xor-rr r4 r4)
		(vp-cpy-rr r3 r0)
		(loop-start)
			(vp-cpy-ir r0 0 r2)
			(vpif '(r2 != 0))
				(vp-cpy-ri r4 r2 mbox_tcb)
			(endif)
			(vp-add-cr ptr_size r0)
		(loop-until '(r0 == r1))
	(loop-end)

(def-func-end)

(def-method 'sys_mail 'declare)
	;inputs
	;r0 = mailbox name c string (pubyte)
	;r1 = mailbox id (ulong)
	;trashes
	;all

	(ptr 'name)
	(ulong 'id)

	(push-scope)
	(entry 'sys_mail 'declare {name, id})

	(call 'symbol 'intern_cstr {name} {name})
	(call 'integer 'create {id} {id})
	(call 'hash_map 'insert (cat {@} (f-path 'sys_mail 'statics) {.ml_statics_declare_map, name, id}))
	(call 'symbol 'deref {name})
	(call 'integer 'deref {id})

	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_mail 'enquire)
	;inputs
	;r0 = mailbox name c string (pubyte)
	;outputs
	;r0 = 0 if error, else mailbox id (ulong)
	;trashes
	;all

	(ptr 'name)
	(union
		'(pptr 'iter)
		'(ulong 'id))

	(push-scope)
	(entry 'sys_mail 'enquire {name})

	(call 'symbol 'intern_cstr {name} {name})
	(call 'hash_map 'find (cat {@} (f-path 'sys_mail 'statics) {.ml_statics_declare_map, name}) {_, iter, _})
	(vpif {iter})
		(call 'pair 'get_second {*iter} {_, id})
		(call 'integer 'get_value {id} {_, id})
	(endif)
	(call 'symbol 'deref {name})

	(exit 'sys_mail 'enquire {id})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_mail 'forget)
	;inputs
	;r0 = mailbox name c string (pubyte)
	;trashes
	;all

	(ptr 'name 'bucket)
	(pptr 'iter)

	(push-scope)
	(entry 'sys_mail 'forget {name})

	(call 'symbol 'intern_cstr {name} {name})
	(call 'hash_map 'find (cat {@} (f-path 'sys_mail 'statics) {.ml_statics_declare_map, name}) {_, iter, bucket})
	(vpif {iter})
		(call 'hash_map 'erase (cat {@} (f-path 'sys_mail 'statics) {.ml_statics_declare_map, iter, bucket}))
	(endif)
	(call 'symbol 'deref {name})

	(pop-scope)
	(return)

(def-func-end)
