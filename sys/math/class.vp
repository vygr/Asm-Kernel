(include "sys/func.inc")
(include "sys/math/class.inc")

(def-method 'sys_math :i_rand)
	;inputs
	;r0 = random range (ulong)
	;outputs
	;r0 = random number in range (ulong)
	;trashes
	;r0-r2

	(entry 'sys_math :i_rand '(r0))

	(vpif '(r0 /= 0))
		(vp-cpy-rr r0 r1)
		(vp-cpy-pr 'seed r0)
		(vp-cpy-rr r0 r2)
		(vp-shl-cr 21 r2)
		(vp-xor-rr r2 r0)
		(vp-cpy-rr r0 r2)
		(vp-asr-cr 35 r2)
		(vp-xor-rr r2 r0)
		(vp-cpy-rr r0 r2)
		(vp-shl-cr 4 r2)
		(vp-xor-rr r2 r0)
		(vp-cpy-rp r0 'seed)
		(vp-xor-rr r2 r2)
		(vp-div-rrr-u r1 r2 r0)
		(vp-cpy-rr r2 r0)
	(endif)

	(exit 'sys_math :i_rand '(r0))
	(vp-ret)

	(vp-align ptr_size)
(vp-label 'seed)
	(vp-long 123456789)

(def-func-end)

(def-method 'sys_math :i_sqrt)
	;inputs
	;r0 = number (ulong)
	;outputs
	;r0 = sqrt (ulong)
	;trashes
	;r0-r3

	(entry 'sys_math :i_sqrt '(r1))

	(vp-xor-rr r0 r0)
	(vp-cpy-cr 0x4000000000000000 r2)
	(loop-while '(r2 > r1))
		(vp-shr-cr 2 r2)
	(loop-end)
	(loop-while '(r2 /= 0))
		(vp-lea-d r0 r2 r3)
		(vpif '(r1 > r3))
			(vp-cpy-rr r2 r3)
			(vp-sub-rr r0 r1)
			(vp-shl-cr 1 r3)
			(vp-sub-rr r2 r1)
			(vp-add-rr r3 r0)
		(endif)
		(vp-shr-cr 1 r0)
		(vp-shr-cr 2 r2)
	(loop-end)
	(vpif '(r1 > r0))
		(vp-add-cr 1 r0)
	(endif)

	(exit 'sys_math :i_sqrt '(r0))
	(vp-ret)

(def-func-end)

(def-method 'sys_math :f_sin)
	;inputs
	;r0 = angle in radians (fixed)
	;outputs
	;r0 = sine (fixed)
	;trashes
	;r0-r4

	(entry 'sys_math :f_sin '(r0))
	(vec-set 1)
	(vec-load 1 '(+fp_2pi+))
	(vec-fmod 1)

	; (assign {(res - +fp_pi+) *> +fp_rpi+} {tc})
	; (assign {1.0} {tp})
	; (assign {tc << 1} {u})

	(vp-cpy-rr r0 r3)
	(vp-sub-cr +fp_pi+ r0)
	(vp-mul-cr +fp_rpi+ r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-cpy-cr (<< 1 +fp_shift+) r1)
	(vp-cpy-rr r0 r4)
	(vp-shl-cr 1 r4)

	; (assign {-37305 *> tc} {res})
	; (assign {u *> tc - tp} {tn})
	; (assign {tc} {tp})
	; (assign {tn} {tc})

	(vp-cpy-rr r0 r3)
	(vp-mul-cr -37305 r3)
	(vp-asr-cr +fp_shift+ r3)
	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-sub-rr r2 r0)

	; (assign {u *> tc - tp} {tn})
	; (assign {tc} {tp})
	; (assign {tn} {tc})

	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-sub-rr r2 r0)

	; (assign {43707 *> tc + res} {res})
	; (assign {u *> tc - tp} {tn})
	; (assign {tc} {tp})
	; (assign {tn} {tc})

	(vp-cpy-rr r0 r2)
	(vp-mul-cr 43707 r2)
	(vp-asr-cr +fp_shift+ r2)
	(vp-add-rr r2 r3)
	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-sub-rr r2 r0)

	; (assign {u *> tc - tp} {tn})
	; (assign {tc} {tp})
	; (assign {tn} {tc})

	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-sub-rr r2 r0)

	; (assign {-6834 *> tc + res} {res})
	; (assign {u *> tc - tp} {tn})
	; (assign {tc} {tp})
	; (assign {tn} {tc})

	(vp-cpy-rr r0 r2)
	(vp-mul-cr -6834 r2)
	(vp-asr-cr +fp_shift+ r2)
	(vp-add-rr r2 r3)
	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-sub-rr r2 r0)

	; (assign {u *> tc - tp} {tn})
	; (assign {tc} {tp})
	; (assign {tn} {tc})

	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-sub-rr r2 r0)

	; (assign {448 *> tc + res} {res})
	; (assign {u *> tc - tp} {tn})
	; (assign {tc} {tp})
	; (assign {tn} {tc})

	(vp-cpy-rr r0 r2)
	(vp-mul-cr 448 r2)
	(vp-asr-cr +fp_shift+ r2)
	(vp-add-rr r2 r3)
	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-sub-rr r2 r0)

	; (assign {u *> tc - tp} {tc})
	; (assign {-16 *> tc + res} '(r0))

	(vp-mul-rr r4 r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-sub-rr r1 r0)
	(vp-mul-cr -16 r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-add-rr r3 r0)

	(exit 'sys_math :f_sin '(r0))
	(vp-ret)

(def-func-end)

(def-method 'sys_math :f_cos)
	;inputs
	;r0 = angle in radians (fixed)
	;outputs
	;r0 = cosine (fixed)
	;trashes
	;r0-r4

	(entry 'sys_math :f_cos '(r0))
	(vec-set 1)
	(vec-load 1 '(+fp_2pi+))
	(vec-fmod 1)

	; (assign {(res - +fp_pi+) *> +fp_rpi+} {tc})
	; (assign {1.0} {tp})
	; (assign {tc << 1} {u})
	; (assign {19939} {res})

	(vp-sub-cr +fp_pi+ r0)
	(vp-mul-cr +fp_rpi+ r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-cpy-cr (<< 1 +fp_shift+) r1)
	(vp-cpy-rr r0 r4)
	(vp-shl-cr 1 r4)
	(vp-cpy-cr 19939 r3)

	; (assign {u *> tc - tp} {tn})
	; (assign {tc} {tp})
	; (assign {tn} {tc})

	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-sub-rr r2 r0)

	; (assign {63627 *> tc + res} {res})
	; (assign {u *> tc - tp} {tn})
	; (assign {tc} {tp})
	; (assign {tn} {tc})

	(vp-cpy-rr r0 r2)
	(vp-mul-cr 63627 r2)
	(vp-asr-cr +fp_shift+ r2)
	(vp-add-rr r2 r3)
	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-sub-rr r2 r0)

	; (assign {u *> tc - tp} {tn})
	; (assign {tc} {tp})
	; (assign {tn} {tc})

	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-sub-rr r2 r0)

	; (assign {-19848 *> tc + res} {res})
	; (assign {u *> tc - tp} {tn})
	; (assign {tc} {tp})
	; (assign {tn} {tc})

	(vp-cpy-rr r0 r2)
	(vp-mul-cr -19848 r2)
	(vp-asr-cr +fp_shift+ r2)
	(vp-add-rr r2 r3)
	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-sub-rr r2 r0)

	; (assign {u *> tc - tp} {tn})
	; (assign {tc} {tp})
	; (assign {tn} {tc})

	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-sub-rr r2 r0)

	; (assign {1907 *> tc + res} {res})
	; (assign {u *> tc - tp} {tn})
	; (assign {tc} {tp})
	; (assign {tn} {tc})

	(vp-cpy-rr r0 r2)
	(vp-mul-cr 1907 r2)
	(vp-asr-cr +fp_shift+ r2)
	(vp-add-rr r2 r3)
	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-sub-rr r2 r0)

	; (assign {u *> tc - tp} {tn})
	; (assign {tc} {tp})
	; (assign {tn} {tc})

	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-sub-rr r2 r0)

	; (assign {-91 *> tc + res} {res})
	; (assign {u *> tc - tp} {tn})
	; (assign {tc} {tp})
	; (assign {tn} {tc})

	(vp-cpy-rr r0 r2)
	(vp-mul-cr -91 r2)
	(vp-asr-cr +fp_shift+ r2)
	(vp-add-rr r2 r3)
	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r0 r1)
	(vp-mul-rr r4 r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-sub-rr r2 r0)

	; (assign {u *> tc - tp} {tc})
	; (assign {3 *> tc + res} '(r0))

	(vp-mul-rr r4 r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-sub-rr r1 r0)
	(vp-mul-cr 3 r0)
	(vp-asr-cr +fp_shift+ r0)
	(vp-add-rr r3 r0)

	(exit 'sys_math :f_cos '(r0))
	(vp-ret)

(def-func-end)

(def-method 'sys_math :f_intersect)
	;inputs
	;r0 = p1x (fixed)
	;r1 = p1y (fixed)
	;r2 = p2x (fixed)
	;r3 = p2y (fixed)
	;r4 = v1x (fixed)
	;r5 = v1y (fixed)
	;r6 = v2x (fixed)
	;r7 = v2y (fixed)
	;outputs
	;r0 = ix (fixed)
	;r1 = iy (fixed)
	;trashes
	;r0-r14

	(vec-set 8)
	(entry 'sys_math :f_intersect (vec-top 8))

	(bind '(p1x p1y p2x p2y v1x v1y v2x v2y) (vec-top 8))
	(defq p1 (list p1x p1y) p2 (list p2x p2y)
		v1 (list v1x v1y) v2 (list v2x v2y))
	(bind '(v1x v1y) (map list v1))
	(bind '(v2x v2y) (map list v2))

	(vec-dup 2 v2)
	(vec-dup 2 p2)
	(vec-add 2)
	(vec-dup 2 p2)
	(vec-fdet 2)
	(defq db (vec-top 1))

	(vec-dup 2 v1)
	(vec-dup 2 p1)
	(vec-add 2)
	(vec-dup 2 p1)
	(vec-fdet 2)
	(defq da (vec-top 1))

	(vec-dup 2 v1)
	(vec-dup 2 v2)
	(vec-fdet 2)
	(defq axb (vec-top 1))

	(vpif (list (elem 0 axb) '/= 0))
		(vec-dup 2 (cat da v1x))
		(vec-fdet 2 (cat db v2x))
		(vec-dup 2 (cat da v1y))
		(vec-fdet 2 (cat db v2y))
		(vec-fdiv 2 (cat axb axb))
		(exit 'sys_math :f_intersect (vec-pop 2))
	(else)
		(vec-set 4)
		(vec-add 2)
		(vec-load 1 {0.5})
		(vec-fscale 2)
		(exit 'sys_math :f_intersect (vec-pop 2))
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'sys_math :f_dist_sqd)
	;inputs
	;r0 = px (fixed)
	;r1 = py (fixed)
	;r2 = p1x (fixed)
	;r3 = p1y (fixed)
	;r4 = p2x (fixed)
	;r5 = p2y (fixed)
	;outputs
	;r0 = distance squared (fixed)
	;trashes
	;r0-r14

	(int 'px 'py 'p1x 'p1y 'p2x 'p2y)

	(push-scope)
	(entry 'sys_math :f_dist_sqd {px, py, p1x, p1y, p2x, p2y})

	(vec-set 0)
	(vec-load 2 {px, py})
	(defq p (vec-top 2))
	(vec-load 2 {p1x, p1y})
	(defq p1 (vec-top 2))
	(vec-load 2 {p2x, p2y})
	(defq p2 (vec-top 2))

	(vec-dup 2)
	(vec-sub 2 p1)
	(defq lv (vec-top 2))

	(vec-dup 2 p)
	(vec-sub 2 p1)
	(vec-fdot 2 lv)
	(bind '(c1) (vec-top 1))

	(vpif (list c1 '> 0))
		(vec-dup 2 lv)
		(vec-fdot 2 lv)
		(bind '(c2) (vec-top 1))

		(vpif (list c2 '<= c1))
			(vec-cpy 2 p2 p1)
		(else)
			(vec-fdiv 1)
			(vec-fscale 2)
			(vec-add 2 lv p1)
		(endif)
	(endif)
	(vec-set 4)
	(vec-fdistance-squared 2)

	(exit 'sys_math :f_dist_sqd (vec-pop 1))
	(pop-scope)
	(return)

(def-func-end)

(defq mbits 31 ebits (- 63 mbits))

(defun real-unpack (rn re rm)
	(assign `(,rn ,rn) `(,re ,rm))
	(vp-shl-cr (- 64 ebits) re)
	(vp-asr-cr ebits rm)
	(vp-asr-cr (- 64 ebits) re))

(defun real-pack (re rm rn)
	(vp-shl-cr (- 64 ebits) re)
	(vp-shl-cr ebits rm)
	(vp-shr-cr (- 64 ebits) re)
	(assign `(,re) `(,rn))
	(vp-add-rr rm rn))

(defun real-norm (re rm rt)
	(vpif (list rm '> 0) 'exit)
		(vp-cpy-cr (<< 1 mbits) rt)
		(loop-while (list rm '>= rt))
			(vp-asr-cr 1 rm)
			(vp-add-cr 1 re)
		(loop-end)
		(vp-cpy-cr (<< 1 (dec mbits)) rt)
		(loop-while (list rm '< rt))
			(vp-shl-cr 1 rm)
			(vp-sub-cr 1 re)
		(loop-end)
	(elseif (list rm '< 0))
		(vp-cpy-cr (<< -1 mbits) rt)
		(loop-while (list rm '<= rt))
			(vp-asr-cr 1 rm)
			(vp-add-cr 1 re)
		(loop-end)
		(vp-cpy-cr (<< -1 (dec mbits)) rt)
		(loop-while (list rm '> rt))
			(vp-shl-cr 1 rm)
			(vp-sub-cr 1 re)
		(loop-end)
	(else)
		(vp-xor-rr re re)
	(endif))

(def-method 'sys_math :r_pack)
	;inputs
	;r13 = exponent (long)
	;r14 = mantisa (long)
	;outputs
	;r13 = real (32:32)
	;trashes
	;r12-r14

	(vp-def (e m r) '(r13 r14 r12))

	(entry 'sys_math :r_pack `(,e ,m))

	(real-norm e m r)
	(real-pack e m e)

	(exit 'sys_math :r_pack `(,e))
	(vp-ret)

(def-func-end)

(def-method 'sys_math :r_add)
	;inputs
	;r13 = real (32:32)
	;r14 = real (32:32)
	;outputs
	;r13 = real (32:32)
	;trashes
	;r11-r14

	(vp-def (n1 n2 e1 m1 e2 m2) '(r13 r14 r13 r14 r11 r12))

	(entry 'sys_math :r_add `(,n1 ,n2))

	(real-unpack n2 e2 m2)
	(real-unpack n1 e1 m1)
	(vp-sub-rr e1 e2)
	(vpif (list e2 '= 0))
		(vp-add-rr m2 m1)
	(elseif (list e2 '> 0))
		(vp-asr-rr e2 m1)
		(vp-add-rr e2 e1)
		(vp-add-rr m2 m1)
	(else)
		(vp-mul-cr -1 e2)
		(vp-asr-rr e2 m2)
		(vp-add-rr m2 m1)
	(endif)

	(jump 'sys_math :r_pack `(,e1 ,m1))

(def-func-end)

(def-method 'sys_math :r_sub)
	;inputs
	;r13 = real (32:32)
	;r14 = real (32:32)
	;outputs
	;r13 = real (32:32)
	;trashes
	;r11-r14

	(vp-def (n1 n2 e1 m1 e2 m2) '(r13 r14 r13 r14 r11 r12))

	(entry 'sys_math :r_sub `(,n1 ,n2))

	(real-unpack n2 e2 m2)
	(real-unpack n1 e1 m1)
	(vp-sub-rr e1 e2)
	(vpif (list e2 '= 0))
		(vp-sub-rr m2 m1)
	(elseif (list e2 '> 0))
		(vp-asr-rr e2 m1)
		(vp-add-rr e2 e1)
		(vp-sub-rr m2 m1)
	(else)
		(vp-mul-cr -1 e2)
		(vp-asr-rr e2 m2)
		(vp-sub-rr m2 m1)
	(endif)

	(jump 'sys_math :r_pack `(,e1 ,m1))

(def-func-end)

(def-method 'sys_math :r_mul)
	;inputs
	;r13 = real (32:32)
	;r14 = real (32:32)
	;outputs
	;r13 = real (32:32)
	;trashes
	;r11-r14

	(vp-def (n1 n2 e1 m1 e2 m2) '(r13 r14 r13 r14 r11 r12))

	(entry 'sys_math :r_mul `(,n1 ,n2))

	(real-unpack n2 e2 m2)
	(real-unpack n1 e1 m1)
	(vp-mul-rr m2 m1)
	(vp-add-rr e2 e1)
	(vp-sub-cr mbits e1)

	(jump 'sys_math :r_pack `(,e1 ,m1))

(def-func-end)

(def-method 'sys_math :r_div)
	;inputs
	;r13 = real (32:32)
	;r14 = real (32:32)
	;outputs
	;r13 = real (32:32)
	;trashes
	;r11-r14

	(vp-def (n1 n2 e1 m1 e2 m2) '(r13 r14 r13 r14 r11 r12))

	(entry 'sys_math :r_div `(,n1 ,n2))

	(real-unpack n2 e2 m2)
	(real-unpack n1 e1 m1)
	(vp-shl-cr (- 63 mbits) m1)
	(vp-sub-rr e2 e1)
	(vp-ext-rr m1 e2)
	(vp-sub-cr (inc (* (- 31 mbits) 2)) e1)
	(vp-div-rrr m2 e2 m1)

	(jump 'sys_math :r_pack `(,e1 ,m1))

(def-func-end)

(def-method 'sys_math :r_mod)
	;inputs
	;r13 = real (32:32)
	;r14 = real (32:32)
	;outputs
	;r13 = real (32:32)
	;trashes
	;r9-r14

	(vp-def (n1 n2 n3 n4) '(r13 r14 r10 r9))

	(entry 'sys_math :r_mod `(,n1 ,n2))

	(assign `(,n1 ,n2) `(,n3 ,n4))
	(call 'sys_math :r_div `(,n1 ,n2) `(,n1))
	(call 'sys_math :r_r2i `(,n1) `(,n1))
	(call 'sys_math :r_i2r `(,n1) `(,n1))
	(call 'sys_math :r_mul `(,n1 ,n4) `(,n1))
	(call 'sys_math :r_sub `(,n3 ,n1) `(,n1))

	(exit 'sys_math :r_mod `(,n1))
	(vp-ret)

(def-func-end)

(def-method 'sys_math :r_frac)
	;inputs
	;r13 = real (32:32)
	;outputs
	;r13 = real (32:32)
	;trashes
	;r10-r14

	(vp-def (n1 n2) '(r13 r10))

	(entry 'sys_math :r_frac `(,n1))

	(assign `(,n1) `(,n2))
	(call 'sys_math :r_r2i `(,n1) `(,n1))
	(call 'sys_math :r_i2r `(,n1) `(,n1))
	(call 'sys_math :r_sub `(,n2 ,n1) `(,n1))
	(vpif (list n2 '< 0))
		; (i2r 1) for the sake of the C++ version
		(call 'sys_math :r_sub `(0x4000000000000001 ,n1) `(,n1))
	(endif)

	(exit 'sys_math :r_frac `(,n1))
	(vp-ret)

(def-func-end)

(def-method 'sys_math :r_floor)
	;inputs
	;r13 = real (32:32)
	;outputs
	;r13 = real (32:32)
	;trashes
	;r12-r14

	(vp-def (n1 n2) '(r13 r10))

	(entry 'sys_math :r_floor `(,n1))

	(call 'sys_math :r_r2i `(,n1) `(,n1))
	(call 'sys_math :r_i2r `(,n1) `(,n1))

	(exit 'sys_math :r_floor `(,n1))
	(vp-ret)

(def-func-end)

(def-method 'sys_math :r_i2r)
	;inputs
	;r14 = num (long)
	;outputs
	;r13 = real (32:32)
	;trashes
	;r12-r14

	(entry 'sys_math :r_i2r '(r14))

	(jump 'sys_math :r_pack `(,mbits r14))

(def-func-end)

(def-method 'sys_math :r_f2r)
	;inputs
	;r14 = num (fixed)
	;outputs
	;r13 = real (32:32)
	;trashes
	;r12-r14

	(entry 'sys_math :r_f2r '(r14))

	(jump 'sys_math :r_pack `(,(- mbits +fp_shift+) r14))

(def-func-end)

(def-method 'sys_math :r_r2i)
	;inputs
	;r13 = real (32:32)
	;outputs
	;r14 = num (long)
	;trashes
	;r12-r14

	(vp-def (n e m) '(r13 r13 r14))

	(entry 'sys_math :r_r2i `(,n))

	(real-unpack n e m)
	(vpif (list e '/= mbits))
		(vpif (list e '< mbits))
			(vp-mul-cr -1 e)
			(vp-add-cr mbits e)
			(vp-asr-rr e m)
		(else)
			(vp-sub-cr mbits e)
			(vp-shl-rr e m)
		(endif)
	(endif)

	(exit 'sys_math :r_r2i `(,m))
	(vp-ret)

(def-func-end)

(def-method 'sys_math :r_r2f)
	;inputs
	;r13 = real (32:32)
	;outputs
	;r14 = num (fixed)
	;trashes
	;r12-r14

	(vp-def (n e m) '(r13 r13 r14))

	(entry 'sys_math :r_r2f `(,n))

	(real-unpack n e m)
	(vpif (list e '/= (- mbits +fp_shift+)))
		(vpif (list e '< (- mbits +fp_shift+)))
			(vp-mul-cr -1 e)
			(vp-add-cr (- mbits +fp_shift+) e)
			(vp-asr-rr e m)
		(else)
			(vp-sub-cr (- mbits +fp_shift+) e)
			(vp-shl-rr e m)
		(endif)
	(endif)

	(exit 'sys_math :r_r2f `(,m))
	(vp-ret)

(def-func-end)
