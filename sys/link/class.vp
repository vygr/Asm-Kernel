(include 'sys/func.inc)
(include 'sys/link/class.inc)
(include 'sys/kernel/class.inc)
(include 'class/array/class.inc)

(def-method 'sys_link 'link)
	;started by kernel for each link

	(struct 'lk_node 'lk_node)
	(ptr 'task_statics 'mail_statics 'params)
	(ptr 'msg 'data 'rx 'tx 'mem 'rx_msg 'tx_msg 'out_msg)
	(pubyte 'pdata)
	(ulong 'handle)
	(uint 'lo_id 'hi_id 'id)

	(push-scope)

	;decrement task count
	;don't count links in load balancing
	(assign (cat {@} (f-path 'sys_mail 'statics)) {mail_statics})
	(assign (cat {@} (f-path 'sys_task 'statics)) {task_statics})
	(assign {task_statics->tk_statics_task_count - 1} {task_statics->tk_statics_task_count})

	;allocate link node on stack and add to link array
	(assign {0, 0} {lk_node.lk_table_array, lk_node.lk_table_array_size})
	(call 'array 'push_back {mail_statics->ml_statics_links_array, &lk_node})

	;read params msg from kernel
	(call 'sys_mail 'mymail nil {params, pdata})

	;init link node cpu id and task count
	(assign {((pdata[5] - 0x30) * 100) + ((pdata[6] - 0x30) * 10) + (pdata[7] - 0x30)} {lo_id})
	(assign {((pdata[9] - 0x30) * 100) + ((pdata[10] - 0x30) * 10) + (pdata[11] - 0x30)} {hi_id})
	(call 'sys_kernel 'id nil {id})
	(vpif {id == lo_id})
		(assign {hi_id} {lk_node.lk_node_cpu_id})
		(assign {lk_buffer_chan_1} {tx})
		(assign {lk_buffer_chan_2} {rx})
	(else)
		(assign {lo_id} {lk_node.lk_node_cpu_id})
		(assign {lk_buffer_chan_2} {tx})
		(assign {lk_buffer_chan_1} {rx})
	(endif)
	(assign {0} {lk_node.lk_node_task_count})

	;send link routing message to neighbor kernel
	(call 'sys_mail 'alloc {kn_msg_route_size} {msg, data})
	(assign {0} {msg->msg_dest.id_mbox})
	(assign {lk_node.lk_node_cpu_id} {msg->msg_dest.id_cpu})
	(assign {kn_call_route} {data->kn_msg_function})
	(assign {0} {data->kn_msg_user})
	(assign {0} {data->kn_msg_reply_id.id_id})
	(assign {id} {data->kn_msg_route_origin})
	(assign {id} {data->kn_msg_flood_via})
	(assign {1} {data->kn_msg_route_hops})
	(call 'sys_mail 'send {msg})

	;open shared memory file
	(call 'sys_pii 'open {pdata, file_open_readwrite} {handle})

	;set size of region
	(call 'sys_pii 'ftruncate {handle, lk_buffer_size})

	;map shared object
	(call 'sys_pii 'mmap {0, lk_buffer_size, mmap_shared, handle, 0} {mem})

	;tx channel, rx channel
	;tx msg, rx msg
	(assign {mem + tx, mem + rx} {tx, rx})
	(assign {&tx->lk_chan_msg0, &rx->lk_chan_msg0} {tx_msg, rx_msg})

	;clear tx channel
	(call 'sys_mem 'clear {tx, lk_chan_size})

	;read and write messages through the shared buffer
	(assign {0} {out_msg})
	(loop-start)
		;exchange task counts
		(assign {task_statics->tk_statics_task_count} {tx->lk_chan_task_count})
		(assign {rx->lk_chan_task_count} {lk_node.lk_node_task_count})

		;check if we need to grab a new message
		(vpifnot {out_msg})
		(vp-label 'more_output)
			;no outgoing message so see if any off chip mail for me
			(vp-def (next node id mid table))
			(assign {mail_statics, lk_node.lk_node_cpu_id, lk_node.lk_node_table.lk_table_array}
				(list next id table))
			(loop-list-forward next ml_statics_offchip_list node next)
				(vp-cpy-ir-ui node (add msg_dest id_cpu) mid)
				(breakif `(,id == ,mid))
				(continueif `(,table == 0))
				(vp-mul-cr lk_route_size mid)
				(vp-add-rr table mid)
				(vp-cpy-ir-ui mid lk_route_hops mid)
			(loop-until `(,mid != 0))
			(vpif `(,next != 0))
				(assign (list node) {out_msg})
				(ln-remove-node node next)
			(endif)
		(endif)

		;if we have a message to send then see if we can send it
		(vpif {out_msg && tx_msg->lk_msg_status == lk_chan_status_ready})
			;copy message data
			(call 'sys_mem 'copy {out_msg + ln_node_size, &tx_msg->lk_msg_stamp + ln_node_size, msg_stamp_size - ln_node_size})
			(call 'sys_mem 'copy {out_msg->msg_parcel_data, &tx_msg->lk_msg_data, (out_msg->msg_length + long_size - 1) & - long_size})

			;busy status
			(assign {lk_chan_status_busy} {tx_msg->lk_msg_status})

			;free message
			(call 'sys_mail 'free {out_msg})
			(assign {0} {out_msg})

			;move on to next msg chan
			(assign {&tx_msg->lk_msg_size} {tx_msg})
			(vpif {tx_msg == &tx->lk_chan_size})
				(assign {&tx->lk_chan_msg0} {tx_msg})
			(endif)
			(vp-jmp 'more_output)
		(endif)

		;check for received message
		(vpif {rx_msg->lk_msg_status == lk_chan_status_busy})
			;is this msg part of a parcel for this cpu
			(vpif {rx_msg->lk_msg_stamp.msg_parcel_length && rx_msg->lk_msg_stamp.msg_dest.id_cpu == id})
				;copy direct from link buffer to parcel !
				(call 'sys_mail 'in {rx_msg})
			(else)
				;allocate msg, copy over data
				(call 'sys_mail 'alloc {rx_msg->lk_msg_stamp.msg_length} {msg, data})
				(call 'sys_mem 'copy {&rx_msg->lk_msg_stamp + ln_node_size, msg + ln_node_size, msg_stamp_size - ln_node_size})
				(call 'sys_mem 'copy {&rx_msg->lk_msg_data, data, rx_msg->lk_msg_stamp.msg_length + long_size - 1) & - long_size})

				;clear status
				(assign {lk_chan_status_ready} {rx_msg->lk_msg_status})

				;send onwards
				(call 'sys_mail 'send {msg})
			(endif)

			;move on to next msg chan
			(assign {&rx_msg->lk_msg_size} {rx_msg})
			(vpif {rx_msg == &rx->lk_chan_size})
				(assign {&rx->lk_chan_msg0} {rx_msg})
			(endif)
		(endif)

		;let other links run
		(call 'sys_task 'yield)

		;are we in a quiet period
		(continueif {rx_msg->lk_msg_status == lk_chan_status_busy})
		(continueif {out_msg && (tx_msg->lk_msg_status == lk_chan_status_ready)})

		;small sleep if so
		(call 'sys_task 'sleep {1000})

		;exit if signaled by kernel
	(loop-until {lk_node.lk_node_cpu_id == 0xffffffff})

	;unmap object
	(call 'sys_pii 'munmap {mem, lk_buffer_size})

	;close it
	(call 'sys_pii 'close {handle})

	;unlink shared object
	(call 'sys_pii 'unlink {pdata})

	;free params msg
	(call 'sys_mail 'free {params})

	;remove from links array and deallocate link node on stack
	(call 'sys_mem 'free {lk_node.lk_node_table})

	;restore task count
	(assign {task_statics->tk_statics_task_count + 1} {task_statics->tk_statics_task_count})
	(pop-scope)
	(return)

(def-func-end)
