(include "sys/func.inc")
(include "sys/link/class.inc")
(include "sys/kernel/class.inc")
(include "class/array/class.inc")
(include "class/num/class.inc")
(include "class/hmap/class.inc")

(def-method 'sys_link :link)
	;started by kernel for each link

	(struct 'lk_node 'lk_node)
	(ptr 'task_statics 'params 'msg 'data 'rx 'tx 'mem 'rx_msg 'tx_msg 'out_msg 'key)
	(pubyte 'pdata)
	(long 'handle)
	(uint 'lo_id 'hi_id 'id)

	(push-scope)

	;decrement task count
	;don't count links in load balancing
	(assign (cat {@} (f-path 'sys_task :statics)) {task_statics})
	(assign {task_statics->tk_statics_task_count - 1} {task_statics->tk_statics_task_count})

	;add link node to link array
	(call 'array :push_back (cat {@} (f-path 'sys_mail :statics) {.ml_statics_links_array, &lk_node}))
	(call 'num :create '(0) {key})

	;read params msg from kernel
	(call 'sys_mail :mymail nil {params, pdata})

	;init link node cpu id and task count
	(assign {((pdata[0] - 0x30) * 100) + ((pdata[1] - 0x30) * 10) + (pdata[2] - 0x30)} {lo_id})
	(assign {((pdata[4] - 0x30) * 100) + ((pdata[5] - 0x30) * 10) + (pdata[6] - 0x30)} {hi_id})
	(call 'sys_kernel :id nil {id})
	(vpif {id = lo_id})
		(assign {hi_id} {lk_node.lk_node_peer_cpu_id})
		(assign {lk_buffer_chan_1} {tx})
		(assign {lk_buffer_chan_2} {rx})
	(else)
		(assign {lo_id} {lk_node.lk_node_peer_cpu_id})
		(assign {lk_buffer_chan_2} {tx})
		(assign {lk_buffer_chan_1} {rx})
	(endif)
	(assign {0} {lk_node.lk_node_task_count})

	;open shared memory file
	(call 'sys_pii :open_shared {pdata, lk_buffer_size} {handle})

	;map shared object
	(call 'sys_pii :mmap {lk_buffer_size, handle, mmap_shared} {mem})

	;send link routing message to neighbor kernel
	(call 'sys_mail :alloc {kn_msg_ping_size} {msg, data})
	(assign {lk_node.lk_node_peer_cpu_id << 32} {msg->msg_dest.id_id})
	(assign {kn_call_route} {data->kn_msg_func})
	(assign {id => data->kn_msg_ping_origin} {data->kn_msg_ping_via})
	(assign {0 => data->kn_msg_ping_session} {data->kn_msg_ping_hops})
	(call 'sys_mail :send {msg})

	;tx channel, rx channel
	;tx msg, rx msg
	(assign {mem + tx, mem + rx} {tx, rx})
	(assign {&tx->lk_chan_msg0, &rx->lk_chan_msg0} {tx_msg, rx_msg})

	;switch to link priority and sleep to
	;let other links join us at this priority
	(call 'sys_task :set_priority '(1))
	(call 'sys_task :sleep '(10000))

	;read and write messages through the shared buffer
	(loop-start)
		;exchange task counts
		(assign {task_statics->tk_statics_task_count} {tx->lk_chan_task_count})
		(assign {rx->lk_chan_task_count} {lk_node.lk_node_task_count})

		;do we have a free out slot
		(vpif {tx_msg->lk_msg_status = lk_chan_status_ready})
			;see if any off chip mail for this link
			(call 'any_out_mail {lk_node.lk_node_peer_cpu_id, key} '(r0))
			(breakif '(r0 = 0))
		(vp-label 'send_msg)
			(assign '(r0) {out_msg})
			(ln-remove-node r0 r1)

			;copy message data
			(call 'sys_mem :copy {out_msg + ln_node_size, &tx_msg->lk_msg_stamp + ln_node_size, msg_stamp_size - ln_node_size})
			(call 'sys_mem :copy {out_msg->msg_frag_data, &tx_msg->lk_msg_data, (out_msg->msg_frag_length + long_size - 1) & - long_size})

			;busy status
			(assign {lk_chan_status_busy} {tx_msg->lk_msg_status})

			;free message
			(call 'sys_mail :free {out_msg})

			;move on to next msg chan
			(assign {&tx_msg->lk_msg_size} {tx_msg})
			(breakif {tx_msg /= &tx->lk_chan_size})
			(assign {&tx->lk_chan_msg0} {tx_msg})
		(endif)

		;check for received message
		(vpif {rx_msg->lk_msg_status = lk_chan_status_busy})
			;is this msg part of a parcel for this cpu
			(vpif {rx_msg->lk_msg_stamp.msg_total_length && rx_msg->lk_msg_stamp.msg_dest.id_cpu = id})
				;copy direct from link buffer to parcel !
				(call 'sys_mail :in {rx_msg})
			(else)
				;allocate msg, copy over data
				(call 'sys_mail :alloc {rx_msg->lk_msg_stamp.msg_frag_length} {msg, data})
				(call 'sys_mem :copy {&rx_msg->lk_msg_stamp + ln_node_size, msg + ln_node_size, msg_stamp_size - ln_node_size})
				(call 'sys_mem :copy {&rx_msg->lk_msg_data, data, rx_msg->lk_msg_stamp.msg_frag_length + long_size - 1) & - long_size})

				;clear status
				(assign {lk_chan_status_ready} {rx_msg->lk_msg_status})

				;send onwards
				(call 'sys_mail :send {msg})
			(endif)

			;move on to next msg chan
			(assign {&rx_msg->lk_msg_size} {rx_msg})
			(breakif {rx_msg /= &rx->lk_chan_size})
			(assign {&rx->lk_chan_msg0} {rx_msg})
		(endif)

		;let other links run
		(call 'sys_task :sleep '(0))

		;check status
		(switch)
		(breakif {rx_msg->lk_msg_status = lk_chan_status_busy})
		(vpcase {tx_msg->lk_msg_status = lk_chan_status_ready})
			;see if any off chip mail for me
			(call 'any_out_mail {lk_node.lk_node_peer_cpu_id, key} '(r0))
			(gotoif '(r0 /= 0) 'send_msg)
		(default)
			;small sleep if nothing to do
			(call 'sys_task :sleep '(1000))
		(endswitch)

		;exit if signaled by kernel
	(loop-until {lk_node.lk_node_peer_cpu_id = 0xffffffff})

	;unmap object
	(call 'sys_pii :munmap {mem, lk_buffer_size, mmap_shared})

	;close it
	(call 'sys_pii :close_shared {pdata, handle})

	;free params msg
	(call 'sys_mail :free {params})

	;remove from links array...
	(call 'num :destroy {key})

	;restore task count
	(assign {task_statics->tk_statics_task_count + 1} {task_statics->tk_statics_task_count})
	(pop-scope)
	(return)

(vp-label 'any_out_mail)
	;inputs
	;r0 = peer cpu id (uint)
	;r1 = key num object (ptr)
	;outputs
	;r0 = 0 if none, else msg node (ptr)

	(vp-def (next node key peer tuple via iter_begin iter_end)
		'(r13 r12 r11 r10 r9))

	(entry `(,peer ,key))

	(f-bind 'sys_mail :statics next)
	(loop-list-forward next ml_statics_offchip_list node next 'exit)
		(vp-cpy-ir-ui node (+ msg_dest id_cpu) via)
		(breakif (list peer '= via))
		(vp-cpy-ri via key num_value)
		(f-bind 'sys_mail :statics tuple)
		(call 'hmap :find `((,tuple ml_statics_routing_map) ,key) `(_ ,tuple _))
		(continueif (list tuple '= 0))
		(call 'array :get_both `((,tuple ptr_size)) `(_ ,iter_begin ,iter_end))
		(vp-add-cr (* 2 long_size) iter_begin)
		(loop-start)
			(vp-cpy-ir iter_begin 0 via)
			(vp-add-cr long_size iter_begin)
			(breakif (list via '= peer) 'exit)
		(loop-until (list iter_begin '= iter_end))
	(loop-end)
	(vpif (list next '/= 0))
		(vp-cpy-rr node next)
	(endif)

	(exit `(,next))
	(vp-ret)

(def-func-end)
