(include "sys/func.inc")
(include "sys/heap/class.inc")
(include "sys/pii/class.inc")

(def-method 'sys_heap :init)
	;inputs
	;r0 = heap (ptr)
	;r1 = cell size (bytes)
	;r2 = num cells (uint)
	;outputs
	;r0 = heap (ptr)
	;r1 = cell size (bytes)
	;trashes
	;r1-r2

	(entry 'sys_heap :init '(r0 r1 r2))

	;align cell to ptr_size
	(vp-add-cr (dec ptr_size) r1)
	(vp-and-cr (neg ptr_size) r1)
	(assign '(r1) '((r0 hp_heap_cellsize)))

	;at least 1 cell !
	(vp-mul-rr r1 r2)
	(vpif '(r1 > r2))
		(vp-cpy-rr r1 r2)
	(endif)

	;round up to next page size
	(vp-add-cr (+ hp_block_size (dec ld_page_size)) r2)
	(vp-and-cr (neg ld_page_size) r2)
	(assign '(r2) '((r0 hp_heap_blocksize)))

	;init lists
	(vp-xor-rr r2 r2)
	(assign '(r2 r2) '((r0 hp_heap_free_flist) (r0 hp_heap_block_flist)))

	(exit 'sys_heap :init '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'sys_heap :deinit)
	;inputs
	;r0 = heap (ptr)
	;outputs
	;r0 = heap (ptr)
	;trashes
	;r1-r5

	(entry 'sys_heap :deinit '(r5))

	(f-bind 'sys_mem :statics r1)
	(vp-cpy-ir r1 sys_mem_statics_total r3)
	(loop-flist r5 hp_heap_block_flist r4 r1)
		(vp-cpy-rr r4 r0)
		(ln-remove-fnode r4 r1)
		(assign '((r0 hp_block_blocksize)) '(r1))
		(vp-sub-rr r1 r3)
		(call 'sys_pii :munmap '(r0 r1 mmap_data))
	(loop-end)
	(f-bind 'sys_mem :statics r1)
	(vp-cpy-ri r3 r1 sys_mem_statics_total)

	(exit 'sys_heap :deinit '(r5))
	(vp-ret)

(def-func-end)

(def-method 'sys_heap :alloc)
	;inputs
	;r0 = heap (ptr)
	;outputs
	;r0 = heap (ptr)
	;r1 = cell (ptr)
	;trashes
	;r1-r2

	(entry 'sys_heap :alloc '(r0))

	(assign '((r0 hp_heap_free_flist)) '(r1))
	(vpif '(r1 /= 0))
	(vp-label 'got_cell)
		(assign '((r1 ln_fnode_next)) '(r2))
		(assign '(r2) '((r0 hp_heap_free_flist)))

		(exit 'sys_heap :alloc '(r0 r1))
		(vp-ret)
	(endif)
	(vp-push r3 r4 r5 r0)
	(if (> *debug_mode* 2)
		(progn
			;guard page allocator
			(assign '((r0 hp_heap_cellsize)) '(r4))
			(vp-add-cr (+ hp_block_size (dec ld_page_size)) r4)
			(vp-and-cr (neg ld_page_size) r4)
			(vp-add-cr ld_page_size r4)
			(call 'sys_pii :mmap '(r4 -1 mmap_data) '(r5))
			(errorif '(r5 = 0) 'error)
			(f-bind 'sys_mem :statics r1)
			(assign '(r4 (r1 sys_mem_statics_total)) '((r5 hp_block_blocksize) r2))
			(vp-add-rr r4 r2)
			(assign '(r2 ld_page_size) '((r1 sys_mem_statics_total) r1))
			(vp-add-rr r5 r4)
			(vp-sub-rr r1 r4)
			(call 'sys_pii :mprotect '(r4 r1 mprotect_none) '(r0))
			(errorif '(r0 /= 0) 'error)
			(assign '((rsp 0)) '(r0))
			(ln-add-fnode r0 hp_heap_block_flist r5 r1)
			(assign '((r0 hp_heap_cellsize) 0) '(r1 r2))
			(vp-sub-rr r1 r4)
			(assign '(r2 r4 1) '((r4 ln_fnode_next) r1 r2)))
		(progn
			;normal allocator
			(assign '((r0 hp_heap_cellsize) (r0 hp_heap_blocksize)) '(r4 r3))
			(call 'sys_pii :mmap '(r3 -1 mmap_data) '(r5))
			(errorif '(r5 = 0) 'error)
			(f-bind 'sys_mem :statics r1)
			(assign '(r3 (r1 sys_mem_statics_total)) '((r5 hp_block_blocksize) r2))
			(vp-add-rr r3 r2)
			(assign '((rsp 0) r2) '(r0 (r1 sys_mem_statics_total)))
			(ln-add-fnode r0 hp_heap_block_flist r5 r2)
			(vp-add-rr r5 r3)
			(vp-lea-i r5 hp_block_size r1)
			(vp-xor-rr r0 r0)
			(vp-xor-rr r2 r2)
			(vp-sub-rr r4 r3)
			(loop-start)
				(assign '(r0) '((r1 ln_fnode_next)))
				(vp-add-cr 1 r2)
				(vp-lea-d r1 r4 r0)
				(breakif '(r0 > r3))
				(vp-swp-rr r0 r1)
			(loop-end)))
	(assign '(r2) '((r5 hp_block_cellcnt)))
	(vp-pop r3 r4 r5 r0)
	(goto 'got_cell)

(errorcases
(vp-label 'error)
	(abort))

(def-func-end)

(def-method 'sys_heap :collect)
	;inputs
	;r0 = heap (ptr)
	;outputs
	;r0 = heap (ptr)
	;trashes
	;r1-r11

	(vp-def (this blk blk_last blk_end cel_cnt cel cel_last cel_size total)
		'(r3 r4 r5 r6 r7 r8 r9 r10 r11))

	(entry 'sys_heap :collect `(,this))

	;current total
	(f-bind 'sys_mem :statics r0)
	(vp-cpy-ir r0 sys_mem_statics_total total)

	;loop over all blocks
	(vp-cpy-ir-ui this hp_heap_cellsize cel_size)
	(loop-flist this hp_heap_block_flist blk blk_last 'block_loop)
		;clear list headers, get count
		(vp-xor-rr r0 r0)
		(vp-cpy-ri r0 blk hp_block_free_flist)
		(vp-cpy-ri r0 blk hp_block_free_flist_tail)
		(vp-cpy-ir-ui blk hp_block_cellcnt cel_cnt)

		;range of this block
		(vp-cpy-ir-ui blk hp_block_blocksize blk_end)
		(vp-add-rr blk blk_end)

		;loop over free cells
		(vp-lea-i this hp_heap_free_flist cel)
		(loop-start)
			(vp-cpy-rr cel cel_last)
			(vp-cpy-ir cel ln_fnode_next cel)
			(continueif (list cel '= 0) 'block_loop)

			;is free cell within this block
			(continueif (list cel '< blk) (list cel '>= blk_end))

			;transfer to blocks free list
			(vp-cpy-rr cel r0)
			(ln-remove-fnode cel cel_last)
			(vp-cpy-ir blk hp_block_free_flist_tail r1)
			(ln-add-fnode blk hp_block_free_flist r0 r2)
			(vpif '(r1 = 0))
				(vp-cpy-ri r0 blk hp_block_free_flist_tail)
			(endif)

			;count down cells, do we have them all
			(vp-sub-cr 1 cel_cnt)
			(continueif (list cel_cnt '/= 0))

			;free the block
			(vp-cpy-rr blk r0)
			(vp-cpy-ir-ui blk hp_block_blocksize r1)
			(ln-remove-fnode blk blk_last)
			(vp-sub-rr r1 total)
			(call 'sys_pii :munmap '(r0 r1 mmap_data))
			(continue 'block_loop)
		(endswitch)
	(endswitch)

	;loop over all blocks
	(loop-flist this hp_heap_block_flist blk blk)
		;splice any free cells onto free list
		(vp-cpy-ir blk hp_block_free_flist r0)
		(continueif '(r0 = 0))
		(vp-cpy-ir blk hp_block_free_flist_tail r1)
		(vp-cpy-ir this hp_heap_free_flist r2)
		(vp-cpy-ri r0 this hp_heap_free_flist)
		(assign '(r2) '((r1 ln_fnode_next)))
	(loop-end)

	;current total
	(f-bind 'sys_mem :statics r0)
	(vp-cpy-ri total r0 sys_mem_statics_total)

	(exit 'sys_heap :collect `(,this))
	(vp-ret)

(def-func-end)
