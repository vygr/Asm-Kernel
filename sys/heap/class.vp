(include 'sys/func.inc)
(include 'sys/heap/class.inc)
(include 'sys/pii/class.inc)

(def-method 'sys_heap 'init)
	;inputs
	;r0 = heap (ptr)
	;r1 = cell size (bytes)
	;r2 = block size (bytes)
	;outputs
	;r0 = heap (ptr)
	;r1 = cell size (bytes)
	;trashes
	;r2-r3

	(entry 'sys_heap 'init '(r0 r1 r2))

	;align cell to ptr_size
	(vp-add-cr (dec ptr_size) r1)
	(vp-and-cr (neg ptr_size) r1)
	(vp-cpy-ri-i r1 r0 hp_heap_cellsize)

	;align block to cell size
	(vp-xor-rr r3 r3)
	(vp-div-rrr-u r1 r3 r2)
	(vp-mul-rr r1 r2)
	(vpif '(r3 != 0))
		(vp-add-rr r1 r2)
	(endif)

	;align block to page size
	(vp-cpy-rr r2 r3)
	(vp-add-cr (dec ld_page_size) r2)
	(vp-and-cr (neg ld_page_size) r2)

	;we need a link on each block so check if we can adjust for that
	(vp-sub-cr ptr_size r2)
	(vpif '(r2 < r3))
		(vp-cpy-rr r3 r2)
	(endif)

	(vp-cpy-ri-i r2 r0 hp_heap_blocksize)
	(vp-xor-rr r2 r2)
	(vp-cpy-ri r2 r0 hp_heap_free_flist)
	(vp-cpy-ri r2 r0 hp_heap_block_flist)
	(exit 'sys_heap 'init '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'sys_heap 'deinit)
	;inputs
	;r0 = heap (ptr)
	;outputs
	;r0 = heap (ptr)
	;trashes
	;r1-r3

	(entry 'sys_heap 'deinit '(r0))
	(vp-cpy-ir-ui r0 hp_heap_blocksize r3)
	(vp-add-cr ln_fnode_size r3)
	(loop-flist r0 hp_heap_block_flist r2 r1)
		(vp-cpy-rr r2 r0)
		(ln-remove-fnode r2 r1)
		(call 'sys_pii 'munmap '(r0 r3))
		(f-bind 'sys_mem 'statics r0)
		(vp-cpy-ir r0 0 r0)
		(vp-sub-rr r3 r0)
		(f-bind 'sys_mem 'statics r1)
		(vp-cpy-ri r0 r1 0)
	(loop-end)
	(exit 'sys_heap 'deinit '(r0))
	(vp-ret)

(def-func-end)

(def-method 'sys_heap 'alloc)
	;inputs
	;r0 = heap (ptr)
	;outputs
	;r0 = heap (ptr)
	;r1 = cell (ptr)
	;trashes
	;r2

	(entry 'sys_heap 'alloc '(r0))
	(loop-start)
		(vp-cpy-ir r0 hp_heap_free_flist r1)
		(vpif '(r1 != 0))
			(vp-cpy-ir r1 ln_fnode_next r2)
			(vp-cpy-ri r2 r0 hp_heap_free_flist)
			(exit 'sys_heap 'alloc '(r0 r1))
			(vp-ret)
		(endif)
		(vp-push r3 r4 r5)
		(if (and debug_mode nil)	;t for guard page allocator
			(progn
				;guard page allocator
				(vp-cpy-ir-ui r0 hp_heap_cellsize r1)
				(vp-add-cr ln_fnode_size r1)
				(vp-add-cr (dec ld_page_size) r1)
				(vp-and-cr (neg ld_page_size) r1)
				(vp-push r1 r0)
				(vp-add-cr ld_page_size r1)
				(vp-push r1)
				(call 'sys_pii 'mmap '(0 r1 mmap_data -1 0) '(r0))
				(errorif '(r0 == 0) 'error)
				(vp-pop r1)
				(f-bind 'sys_mem 'statics r3)
				(vp-cpy-ir r3 0 r2)
				(vp-add-rr r1 r2)
				(vp-cpy-ri r2 r3 0)
				(vp-cpy-rr r0 r3)
				(vp-pop r4 r5)
				(call 'sys_pii 'mprotect '((& r0 r4) ld_page_size mprotect_none) '(r0))
				(errorif '(r0 != 0) 'error)
				(vp-cpy-rr r5 r0)
				(ln-add-fnode r0 hp_heap_block_flist r3 r1)
				(vp-cpy-ir-ui r0 hp_heap_cellsize r1)
				(vp-sub-rr r1 r4)
				(vp-add-rr r3 r4)
				(vp-xor-rr r2 r2)
				(vp-cpy-ri r2 r4 ln_fnode_next))
			(progn
				;normal allocator
				(vp-cpy-ir-ui r0 hp_heap_blocksize r1)
				(vp-add-cr ln_fnode_size r1)
				(vp-push r1 r0)
				(call 'sys_pii 'mmap '(0 r1 mmap_data -1 0) '(r0))
				(errorif '(r0 == 0) 'error)
				(vp-pop r1 r2)
				(f-bind 'sys_mem 'statics r3)
				(vp-cpy-ir r3 0 r4)
				(vp-add-rr r4 r1)
				(vp-cpy-ri r1 r3 0)
				(vp-cpy-rr r0 r1)
				(vp-cpy-rr r2 r0)
				(ln-add-fnode r0 hp_heap_block_flist r1 r2)
				(vp-add-cr ln_fnode_size r1)
				(vp-cpy-ir-ui r0 hp_heap_blocksize r2)
				(vp-cpy-ir-ui r0 hp_heap_cellsize r5)
				(vp-cpy-rr r1 r3)
				(vp-xor-rr r4 r4)
				(vp-add-rr r2 r3)
				(loop-start)
					(vp-lea-d r1 r5 r2)
					(breakif '(r2 > r3))
					(vp-cpy-ri r4 r1 ln_fnode_next)
					(vp-cpy-rr r1 r4)
					(vp-cpy-rr r2 r1)
				(loop-end)))
		(vp-cpy-ri r4 r0 hp_heap_free_flist)
		(vp-pop r3 r4 r5)
	(loop-end)

(errorcases
(vp-label 'error)
	(abort))

(def-func-end)
