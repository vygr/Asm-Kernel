(include "sys/func.inc")
(include "sys/kernel/class.inc")
(include "sys/str/class.inc")
(include "class/list/class.inc")
(include "class/str/class.inc")

(def-method 'sys_task :statics)
	;info
	;task statics data

	(times tk_statics_size (vp-byte 0))
(def-func-end)

(def-method 'sys_task :statics_init)
	;info
	;init task statics

	;init timer/task lists
	(f-bind 'sys_task :statics r0)
	(vp-add-cr tk_statics_timer_list r0)
	(vp-lea-i r0 (* (inc num_task_lists) lh_list_size) r1)
	(loop-start)
		(lh-init r0 r2)
		(vp-add-cr lh_list_size r0)
	(loop-until '(r0 = r1))
	(vp-ret)

(def-func-end)

(def-method 'sys_task :callback)
	;inputs
	;r0 = user data address (ptr)
	;r1 = callback address (ptr)
	;trashes
	;r0-r14

	;test if we are the kernel task
	(f-bind 'sys_task :statics r2)
	(assign '((r2 tk_statics_current_tcb) (r2 tk_statics_kernel_tcb)) '(r3 r2))
	(vpif '(r2 = r3))
		;yes we can just do local call
		(vp-jmp-r r1)
	(endif)

	(ptr 'usr 'addr 'msg 'data 'mbox_addr)
	(uint 'id 'mbox_id)

	(push-scope)
	(entry 'sys_task :callback {usr, addr})

	;alloc temp mailbox
	(call 'sys_mail :alloc_mbox nil {mbox_id, mbox_addr})

	;allocate mail message
	(call 'sys_mail :alloc {kn_msg_callback_size} {msg, data})

	;fill in destination, reply and function
	(call 'sys_kernel :id nil {id})
	(assign {0} {msg->msg_dest.id_mbox})
	(assign {id => msg->msg_dest.id_cpu} {data->kn_msg_reply_id.id_cpu})
	(assign {mbox_id} {data->kn_msg_reply_id.id_mbox})
	(assign {kn_call_callback} {data->kn_msg_func})
	(assign {usr} {data->kn_msg_user})
	(assign {addr} {data->kn_msg_callback_addr})

	;send mail to kernel then wait for reply
	(call 'sys_mail :send {msg})
	(call 'sys_mail :read {mbox_addr} {msg, _})

	;free reply mail and temp mailbox
	(call 'sys_mail :free_mbox {mbox_id})
	(jump 'sys_mail :free {msg})

	(pop-scope-syms)

(def-func-end)

(def-method 'sys_task :count)
	;outputs
	;r0 = task count (uint)
	;trashes
	;r0

	(f-bind 'sys_task :statics r0)
	(exit 'sys_task :count '((r0 tk_statics_task_count)))
	(vp-ret)

(def-func-end)

(def-method 'sys_task :mailbox)
	;outputs
	;r0 = current task mailbox id (id)
	;trashes
	;r0

	(f-bind 'sys_task :statics r0)
	(assign '((r0 tk_statics_cpu_id) (r0 tk_statics_current_tcb)) '(r1 r0))
	(vp-shl-cr 32 r1)
	(assign '((r0 tk_node_mbox_id)) '(r0))
	(vp-add-rr r1 r0)

	(exit 'sys_task :mailbox '(r0))
	(vp-ret)

(def-func-end)

(def-method 'sys_task :restore)
	;trashes
	;r0-r14
	;info
	;restore next ready task

	(f-bind 'sys_task :statics r2)
	(assign '((& r2 tk_statics_task_lists)) '(r1))
	(loop-start)
		(lh-get-head r1 0 r0)
		(ln-get-succ r0 0 r3)
		(breakif '(r3 /= 0))
		(vp-add-cr lh_list_size r1)
	(loop-end)
	(assign '(r0 (r0 tk_node_stack)) '((r2 tk_statics_current_tcb) rsp))

	;pop task state
	(tk-load-state)
	(vp-ret)

(def-func-end)

(def-method 'sys_task :defer)
	;inputs
	;r0 = task control node to defer to (ptr)
	;trashes
	;none
	;info
	;restore task

	;push task state
	(tk-save-state)

	;save stack pointer
	(f-bind 'sys_task :statics r1)
	(assign '((r1 tk_statics_current_tcb)) '(r2))
	(vp-cpy-ri rsp r2 tk_node_stack)
	(assign '(r0 (r0 tk_node_stack)) '((r1 tk_statics_current_tcb) rsp))

	;pop task state
	(tk-load-state)
	(vp-ret)

(def-func-end)

(def-method 'sys_task :suspend)
	;trashes
	;none
	;info
	;suspend current task, switch to next task

	;push task state
	(tk-save-state)

	;save stack pointer
	(f-bind 'sys_task :statics r0)
	(assign '((r0 tk_statics_current_tcb)) '(r0))
	(vp-cpy-ri rsp r0 tk_node_stack)

	;remove task control block, and flag as suspended
	(vp-cpy-rr r0 r2)
	(vp-xor-rr r1 r1)
	(ln-remove-node r2 r3)
	(ln-set-succ r0 0 r1)

	;restore next task
	(jump 'sys_task :restore)

(def-func-end)

(def-method 'sys_task :resume)
	;inputs
	;r0 = task control node to resume (ptr)
	;outputs
	;r0 = task control node to resume (ptr)
	;trashes
	;r1-r2

	(entry 'sys_task :resume '(r0))

	;is it in suspended state ?
	(ln-get-succ r0 0 r1)
	(vpif '(r1 = 0))
		;add to task list
		(assign '((r0 tk_node_priority)) '(r2))
		(f-bind 'sys_task :statics r1)
		(vp-mul-cr lh_list_size r2)
		(vp-add-cr tk_statics_task_lists r1)
		(vp-add-rr r2 r1)
		(lh-add-at-tail r1 r0 r2)
	(endif)

	(exit 'sys_task :resume '(r0))
	(vp-ret)

(def-func-end)

(def-method 'sys_task :sleep)
	;inputs
	;r0 = time delay in usec (ulong)
	;trashes
	;none
	;info
	;0 for yield

	(entry 'sys_task :sleep '(r0))

	;push task state
	(tk-save-state)

	;save stack pointer
	(f-bind 'sys_task :statics r4)
	(assign '((r4 tk_statics_current_tcb)) '(r1))
	(vp-cpy-ri rsp r1 tk_node_stack)

	;remove task control block
	(vp-cpy-rr r1 r2)
	(ln-remove-node r2 r3)

	;just yield ?
	(vpif '(r0 = 0))
		;move task to end of its list
		(lh-add-at-tail r2 r1 r0)
	(else)
		;calculate wake time
		(vp-cpy-rr r0 r2)
		(call 'sys_pii :time nil '(r0))
		(vp-add-rr r2 r0)
		(assign '(r0) '((r1 tk_node_time)))

		;insert into timer list
		(loop-list-forward r4 tk_statics_timer_list r4 r2)
			(assign '((r4 tk_node_time)) '(r3))
		(loop-until '(r0 < r3))
		(ln-add-node-before r4 r1 r0)
	(endif)

	;restore next task
	(jump 'sys_task :restore)

(def-func-end)

(def-method 'sys_task :set_priority)
	;inputs
	;r0 = priority (uint)
	;trashes
	;r0-r4

	(entry 'sys_task :set_priority '(r0))

	(f-bind 'sys_task :statics r1)
	(assign '((r1 tk_statics_current_tcb)) '(r2))
	(assign '(r0) '((r2 tk_node_priority)))

	;remove task control block
	(vp-cpy-rr r2 r3)
	(ln-remove-node r3 r4)

	;add to task new list
	(vp-mul-cr lh_list_size r0)
	(vp-add-cr tk_statics_task_lists r1)
	(vp-add-rr r0 r1)
	(lh-add-at-head r1 r2 r3)
	(vp-ret)

(def-func-end)

(def-method 'sys_task :start)
	;inputs
	;r0 = new task func pointer (ptr)
	;outputs
	;r0 = new task control block (ptr)
	;r1 = new task mailbox id (id)
	;r2 = new task mailbox address (ptr)
	;trashes
	;r0-r14

	(ptr 'func 'task_statics 'tcb)
	(ulong 'tcb_size)

	(push-scope)
	(entry 'sys_task :start {func})

	;increment task count
	(assign (cat {@} (f-path 'sys_task :statics)) {task_statics})
	(assign {task_statics->tk_statics_task_count + 1} {task_statics->tk_statics_task_count})

	;create new task control block and task
	(call 'sys_mem :alloc {ushort(func - ubyte(func - byte_size) - short_size) + tk_node_size} {tcb, tcb_size})
(errorcases
	(call 'sys_mem :fill {tcb, tcb_size, 0}))

	;alloc task mailbox and tls
	(call 'sys_mail :alloc_mbox nil {tcb->tk_node_mbox_id, tcb->tk_node_mbox_addr})
	(call 'array :create nil {tcb->tk_node_tls})

	;init task control block stack, pc and stop address's
	(assign {tcb, tcb + tcb_size, 0, num_task_lists - 1, func} '(r0 r1 r2 r3 r4))
	(ln-set-succ r0 0 r2)
	(assign '(r3) '((r0 tk_node_priority)))
	(stack-init)
	(assign '(r1) {tcb->tk_node_stack})

	;resume new task
	(call 'sys_task :resume {tcb})

	;return tcb and mailbox info
	(exit 'sys_task :start {tcb, tcb->tk_node_mbox_id + (task_statics->tk_statics_cpu_id << 32), tcb->tk_node_mbox_addr})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_task :stop)
	;info
	;stop current task, switch to next task

	(ptr 'task_statics 'tcb)
(errorcases
	(pptr 'stack 'stack_end))

	(push-scope)

	;decrement task count
	(assign (cat {@} (f-path 'sys_task :statics)) {task_statics})
	(assign {task_statics->tk_statics_task_count - 1} {task_statics->tk_statics_task_count})

	;free task mailbox and tls
	(assign {task_statics->tk_statics_current_tcb} {tcb})
	(call 'sys_mail :free_mbox {tcb->tk_node_mbox_id})
	(call 'array :deref {tcb->tk_node_tls})

	;remove task control block
	(vp-def (tcb next_tcb))
	(assign {tcb} (list tcb))
	(ln-remove-node tcb next_tcb)

(errorcases
	;test stack space canary
	(assign {&tcb->tk_node_size} {stack})
	(assign {stack + 1024} {stack_end})
	(loop-while {stack /= stack_end})
		(vpif {*stack /= 0})
			(abort "Stack overrun !")
		(endif)
		(assign {stack + ptr_size} {stack})
	(loop-end))

	;free our task control block
	(call 'sys_mem :free {tcb})
	(jump 'sys_task :restore)

	(pop-scope-syms)

(def-func-end)

(def-method 'sys_task :tcb)
	;outputs
	;r0 = current task tcb (ptr)
	;trashes
	;r0

	(f-bind 'sys_task :statics r0)
	(exit 'sys_task :tcb '((r0 tk_statics_current_tcb)))
	(vp-ret)

(def-func-end)

(def-method 'sys_task :timer)
	;outputs
	;r0 = current time (ulong)
	;trashes
	;r0-r14
	;info
	;resume tasks ready to run

	(f-bind 'sys_task :statics r3)
	(call 'sys_pii :time nil '(r6))
	(loop-list-forward r3 tk_statics_timer_list r0 r7)
		(assign '((r0 tk_node_time)) '(r1))
		(breakif '(r1 > r6))

		;remove from timer list and resume
		(vp-cpy-rr r0 r5)
		(vp-xor-rr r1 r1)
		(ln-remove-node r5 r4)
		(ln-set-succ r0 0 r1)
		(call 'sys_task :resume '(r0))
	(loop-end)

	(exit 'sys_task :timer '(r6))
	(vp-ret)

(def-func-end)

;;;;;;;;;;;;;;;;;;;;;;
; single child process
;;;;;;;;;;;;;;;;;;;;;;

(def-method 'sys_task :open_child)
	;inputs
	;r0 = name c string (pubyte)
	;r1 = spawn type (uint)
	;outputs
	;r0 = mailbox ID (id)
	;trashes
	;r0-r14

	(ptr 'name 'msg 'data 'mailbox)
	(uint 'type 'mbox_id 'len)
	(struct 'id 'id)

	;save task info
	(push-scope)
	(entry 'sys_task :open_child {name, type})

	;alloc temp mailbox
	(call 'sys_mail :alloc_mbox nil {mbox_id, mailbox})

	;start task
	(call 'sys_str :length {name} {_, len})
	(call 'sys_mail :alloc {len + 1 + kn_msg_open_size} {msg, data})
	(call 'sys_kernel :id nil {msg->msg_dest.id_cpu})
	(assign {0} {msg->msg_dest.id_mbox})
	(assign {msg->msg_dest.id_cpu} {data->kn_msg_reply_id.id_cpu})
	(assign {mbox_id} {data->kn_msg_reply_id.id_mbox})
	(assign {type} {data->kn_msg_func})
	(call 'sys_mem :copy {name, &data->kn_msg_open_pathname, len + 1})
	(call 'sys_mail :send {msg})

	;wait for reply
	(call 'sys_mail :read {mailbox} {msg, data})
	(assign {data->kn_msg_reply_id.id_id} {id.id_id})
	(call 'sys_mail :free {msg})

	;free temp mailbox
	(call 'sys_mail :free_mbox {mbox_id})

	;return ids array
	(exit 'sys_task :open_child {id.id_id})
	(pop-scope)
	(return)

(def-func-end)
