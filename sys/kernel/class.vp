(include "sys/func.inc")
(include "sys/link/class.inc")
(include "sys/load/class.inc")
(include "sys/kernel/class.inc")
(include "sys/str/class.inc")
(include "sys/pii/class.inc")
(include "gui/gui/class.inc")
(include "class/sym/class.inc")
(include "class/num/class.inc")
(include "class/hmap/class.inc")
(include "class/pair/class.inc")
(include "class/lisp/class.inc")

;;;;;;;;;;;;;
; kernel task
;;;;;;;;;;;;;

(def-method 'sys_kernel :kernel)
	;inputs
	;r0 = argv pointer (pptr)
	;info
	;loader is already initialized when we get here !

	(union
		(ptr 'argv)
		(ptr 'link))
	(ptr 'task_statics 'mail_statics 'mbox_addr 'msg 'data 'tuple 'key)
	(pptr 'iter_begin 'iter_end)
	(uint 'id 'best_cnt 'best_id 'mbox_id)

	(push-scope)
	(entry {argv})

	;init allocator
	(call 'sys_mem :statics_init)

	;init symbols
	(call 'sym :statics_init)

	;init tasks
	(call 'sys_task :statics_init)

	;init gui
	(call 'gui :statics_init)

	;init mailer mailbox list
	(call 'sys_mail :statics_init)

	;start kernel task (get's mailbox id of 0 !)
	(assign (cat {@} (f-path 'sys_task :statics)) {task_statics})
	(assign (cat {@} (f-path 'sys_mail :statics)) {mail_statics})
	(call 'sys_task :start {$fn_entry} {task_statics->tk_statics_kernel_tcb, mbox_id, mbox_addr})
	(assign {task_statics->tk_statics_kernel_tcb} {task_statics->tk_statics_current_tcb})

	;init mailer
	(call 'sys_mail :statics_init1)

	;process command options
	(call 'opts {argv})

	;at least myself in the routing map !
 	(call 'sys_kernel :id nil {id})
 	(call 'num :create {id} {key})
	(call 'array :create nil {tuple})
	(call 'array :push_back2 {tuple, -1, -1})
	(call 'hmap :insert {mail_statics->ml_statics_routing_map, key, tuple})
	(call 'num :deref {key})
	(call 'array :deref {tuple})

;;;;;;;;;;;;;;;;;;;;;;;
; main kernel task loop
;;;;;;;;;;;;;;;;;;;;;;;

	;loop till no other tasks running
	(call 'sys_task :set_priority '(0))
	(loop-start)
		;service all kernel mail
		(loop-start 'kernel_loop)
			;check if any mail
			(assign {mbox_addr} '(r0))
			(lh-is-empty r0 mbox_list r1)
			(breakif '(r1 = 0))
			(call 'sys_mail :read '(r0) {msg, data})
			;which kernel call number
			(assign {data->kn_msg_func} '(r0))
			(switch)
			(vpcase '(r0 = kn_call_open))
			(vp-label 'run_here)
				;fill in reply ID, user field is left alone !
				(assign {data->kn_msg_reply_id.id_id} {msg->msg_dest.id_id})
				(call 'opt_run {&data->kn_msg_open_pathname} {data->kn_msg_reply_id.id_id})
				(assign {kn_msg_reply_size} {msg->msg_frag_length})
				(call 'sys_mail :send {msg})
				(break)
			(vpcase '(r0 = kn_call_child))
				;find best cpu to run task
				(assign {task_statics->tk_statics_task_count, id} {best_cnt, best_id})
				(call 'array :get_both {mail_statics->ml_statics_links_array} {_, iter_begin, iter_end})
				(loop-while {iter_begin /= iter_end})
					(assign {*iter_begin} {link})
					(vpif {link->lk_node_task_count < best_cnt})
						(assign {link->lk_node_task_count} {best_cnt})
						(assign {link->lk_node_peer_cpu_id} {best_id})
					(endif)
					(assign {iter_begin + ptr_size} {iter_begin})
				(loop-end)
				(gotoif {best_id = id} 'run_here)
				;send to better kernel
				(assign {best_id} {msg->msg_dest.id_cpu})
				(call 'sys_mail :send {msg})
				(break)
			(vpcase '(r0 = kn_call_ping))
				;new services ping
				(ptr 'session 'set)
				(union
					(ptr 'bucket)
					(ptr 'services 'entries))
				(push-scope)
				;find/create the service tuple for the origin
				(call 'num :create {data->kn_msg_ping_origin} {key})
				(call 'hmap :find {mail_statics->ml_statics_service_map, key} {_, tuple, bucket})
				(vpifnot {tuple})
					(call 'list :create nil {tuple})
					(call 'num :create {0} {session})
					(call 'hset :create `((@ ,(f-path 'str :same)) 1) {set})
					(call 'list :push_back2 {tuple, session, set})
					(call 'pair :create {key, tuple} {key})
					(call 'list :push_back {bucket, key})
				(else)
					(assign {(*(pptr tuple))->pair_second} {tuple})
					(call 'num :destroy {key})
				(endif)
				;add service entries for the origin ?
				(call 'list :get_first {tuple} {_, session})
				(vpif {data->kn_msg_ping_session > session->num_value})
					;new session
					(assign {data->kn_msg_ping_session} {session->num_value})
					(call 'str :create_from_buffer {&data->kn_msg_ping_services, msg->msg_frag_length - kn_msg_ping_services} {services})
					(call 'str :split_char {services, char_lf} {_, entries})
					(call 'str :destroy {services})
					(call 'list :get_both {entries} {_, iter_begin, iter_end})
					(call 'list :get_second {tuple} {_, set})
					(call 'hset :clear {set})
					(loop-while {iter_begin /= iter_end})
						(call 'hset :insert {set, *iter_begin})
						(assign {iter_begin + ptr_size} {iter_begin})
					(loop-end)
					(call 'list :destroy {entries})
					;flood to neibours
					(call 'flood_fill {mail_statics, msg, data, id})
				(endif)
				(pop-scope)
				(goto 'drop_msg)
			(vpcase '(r0 = kn_call_route))
				;new routing ping
				(ptr 'bucket)
				(ulong 'session 'hops)
				(push-scope)
				;find/create the routing tuple for the origin
				(call 'num :create {data->kn_msg_ping_origin} {key})
				(call 'hmap :find {mail_statics->ml_statics_routing_map, key} {_, tuple, bucket})
				(vpifnot {tuple})
					(call 'array :create nil {tuple})
					(call 'array :push_back2 {tuple, -1, -1})
					(call 'pair :create {key, tuple} {key})
					(call 'list :push_back {bucket, key})
				(else)
					(assign {(*(pptr tuple))->pair_second} {tuple})
					(call 'num :destroy {key})
				(endif)
				;update routing entries for the origin ?
				(call 'array :get_first2 {tuple} {_, session, hops})
				(switch)
				(breakif {data->kn_msg_ping_session < session})
				(vpcase {data->kn_msg_ping_session > session})
					;new routing session, clear vias, update session and hops
					(call 'array :set_length {tuple, 0})
					(call 'array :push_back2 {tuple, data->kn_msg_ping_session, data->kn_msg_ping_hops})
					(goto 'new_via)
				(vpcase {data->kn_msg_ping_hops < hops})
					;better route, clear vias, update hops
					(call 'array :set_length {tuple, 1})
					(call 'array :push_back {tuple, data->kn_msg_ping_hops})
					(goto 'new_via)
				(vpcase {data->kn_msg_ping_hops = hops})
				(vp-label 'new_via)
					;equal route, push via, flood to neibours
					(call 'array :push_back {tuple, data->kn_msg_ping_via})
					(call 'flood_fill {mail_statics, msg, data, id})
				(endswitch)
				(pop-scope)
			(vp-label 'drop_msg)
				(call 'sys_mail :free {msg})
				(break)
			(vpcase '(r0 = kn_call_callback))
				;call callback with this thread/stack
				(assign {data->kn_msg_user, data->kn_msg_callback_addr} '(r0 r1))
				(vp-call-r r1)
				;reply to originator
				(assign {data->kn_msg_reply_id.id_id} {msg->msg_dest.id_id})
				(call 'sys_mail :send {msg})
			(endswitch)
		(loop-end)

		;resume any ready tasks on timer list
		(call 'sys_task :timer nil '(r0))

		;find next task we could defer to
		(assign {task_statics} '(r3))
		(assign '((& r3 (+ tk_statics_task_lists lh_list_size))) '(r1))
		(assign '((& r3 (+ tk_statics_task_lists (* num_task_lists lh_list_size)))) '(r2))
		(loop-start)
			(lh-get-head r1 0 r4)
			(ln-get-succ r4 0 r5)
			(breakif '(r5 /= 0))
			(vp-add-cr lh_list_size r1)
		(loop-until '(r1 = r2))

		;defer to task if available
		(vpif '(r5 /= 0))
			(call 'sys_task :defer '(r4))
			(continue 'kernel_loop)
		(endif)

		;no other task ready to run so
		;exit if no task waiting for timer
		(lh-get-head r3 tk_statics_timer_list r2)
		(ln-get-succ r2 0 r1)
		(breakif '(r1 = 0))

		;may as well go to sleep till next wake time then
		(vp-swp-rr r0 r2)
		(assign '((r0 tk_node_time)) '(r0))
		(vp-sub-rr r2 r0)
		(vp-cpy-cr 1000 r3)
		(vp-xor-rr r2 r2)
		(vp-div-rrr r3 r2 r0)
		(vpif '(r0 < 1))
			(vp-cpy-cr 1 r0)
		(endif)
		(host-call 'host :sdl_delay '(r0))
	(loop-end)

	;deinit allocator
	(call 'sys_mem :statics_deinit)

	;exit back to load init
	(pop-scope)
	(return)

(vp-label 'flood_fill)
	;inputs
	;r0 = mail statics
	;r1 = flood msg
	;r2 = flood data
	;r3 = kernel id
	;trashes
	;r0-r11

	(entry '(r0 r7 r8 r3))

	(assign '((r8 kn_msg_ping_hops) (r8 kn_msg_ping_via)) '(r10 r9))
	(vp-add-cr 1 r10)
	(assign '(r3 r10) '((r8 kn_msg_ping_via) (r8 kn_msg_ping_hops)))
	(call 'array :get_both '((r0 ml_statics_links_array)) '(_ r10 r11))
	(loop-while '(r10 /= r11))
		(vp-cpy-ir r10 0 r6)
		(vp-add-cr ptr_size r10)
		(assign '((r6 lk_node_peer_cpu_id)) '(r6))
		(continueif '(r6 = r9))
		(call 'sys_mail :alloc_obj '((r7 msg_obj) r8 (r7 msg_frag_length)) '(r0))
		(vp-shl-cr 32 r6)
		(vp-cpy-ri r6 r0 (+ msg_dest id_id))
		(call 'sys_mail :send '(r0))
	(loop-end)
	(vp-ret)

(vp-label 'opts)
	;inputs
	;r0 = argv array (pptr)
	;trashes
	;r0-r14
	;info
	;process command options

	(pptr 'argv)
	(ptr 'arg)
	(plong 'table)
	(long 'offset)
	(int 'len)

	(push-scope)
	(entry {argv})

	(loop-start)
		(assign {*argv} {arg})
		(breakifnot {arg})
		(assign {argv + ptr_size} {argv})
		(assign {$options_table} {table})
		(loop-start 'next_arg)
			(assign {*table} {offset})
			(breakifnot {offset})
			(assign {table + ptr_size} {table})
			(call 'sys_str :compare {table, arg})
			(vpif `(,(method-output 'sys_str :compare 0) = 0))
				(assign {*argv} {arg})
				(breakifnot {arg} 'next_arg)
				(assign {arg, $options_table + offset} '(r0 r1))
				(vp-call-r r1)
				(break 'next_arg)
			(endif)
			(call 'sys_str :length {table} {_, len})
			(assign {(table + len + ptr_size) & - ptr_size} {table})
		(loop-end)
	(loop-end)

	(pop-scope)
	(return)

(vp-label 'opt_cpu)
	;inputs
	;r0 = argv pointer (pubyte)
	;trashes
	;r0-r4

	(entry '(r0))

	;set cpu ID
	(call 'sys_str :to_long '(r0 10) '(r0 _))
	(f-bind 'sys_task :statics r1)
	(assign '(r0) '((r1 tk_statics_cpu_id)))
	(vp-ret)

(vp-label 'opt_run)
	;inputs
	;r0 = argv pointer (pubyte)
	;outputs
	;r0 = 0 if error, else id (ulong)
	;trashes
	;r0-r14

	(ptr 'arg 'func 'msg)
	(ulong 'id)
	(uint 'length)

	(push-scope)
	(entry {arg})

	;is this a lisp file
	(assign {0} {id})
	(call 'sys_str :length {arg} {_, length})
	(vpif {length >= 5})
		(call 'sys_str :compare {arg + length - 5, ".lisp"} {length})
	(endif)
	(vpifnot {length})
		;yup it's a .lisp file, check it exists
		(call 'sys_pii :stat (cat {arg, @} (f-path 'sys_load :statics) {.ld_statics_stat_buffer}) {func})
		(breakif {func})
		;start lisp run task and send args
		(call 'sys_task :start `((@ ,(f-path 'lisp :run))) {_, id, _})
		(call 'str :create_from_cstr {arg} {arg})
		(call 'sys_mail :alloc_obj {arg, &arg->str_data, arg->str_length} {msg})
		(assign {id} {msg->msg_dest.id_id})
		(call 'sys_mail :send {msg})
		(call 'str :deref {arg})
	(else)
		;open as raw task and return mailbox ID
		(call 'sys_load :bind {arg} {func})
		(breakifnot {func})
		;start this function as task
		(call 'sys_task :start {func} {_, id, _})
	(endif)

	(exit {id})
	(pop-scope)
	(return)

(vp-label 'opt_link)
	;inputs
	;r0 = argv pointer (pubyte)
	;trashes
	;r0-r9

	(entry '(r8))

	;start link
	(call 'sys_task :start `((@ ,(f-path 'sys_link :link))) '(_ r9 _))

	;params message
	(call 'sys_mail :alloc '(8) '(r0 r1))
	(vp-cpy-ri r9 r0 (+ msg_dest id_id))
	(vp-cpy-rr r0 r3)
	(call 'sys_str :copy '(r8 r1))

	;send to link task
	(call 'sys_mail :send '(r3))
	(vp-ret)

	(vp-align ptr_size)
(vp-label 'options_table)
	(vp-long `(- ,(label-sym 'opt_cpu) ,(label-sym 'options_table)))
		(vp-string "-cpu") (vp-byte 0)
		(vp-align ptr_size)
	(vp-long `(- ,(label-sym 'opt_run) ,(label-sym 'options_table)))
		(vp-string "-run") (vp-byte 0)
		(vp-align ptr_size)
	(vp-long `(- ,(label-sym 'opt_link) ,(label-sym 'options_table)))
		(vp-string "-l") (vp-byte 0)
		(vp-align ptr_size)
	(vp-long 0)

(def-func-end)

(def-method 'sys_kernel :id)
	;outputs
	;r0 = cpu ID (uint)
	;trashes
	;r0

	(f-bind 'sys_task :statics r0)
	(exit 'sys_kernel :id '((r0 tk_statics_cpu_id)))
	(vp-ret)

(def-func-end)
