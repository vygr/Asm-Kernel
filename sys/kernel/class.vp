(include 'sys/func.inc)
(include 'sys/link/class.inc)
(include 'sys/load/class.inc)
(include 'sys/kernel/class.inc)
(include 'sys/string/class.inc)
(include 'class/vector/class.inc)
(include 'sys/pii/class.inc)
(include 'gui/gui/class.inc)

;;;;;;;;;;;;;
; kernel task
;;;;;;;;;;;;;

(def-method 'sys_kernel 'kernel)
	;inputs
	;r0 = argv pointer (pptr)
	;info
	;loader is already initialized when we get here !

	(union
		'(ptr 'argv)
		'(ptr 'link 'mbox_addr))
	(ptr 'task_statics 'mail_statics 'load_statics 'func)
	(ptr 'msg 'data 'new_msg 'pathname)
	(pptr 'iter_begin 'iter_end)
	(ulong 'service)
	(struct 'routes 'lk_table)
	(uint 'id 'num 'best_cnt 'best_id 'route_index 'hops 'new_hops 'length 'mbox_id)

	(push-scope)
	(entry {argv})

	;init allocator
	(call 'sys_mem 'init)

	;init tasks
	(call 'sys_task 'init)

	;init gui
	(call 'gui 'init)

	;init mailer mailbox vector
	(call 'sys_mail 'init)

	;start kernel task (get's mailbox id of 0 !)
	(assign (cat {@} (f-path 'sys_load 'statics)) {load_statics})
	(assign (cat {@} (f-path 'sys_task 'statics)) {task_statics})
	(assign (cat {@} (f-path 'sys_mail 'statics)) {mail_statics})
	(call 'sys_task 'start {$func_entry} {task_statics->tk_statics_kernel_tcb, mbox_id, mbox_addr})

	;init mailer
	(call 'sys_mail 'init1)

	;process command options
	(call 'sys_kernel 'opts {argv})

	;fill in num cpu's with at least mine + 1
	(call 'sys_kernel 'id nil {id})
	(assign {id + 1} {task_statics->tk_statics_cpu_total})

	;allocate for kernel routing table
	(assign {0, 0} {routes.lk_table_array, routes.lk_table_array_size})

;;;;;;;;;;;;;;;;;;;;;;;
; main kernel task loop
;;;;;;;;;;;;;;;;;;;;;;;

	;loop till no other tasks running
	(loop-start)
		;allow all other tasks to run
		(call 'sys_task 'yield)

		;service all kernel mail
		(loop-start)
			;check if any mail
			(call 'sys_mail 'try_read {mbox_addr} {msg, data})
			(breakifnot {msg})

			;(switch) on kernel call number
			(assign {data->kn_msg_function} {num})
			(switch)
			(case {num == kn_call_open})
			(vp-label 'run_here)
				;fill in reply ID, user field is left alone !
				(assign {data->kn_msg_reply_id.id_id} {msg->msg_dest.id_id})
				(assign {0} {data->kn_msg_reply_id.id_id})

				;is this a lisp file
				(call 'sys_string 'length {&data->kn_msg_open_pathname} {_, length})
				(vpif {length >= 5})
					(call 'sys_string 'compare {&data->kn_msg_open_pathname + length - 5, ".lisp"} {length})
				(endif)
				(vpifnot {length})
					;yup it's a .lisp file, check it exists
					(call 'sys_pii 'stat {&data->kn_msg_open_pathname, load_statics->ld_statics_stat_buffer} {func})
					(breakif {func})
					;start lisp run task and send args
					(call 'sys_task 'start {@class/lisp/run} {_, data->kn_msg_reply_id.id_id, _})
					(call 'string 'create_from_cstr {&data->kn_msg_open_pathname} {pathname})
					(call 'sys_mail 'alloc_obj {pathname, &pathname->string_data, pathname->string_length} {new_msg})
					(assign {data->kn_msg_reply_id.id_id} {new_msg->msg_dest.id_id})
					(call 'sys_mail 'send {new_msg})
					(call 'string 'deref {pathname})
				(else)
					;open as raw task and return mailbox ID
					(call 'sys_load 'bind {&data->kn_msg_open_pathname} {func})
					(breakifnot {func})
					;start this function as task
					(call 'sys_task 'start {func} {_, data->kn_msg_reply_id.id_id, _})
				(endif)
				(call 'sys_mail 'send {msg})
				(break)
			(case {num == kn_call_child})
				;find best cpu to run task
				(assign {task_statics->tk_statics_task_count, id} {best_cnt, best_id})
				(call 'array 'get_iters {mail_statics->ml_statics_links_array} {_, iter_begin, iter_end})
				(loop-while {iter_begin != iter_end})
					(assign {*iter_begin} {link})
					(vpif {link->lk_node_task_count < best_cnt})
						(assign {link->lk_node_task_count} {best_cnt})
						(assign {link->lk_node_cpu_id} {best_id})
					(endif)
					(assign {iter_begin + ptr_size} {iter_begin})
				(loop-end)
				(gotoif {best_id == id} 'run_here)

				;send to better kernel
				(assign {best_id} {msg->msg_dest.id_cpu})
				(call 'sys_mail 'send {msg})
				(break)
			(case {num == kn_call_declare})
				;declare service if not found
				(call 'sys_mail 'enquire {&data->kn_msg_declare_name} {service})
				(vpifnot {service})
					(call 'sys_mail 'declare {&data->kn_msg_declare_name, data->kn_msg_reply_id.id_id})
					;copy and send to all neighbors apart from old via
					(call 'flood {mail_statics, msg, data, id})
				(endif)
				(vp-jmp 'drop_msg)
			(case {num == kn_call_route})
				;increase size of network ?
				(vpif {data->kn_msg_route_origin >= task_statics->tk_statics_cpu_total})
					(assign {data->kn_msg_route_origin + 1} {task_statics->tk_statics_cpu_total})
				(endif)

				;new kernel routing table ?
				(assign {data->kn_msg_route_origin * lk_route_size} {route_index})
				(vpif {route_index + lk_route_size > routes.lk_table_array_size})
					(call 'sys_mem 'recalloc {routes.lk_table_array, routes.lk_table_array_size, route_index + lk_route_size}
						{routes.lk_table_array, routes.lk_table_array_size})
				(endif)

				;compare hop counts
				(assign {(routes.lk_table_array)[route_index].lk_route_hops} {hops})
				(assign {data->kn_msg_route_hops} {new_hops})
				(switch)
				(case {!hops || new_hops < hops})
				(vp-label 'better_route)
					;better or first time route
					(assign {new_hops} {(routes.lk_table_array)[route_index].lk_route_hops})

					;fill in via route and remove other routes
					(call 'array 'get_iters {mail_statics->ml_statics_links_array} {_, iter_begin, iter_end})
					(loop-while {iter_begin != iter_end})
						(assign {*iter_begin} {link})
						;new link route table ?
						(vpif {route_index + lk_route_size > link->lk_node_table.lk_table_array_size})
							(call 'sys_mem 'recalloc {link->lk_node_table.lk_table_array, link->lk_node_table.lk_table_array_size, route_index + lk_route_size}
								{link->lk_node_table.lk_table_array, link->lk_node_table.lk_table_array_size})
						(endif)
						(vpif {link->lk_node_cpu_id == data->kn_msg_flood_via})
							;via route
							(assign {new_hops} {(link->lk_node_table.lk_table_array)[route_index].lk_route_hops})
						(else)
							;none via route
							(assign {0} {(link->lk_node_table.lk_table_array)[route_index].lk_route_hops})
						(endif)
						(assign {iter_begin + ptr_size} {iter_begin})
					(loop-end)
					(break)
				(case {new_hops == hops})
					;new hops is equal, so additional route
					(call 'array 'get_iters {mail_statics->ml_statics_links_array} {_, iter_begin, iter_end})
					(loop-while {iter_begin != iter_end})
						(assign {*iter_begin} {link})
						;new link route table ?
						(vpif {route_index + lk_route_size > link->lk_node_table.lk_table_array_size})
							(call 'sys_mem 'recalloc {link->lk_node_table.lk_table_array, link->lk_node_table.lk_table_array_size, route_index + lk_route_size}
								{link->lk_node_table.lk_table_array, link->lk_node_table.lk_table_array_size})
						(endif)
						(vpif {link->lk_node_cpu_id == data->kn_msg_flood_via})
							;via route
							(assign {new_hops} {(link->lk_node_table.lk_table_array)[route_index].lk_route_hops})
						(endif)
						(assign {iter_begin + ptr_size} {iter_begin})
					(loop-end)
					;drop through to discard message !
				(default)
					;new hops is greater, so worse route
					(vp-jmp 'drop_msg)
				(endswitch)

				;increment hop count
				(assign {data->kn_msg_route_hops + 1} {data->kn_msg_route_hops})

				;copy and send to all neighbors apart from old via
				(call 'flood {mail_statics, msg, data, id})
			(vp-label 'drop_msg)
				(call 'sys_mail 'free {msg})
				(break)
			(case {num == kn_call_callback})
				;call callback with this thread/stack
				(assign {data->kn_msg_user, data->kn_msg_callback_addr} '(r0 r1))
				(vp-call-r r1)

				;reply to originator
				(assign {data->kn_msg_reply_id.id_id} {msg->msg_dest.id_id})
				(call 'sys_mail 'send {msg})
			(endswitch)
		(loop-end)

		;start any tasks ready to restart
		(call 'sys_pii 'time '() '(r0))
		(f-bind 'sys_task 'statics r3)
		(vp-cpy-ir r3 tk_statics_current_tcb r14)
		(loop-list-forward r3 tk_statics_timer_list r1 r2)
			(vp-cpy-ir r1 tk_node_time r4)
			(breakif '(r4 > r0))

			;task ready, remove from timer list and place on ready list
			(vp-cpy-rr r1 r4)
			(ln-remove-node r4 r5)
			(ln-add-node-before r14 r1 r5)
		(loop-end)

		;next task if other ready tasks
		(ln-get-succ r14 0 r1)
		(continueif '(r14 != r1))

		;exit if no task waiting for timer
		(vp-cpy-ir r3 (add tk_statics_timer_list lh_list_head) r2)
		(ln-get-succ r2 0 r1)
		(breakif '(r1 == 0))

		;sleep till next wake time
		(vp-swp-rr r0 r2)
		(vp-cpy-ir r0 tk_node_time r0)
		(vp-sub-rr r2 r0)
		(vp-cpy-cr 1000 r3)
		(vp-xor-rr r2 r2)
		(vp-div-rrr r3 r2 r0)
		(vpif '(r0 < 1))
			(vp-cpy-cr 1 r0)
		(endif)
		(host-call 'host 'sdl_delay '(r0))
	(loop-end)

	;free any kernel routing table
	(call 'sys_mem 'free {routes.lk_table_array})

	;deinit allocator
	(call 'sys_mem 'deinit)

	;exit back to main.c
	(pop-scope)
	(return)

(vp-label 'flood)
	;inputs
	;r0 = mail statics
	;r1 = flood msg
	;r2 = flood data
	;r3 = kernel id

	(ptr 'mail_statics 'msg 'data 'link 'new_msg)
	(pptr 'iter_begin 'iter_end)
	(uint 'id 'via)

	(push-scope)
	(entry {mail_statics, msg, data, id})

	(assign {data->kn_msg_flood_via} {via})
	(assign {id} {data->kn_msg_flood_via})
	(call 'array 'get_iters {mail_statics->ml_statics_links_array} {_, iter_begin, iter_end})
	(loop-while {iter_begin != iter_end})
		(assign {*iter_begin} {link})
		(vpif {link->lk_node_cpu_id != via})
			(call 'sys_mail 'alloc_obj {msg->msg_parcel_obj, data, msg->msg_length} {new_msg})
			(assign {link->lk_node_cpu_id << 32} {new_msg->msg_dest.id_id})
			(call 'sys_mail 'send {new_msg})
		(endif)
		(assign {iter_begin + ptr_size} {iter_begin})
	(loop-end)

	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_kernel 'id)
	;outputs
	;r0 = cpu ID (uint)

	(f-bind 'sys_task 'statics r0)
	(exit 'sys_kernel 'id '((r0 tk_statics_cpu_id ui)))
	(vp-ret)

(def-func-end)

(def-method 'sys_kernel 'total)
	;outputs
	;r0 = cpu total (uint)

	(f-bind 'sys_task 'statics r0)
	(exit 'sys_kernel 'total '((r0 tk_statics_cpu_total ui)))
	(vp-ret)

(def-func-end)

(def-method 'sys_kernel 'opts)
	;inputs
	;r0 = argv array (pptr)
	;trashes
	;all
	;info
	;process command options

	(pptr 'argv)
	(ptr 'arg)
	(plong 'table)
	(long 'offset)
	(int 'len)

	(push-scope)
	(entry 'sys_kernel 'opts {argv})

	(loop-start)
		(assign {*argv} {arg})
		(breakifnot {arg})
		(assign {argv + ptr_size} {argv})
		(assign {$options_table} {table})
		(loop-start 'next_arg)
			(assign {*table} {offset})
			(breakifnot {offset})
			(assign {table + ptr_size} {table})
			(call 'sys_string 'compare {table, arg})
			(vpif (list (method-output 'sys_string 'compare 0) '== 0))
				(assign {*argv} {arg})
				(breakifnot {arg} next_arg)
				(assign {arg, $options_table + offset} '(r0 r1))
				(vp-call-r r1)
				(break next_arg)
			(endif)
			(call 'sys_string 'length {table} {_, len})
			(assign {(table + len + ptr_size) & - ptr_size} {table})
		(loop-end)
	(loop-end)

	(pop-scope)
	(return)

(vp-label 'opt_cpu)
	;inputs
	;r0 = argv pointer (pubyte)

	(ptr 'arg)

	(push-scope)
	(entry {arg})

	;set cpu ID
	(call 'sys_string 'to_long {arg, 10} (cat {@} (f-path 'sys_task 'statics) {.tk_statics_cpu_id}))

	(pop-scope)
	(return)

(vp-label 'opt_run)
	;inputs
	;r0 = argv pointer (pubyte)

	(ptr 'arg)

	(push-scope)
	(entry {arg})

	;load and run task
	(call 'sys_load 'bind {arg} {arg})
	(vpif {arg})
		(call 'sys_task 'start {arg})
	(endif)

	(pop-scope)
	(return)

(vp-label 'opt_link)
	;inputs
	;r0 = argv pointer (pubyte)

	(ptr 'arg 'msg 'data)
	(struct 'mbox 'id)

	(push-scope)
	(entry {arg})

	;start link
	(call 'sys_task 'start (cat {@} (f-path 'sys_link 'link)) {_, mbox.id_id, _})

	;params message
	(call 'sys_mail 'alloc {5 + 7 + 1} {msg, data})
	(assign {mbox.id_id} {msg->msg_dest.id_id})
	(call 'sys_string 'copy {$link_path, data} {_, data})
	(call 'sys_string 'copy {arg, data - 1} {_, data})

	;send to link task
	(call 'sys_mail 'send {msg})

	(pop-scope)
	(return)

(vp-label 'link_path)
	(vp-string "/tmp/") (vp-byte 0)

	(vp-align ptr_size)
(vp-label 'options_table)
	(vp-long (list 'sub (label-sym 'opt_cpu) (label-sym 'options_table)))
		(vp-string "-cpu") (vp-byte 0)
		(vp-align ptr_size)
	(vp-long (list 'sub (label-sym 'opt_run) (label-sym 'options_table)))
		(vp-string "-run") (vp-byte 0)
		(vp-align ptr_size)
	(vp-long (list 'sub (label-sym 'opt_link) (label-sym 'options_table)))
		(vp-string "-l") (vp-byte 0)
		(vp-align ptr_size)
	(vp-long 0)

(def-func-end)

(def-method 'sys_kernel 'declare)
	;inputs
	;r0 = mailbox name c string (pubyte)
	;r1 = mailbox id (ulong)
	;trashes
	;all

	(ptr 'name 'msg 'data)
	(ulong 'id)
	(uint 'length)

	;save task info
	(push-scope)
	(entry 'sys_kernel 'declare {name, id})

	(call 'sys_string 'length {name} {_, length})
	(call 'sys_mail 'alloc {length + 1 + kn_msg_declare_size} {msg, data})
	(assign {0} {msg->msg_dest.id_mbox})
	(call 'sys_kernel 'id nil {msg->msg_dest.id_cpu})
	(assign {kn_call_declare} {data->kn_msg_function})
	(assign {id} {data->kn_msg_reply_id.id_id})
	(assign {-1} {data->kn_msg_flood_via})
	(call 'sys_mem 'copy {name, &data->kn_msg_declare_name, length + 1})
	(call 'sys_mail 'send {msg})

	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_kernel 'debug)
	;inputs
	;r0 = debug c string (pubyte)
	;trashes
	;all

	(ptr 'debug_data 'msg 'data 'mailbox)
	(struct 'service 'id)
	(uint 'mbox_id 'length)

	(push-scope)
	(entry 'sys_kernel 'debug {debug_data})

	;enquire of DEBUG_SERVICE
	(call 'sys_mail 'enquire {"DEBUG_SERVICE"} {service.id_id})
	(vpif {service.id_id})
		;alloc temp mailbox
		(call 'sys_mail 'alloc_mbox nil {mbox_id, mailbox})

		;send debug data
		(call 'sys_string 'length {debug_data} {_, length})
		(call 'sys_mail 'alloc {length + 1 + kn_debug_size} {msg, data})
		(assign {service.id_id} {msg->msg_dest.id_id})
		(assign {0} {data->kn_debug_command})
		(assign {mbox_id} {data->kn_debug_reply_id.id_mbox})
		(call 'sys_kernel 'id nil {data->kn_debug_reply_id.id_cpu})
		(call 'sys_task 'tcb nil {data->kn_debug_tcb})
		(call 'sys_mem 'copy {debug_data, &data->kn_debug_data, length + 1})
		(call 'sys_mail 'send {msg})

		;wait for reply
		(call 'sys_mail 'read {mailbox} {msg, _})
		(call 'sys_mail 'free {msg})

		;free temp mailbox
		(call 'sys_mail 'free_mbox {mbox_id})
	(endif)
	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_kernel 'debug_reg)
	;inputs
	;r14 = debug c string (pubyte)
	;trashes
	;none

	(ulong 'reg0 'reg1 'reg2 'reg3 'reg4 'reg5 'reg6 'reg7
		'reg8 'reg9 'reg10 'reg11 'reg12 'reg13 'reg14 'reg15)
	(union
		'(struct 'service 'id)
		'(ptr 'num))
	(ptr 'lines 'line 'lf 'sp)
	(pulong 'iter)

	(push-scope)
	(assign '(r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14)
		{reg0, reg1, reg2, reg3, reg4, reg5, reg6, reg7, reg8, reg9, reg10, reg11, reg12, reg13, reg14})
	(assign '(rsp) {reg15})

	;enquire of DEBUG_SERVICE
	(call 'sys_mail 'enquire {"DEBUG_SERVICE"} {service.id_id})
	(vpif {service.id_id})
		;build debug data for reg dump
		(call 'vector 'create nil {lines})
		(call 'vector 'set_capacity {lines, 5 * 16 + 2})
		(call 'string 'create_from_cstr {reg14} {line})
		(call 'vector 'push_back {lines, line})
		(call 'string 'create_from_cstr (list (char 10)) {lf})
		(call 'vector 'push_back {lines, lf})
		(call 'string 'create_from_cstr '(" ") {sp})
		(assign {&reg0} {iter})
		(loop-start)
			(call 'string 'create_from_long {(iter - &reg0) >> 3, 10} {num})
			(call 'string 'create_from_buffer {"R00", 3 - num->string_length} {line})
			(call 'vector 'push_back {lines, line})
			(call 'vector 'push_back {lines, num})
			(call 'string 'create_from_long {*iter, -16} {num})
			(call 'string 'create_from_buffer {": 0x0000000000000000", 20 - num->string_length} {line})
			(call 'vector 'push_back {lines, line})
			(call 'vector 'push_back {lines, num})
			(vpif {(iter - &reg0) & 8})
				(assign {lf} {line})
			(else)
				(assign {sp} {line})
			(endif)
			(call 'string 'ref {line} {line})
			(call 'vector 'push_back {lines, line})
			(assign {iter + ptr_size} {iter})
		(loop-until {iter > &reg15})
		(call 'string 'cat {lines} {line})
		(call 'sys_kernel 'debug {&line->string_data})
		(call 'vector 'deref {lines})
		(call 'string 'deref {line})
		(call 'string 'deref {sp})
	(endif)

	(assign {reg0, reg1, reg2, reg3, reg4, reg5, reg6, reg7,
		reg8, reg9, reg10, reg11, reg12, reg13, reg14}
		'(r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14))
	(pop-scope)
	(return)

(def-func-end)
