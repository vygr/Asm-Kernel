(include "sys/func.inc")
(include "class/seq/class.inc")
(include "class/num/class.inc")
(include "class/hmap/class.inc")
(include "class/str/class.inc")
(include "gui/path/class.inc")
(include "class/lisp/class.inc")

(def-method 'seq :lisp_length)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'seq :lisp_length '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error1))

	(vp-cpy-rr r0 r13)
	(defq in (method-input 'seq :get_length))
	(list-bind-args r1 in '(seq))
	(call 'seq :get_length in '(_ r0))
	(call 'num :create '(r0) '(r1))

	(exit 'seq :lisp_length '(r13 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp :repl_error '(r0 "(length seq)" error_msg_wrong_types r1))
	(signature '(seq)))

(def-func-end)

(def-method 'seq :lisp_elem)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'seq :lisp_elem '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 2) '(r2))
	(gotoif '(r2 = 0) 'error1)
	(assign '(r1) '(r13)))

	(assign '(r0) '(r12))
	(list-bind-args r1 '(r11 r0) '(num seq))
	(call 'seq :get_length '(r0) '(r0 r1))
	(vpif '(r11 < 0))
		(vp-add-rr r1 r11)
		(vp-add-cr 1 r11)
	(endif)
(errorcases
	(gotoif '(r11 < 0) 'error2)
	(gotoif '(r11 >= r1) 'error2))
	(call 'seq :ref_element '(r0 r11) '(_ r1))

	(exit 'seq :lisp_elem '(r12 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp :repl_error '(r0 "(elem index seq)" error_msg_wrong_types r1))
(vp-label 'error2)
	(jump 'lisp :repl_error '(r12 "(elem index seq)" error_msg_not_valid_index r13))
	(signature '(num seq)))

(def-func-end)

(def-method 'seq :lisp_slice)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'seq :lisp_slice '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 3) '(r2))
	(gotoif '(r2 = 0) 'error1)
	(assign '(r1) '(r13)))

	(assign '(r0) '(r12))
	(list-bind-args r1 '(r10 r11 r0) '(num num seq))
	(call 'seq :get_length '(r0) '(r0 r1))
	(vpif '(r10 < 0))
		(vp-add-rr r1 r10)
		(vp-add-cr 1 r10)
	(endif)
	(vpif '(r11 < 0))
		(vp-add-rr r1 r11)
		(vp-add-cr 1 r11)
	(endif)
(errorcases
	(gotoif '(r10 < 0) 'error2)
	(gotoif '(r10 > r11) 'error2)
	(gotoif '(r11 > r1) 'error2))
	(call 'seq :slice '(r0 r10 r11) '(_ r1))

	(exit 'seq :lisp_slice '(r12 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp :repl_error '(r0 "(slice start end seq)" error_msg_wrong_types r1))
(vp-label 'error2)
	(jump 'lisp :repl_error '(r12 "(slice start end seq)" error_msg_not_valid_index r13))
	(signature '(num num seq)))

(def-func-end)

(def-method 'seq :lisp_each)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ptr 'this 'args 'value 'func 'params)
		(int 'dir 'start 'end)
	(def-struct-end)

	(entry 'seq :lisp_each '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 4) '(r2))
	(gotoif '(r2 = 0) 'error1))

	(vp-alloc local_size)
	(assign '(r0 r1) '((rsp local_this) (rsp local_args)))
	(call 'lisp :env_push '(r0))

	(assign '((rsp local_args)) '(r0))
	(list-bind-args r0 '(r9 r10 r11 r12) '(num num obj list))
	(vp-cpy-cr +max_int+ r8)
	(class/array/get_both r12 r6 r7)
	(loop-while '(r6 /= r7))
		(vp-cpy-ir r6 0 r0)
	(errorcases
		(call 'obj :inst_of `(r0 (@ ,(f-path 'seq :vtable))) '(r0 r1))
		(gotoif '(r1 = 0) 'error3))
		(call 'seq :get_length '(r0) '(_ r1))
		(vpif '(r1 < r8))
			(vp-cpy-rr r1 r8)
		(endif)
		(vp-add-cr ptr_size r6)
	(loop-end)

	(assign '((rsp local_this)) '(r0))
	(call 'obj :ref '((r0 lisp_sym_nil)) '((rsp local_value)))

	(vpif '(r8 /= +max_int+))
		(vpif '(r9 < 0))
			(vp-add-rr r8 r9)
			(vp-add-cr 1 r9)
		(endif)
		(vpif '(r10 < 0))
			(vp-add-rr r8 r10)
			(vp-add-cr 1 r10)
		(endif)
	(errorcases
		(gotoif '(r9 < 0) 'error4)
		(gotoif '(r10 < 0) 'error4)
		(gotoif '(r9 > r8) 'error4)
		(gotoif '(r10 > r8) 'error4))
		(vp-cpy-cr 1 r8)
		(vpif '(r9 > r10))
			(vp-cpy-cr -1 r8)
			(vp-sub-cr 1 r9)
			(vp-sub-cr 1 r10)
		(endif)

		(assign '(r8 r9 r10 r11 r12)
			'((rsp local_dir) (rsp local_start) (rsp local_end) (rsp local_func) (rsp local_args)))

		(loop-while '(r9 /= r10) 'done)
			(call 'obj :deref '((rsp local_value)))

			(call 'list :create nil '((rsp local_params)))
			(assign '((rsp local_args) (rsp local_start)) '(r0 r9))
			(class/array/get_both r0 r10 r11)
			(loop-start)
				(call 'seq :ref_element '((r10 0) r9) '(_ r1))
				(call 'list :push_back '((rsp local_params) r1))
				(vp-add-cr ptr_size r10)
			(loop-until '(r10 = r11))

			(call 'num :create '(r9) '(r2))
			(assign '((rsp local_this) r2) '(r1 (rsp local_value)))
			(call 'hmap :insert '((r1 lisp_environment) (r1 lisp_sym_underscore) r2))
			(call 'obj :deref '((rsp local_value)))

			(call 'lisp :repl_apply '((rsp local_this) (rsp local_params) (rsp local_func)) '(_ (rsp local_value)))
			(call 'list :deref '((rsp local_params)))
		(errorcases
			(assign '((rsp local_value)) '(r1))
			(f-bind 'error :vtable r4)
			(assign '((r1 obj_vtable)) '(r3))
			(breakif '(r3 = r4) 'done))

			(assign '((rsp local_dir) (rsp local_start) (rsp local_end)) '(r8 r9 r10))
			(vp-add-rr r8 r9)
			(assign '(r9) '((rsp local_start)))
		(loop-end)
	(endif)

(vp-label 'funcexit)
	(call 'lisp :env_pop '((rsp local_this)) '(r0))
	(exit 'seq :lisp_each '(r0 (rsp local_value)))
	(vp-free local_size)
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp :repl_error '(r0 "(each! start end lambda (seq ...))" error_msg_wrong_num_of_args r1))
(vp-label 'error3)
	(call 'lisp :repl_error '((rsp local_this) "(each! start end lambda (seq ...))" error_msg_not_a_sequence (rsp local_args)) '(_ (rsp local_value)))
	(goto 'funcexit)
(vp-label 'error4)
	(call 'lisp :repl_error '((rsp local_this) "(each! start end lambda (seq ...))" error_msg_not_valid_index (rsp local_args)) '(_ (rsp local_value)))
	(goto 'funcexit)
	(signature '(num num obj list)))

(def-func-end)

(def-method 'seq :lisp_some)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ptr 'this 'args 'value 'mode 'func 'params)
		(int 'dir 'start 'end)
	(def-struct-end)

	(entry 'seq :lisp_some '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 5) '(r2))
	(gotoif '(r2 = 0) 'error1))

	(vp-alloc local_size)
	(assign '(r0 r1) '((rsp local_this) (rsp local_args)))
	(call 'lisp :env_push '(r0))

	(assign '((rsp local_args)) '(r0))
	(list-bind-args r0 '(r9 r10 r11 r12 r13) '(num num obj obj list))
	(vp-cpy-cr +max_int+ r8)
	(class/array/get_both r13 r6 r7)
	(loop-while '(r6 /= r7))
		(vp-cpy-ir r6 0 r0)
	(errorcases
		(call 'obj :inst_of `(r0 (@ ,(f-path 'seq :vtable))) '(r0 r1))
		(gotoif '(r1 = 0) 'error3))
		(call 'seq :get_length '(r0) '(_ r1))
		(vpif '(r1 < r8))
			(vp-cpy-rr r1 r8)
		(endif)
		(vp-add-cr ptr_size r6)
	(loop-end)

	(assign '((rsp local_this)) '(r0))
	(call 'obj :ref '((r0 lisp_sym_nil)) '((rsp local_value)))

	(vpif '(r8 /= +max_int+))
		(vpif '(r9 < 0))
			(vp-add-rr r8 r9)
			(vp-add-cr 1 r9)
		(endif)
		(vpif '(r10 < 0))
			(vp-add-rr r8 r10)
			(vp-add-cr 1 r10)
		(endif)
	(errorcases
		(gotoif '(r9 < 0) 'error4)
		(gotoif '(r10 < 0) 'error4)
		(gotoif '(r9 > r8) 'error4)
		(gotoif '(r10 > r8) 'error4))
		(vp-cpy-cr 1 r8)
		(vpif '(r9 > r10))
			(vp-cpy-cr -1 r8)
			(vp-sub-cr 1 r9)
			(vp-sub-cr 1 r10)
		(endif)

		(assign '(r8 r9 r10 r11 r12 r13)
			'((rsp local_dir) (rsp local_start) (rsp local_end) (rsp local_mode)
				(rsp local_func) (rsp local_args)))

		(loop-while '(r9 /= r10) 'done)
			(call 'obj :deref '((rsp local_value)))

			(call 'list :create nil '((rsp local_params)))
			(assign '((rsp local_args) (rsp local_start)) '(r0 r9))
			(class/array/get_both r0 r10 r11)
			(loop-start)
				(call 'seq :ref_element '((r10 0) r9) '(_ r1))
				(call 'list :push_back '((rsp local_params) r1))
				(vp-add-cr ptr_size r10)
			(loop-until '(r10 = r11))

			(call 'num :create '(r9) '(r2))
			(assign '((rsp local_this) r2) '(r1 (rsp local_value)))
			(call 'hmap :insert '((r1 lisp_environment) (r1 lisp_sym_underscore) r2))
			(call 'obj :deref '((rsp local_value)))

			(call 'lisp :repl_apply '((rsp local_this) (rsp local_params) (rsp local_func)) '(_ (rsp local_value)))
			(call 'list :deref '((rsp local_params)))
			(assign '((rsp local_value)) '(r1))
		(errorcases
			(f-bind 'error :vtable r4)
			(assign '((r1 obj_vtable)) '(r3))
			(breakif '(r3 = r4) 'done))

			(assign '((rsp local_this) (rsp local_mode)) '(r0 r2))
			(assign '((r0 lisp_sym_nil)) '(r0))
			(vpif '(r2 = r0))
				(breakif '(r1 = r0) 'done)
			(else)
				(breakif '(r1 /= r0) 'done)
			(endif)

			(assign '((rsp local_dir) (rsp local_start) (rsp local_end)) '(r8 r9 r10))
			(vp-add-rr r8 r9)
			(assign '(r9) '((rsp local_start)))
		(loop-end)
	(endif)

(vp-label 'funcexit)
	(call 'lisp :env_pop '((rsp local_this)) '(r0))
	(exit 'seq :lisp_some '(r0 (rsp local_value)))
	(vp-free local_size)
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp :repl_error '(r0 "(some! start end mode lambda (seq ...))" error_msg_wrong_num_of_args r1))
(vp-label 'error3)
	(call 'lisp :repl_error '((rsp local_this) "(some! start end mode lambda (seq ...))" error_msg_not_a_sequence (rsp local_args)) '(_ (rsp local_value)))
	(goto 'funcexit)
(vp-label 'error4)
	(call 'lisp :repl_error '((rsp local_this) "(some! start end mode lambda (seq ...))" error_msg_not_valid_index (rsp local_args)) '(_ (rsp local_value)))
	(goto 'funcexit)
	(signature '(num num obj obj list)))

(def-func-end)

(def-method 'seq :lisp_cat)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'seq :lisp_cat '(r0 r1))

(errorcases
	(call 'lisp :env_args_type `(r1 (@ ,(f-path 'str :vtable)) 1) '(r2))
	(vpif '(r2 = 0))
		(call 'lisp :env_args_match `(r1 (@ ,(f-path 'seq :vtable)) 1) '(r2))
		(gotoif '(r2 = 0) 'error)
	(endif))

	(assign '(r0) '(r13))
	(array-bind-args r1 '(r0))
	(call 'seq :cat '(r0 r1) '(r0))

	(exit 'seq :lisp_cat '(r13 r0))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(cat seq ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'seq :lisp_find)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(vp-def (this args element sequence vtable ovtable) '(r8 r9 r10 r11 r12 r13))

	(entry 'seq :lisp_find `(,this ,args))

(errorcases
	(call 'lisp :env_args_sig `(,args ($ sig) 2) '(r2))
	(gotoif '(r2 = 0) 'error))

	(array-bind-args args `(,element ,sequence))
	(assign `((,sequence obj_vtable)) `(,ovtable))
	(switch)
	(f-bind 'str :vtable vtable)
	(vpcase `(,ovtable = ,vtable))
	(errorcases
		(assign `((,element obj_vtable)) `(,ovtable))
		(gotoif `(,ovtable /= ,vtable) 'error))
		(list-cast-args `(,element) '(char))
		(goto 'dofind)
	(default)
		(f-bind 'list :vtable vtable)
		(gotoif `(,ovtable = ,vtable) 'dofind)
	(errorcases
		(call 'obj :inst_of `(,element (@ ,(f-path 'num :vtable))) '(r0 r1))
		(gotoif '(r1 = 0) 'error))
		(list-cast-args `(,element) '(num))
	(vp-label 'dofind)
		(call 'seq :find `(,sequence ,element) '(_ _ r2))
		(vpif '(r2 = -1))
			(call 'obj :ref `((,this lisp_sym_nil)) '(r0))
		(else)
			(call 'num :create '(r2) '(r0))
		(endif)
	(endswitch)

	(exit 'seq :lisp_find `(,this r0))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error `(,this "(find elem seq)" error_msg_wrong_types ,args))
	(signature '(obj seq)))

(def-func-end)

(def-method 'seq :lisp_rfind)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(vp-def (this args element sequence vtable ovtable) '(r8 r9 r10 r11 r12 r13))

	(entry 'seq :lisp_rfind `(,this ,args))

(errorcases
	(call 'lisp :env_args_sig `(,args ($ sig) 2) '(r2))
	(gotoif '(r2 = 0) 'error))

	(array-bind-args args `(,element ,sequence))
	(assign `((,sequence obj_vtable)) `(,ovtable))
	(switch)
	(f-bind 'str :vtable vtable)
	(vpcase `(,ovtable = ,vtable))
	(errorcases
		(assign `((,element obj_vtable)) `(,ovtable))
		(gotoif `(,ovtable /= ,vtable) 'error))
		(list-cast-args `(,element) '(char))
		(goto 'dofind)
	(default)
		(f-bind 'list :vtable vtable)
		(gotoif `(,ovtable = ,vtable) 'dofind)
	(errorcases
		(call 'obj :inst_of `(,element (@ ,(f-path 'num :vtable))) '(r0 r1))
		(gotoif '(r1 = 0) 'error))
		(list-cast-args `(,element) '(num))
	(vp-label 'dofind)
		(call 'seq :rfind `(,sequence ,element) '(_ _ r2))
		(vpif '(r2 = -1))
			(call 'obj :ref `((,this lisp_sym_nil)) '(r0))
		(else)
			(call 'num :create '(r2) '(r0))
		(endif)
	(endswitch)

	(exit 'seq :lisp_rfind `(,this r0))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error `(,this "(find-rev elem seq)" error_msg_wrong_types ,args))
	(signature '(obj seq)))

(def-func-end)
