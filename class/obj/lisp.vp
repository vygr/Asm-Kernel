(include "sys/func.inc")
(include "class/num/class.inc")
(include "class/lisp/class.inc")

(def-method 'obj :lisp_get_field)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'obj :lisp_get_field '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 3) '(r2))
	(gotoif '(r2 = 0) 'error))

	(assign '(r0) '(r5))
	(list-bind-args r1 '(r0 r1 r2) '(:obj :num :num))
	(switch)
	(vpcase (list r2 '= byte_size))
		(assign '((r0 r1 b)) '(r0))
		(break)
	(vpcase (list r2 '= (neg byte_size)))
		(assign '((r0 r1 ub)) '(r0))
		(break)
	(vpcase (list r2 '= short_size))
		(assign '((r0 r1 s)) '(r0))
		(break)
	(vpcase (list r2 '= (neg short_size)))
		(assign '((r0 r1 us)) '(r0))
		(break)
	(vpcase (list r2 '= int_size))
		(assign '((r0 r1 i)) '(r0))
		(break)
	(vpcase (list r2 '= (neg int_size)))
		(assign '((r0 r1 ui)) '(r0))
		(break)
	(vpcase (list r2 '= long_size))
		(assign '((r0 r1)) '(r0))
		(break)
	(vpcase (list r2 '= (neg long_size)))
		(assign '((r0 r1)) '(r0))
	(else)
		(assign '((r0 r1)) '(r1))
		(vpif '(r1 = 0))
			(assign '((r5 lisp_sym_nil)) '(r1))
		(endif)
		(class/obj/ref r1 r0)

		(exit 'obj :lisp_get_field '(r5 r1))
		(vp-ret)
	(endswitch)
	(call 'num :create '(r0) '(r1))

	(exit 'obj :lisp_get_field '(r5 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(get-field obj field size|0)" error_msg_wrong_types r1))
	(signature '(obj num num)))

(def-func-end)

(def-method 'obj :lisp_set_field)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'obj :lisp_set_field '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 4) '(r2))
	(gotoif '(r2 = 0) 'error))

	(list-bind-args r1 '(r1 r2 r3 r4) '(:obj :num :num :obj))
	(vp-push r0 r1)
	(vpif '(r3 /= 0))
		(assign '((r4 num_value)) '(r4))
	(endif)
	(switch)
	(vpcase (list r3 '= byte_size))
		(assign '(r4) '((r1 r2 b)))
		(break)
	(vpcase (list r3 '= (neg byte_size)))
		(assign '(r4) '((r1 r2 b)))
		(break)
	(vpcase (list r3 '= short_size))
		(assign '(r4) '((r1 r2 s)))
		(break)
	(vpcase (list r3 '= (neg short_size)))
		(assign '(r4) '((r1 r2 s)))
		(break)
	(vpcase (list r3 '= int_size))
		(assign '(r4) '((r1 r2 i)))
		(break)
	(vpcase (list r3 '= (neg int_size)))
		(assign '(r4) '((r1 r2 i)))
		(break)
	(vpcase (list r3 '= long_size))
		(assign '(r4) '((r1 r2)))
		(break)
	(vpcase (list r3 '= (neg long_size)))
		(assign '(r4) '((r1 r2)))
	(else)
		(vp-push r1 r2 r4)
		(call 'obj :deref_if '((r1 r2)))
		(vp-pop r1 r2 r4)
		(assign '((rsp ptr_size)) '(r0))
		(assign '((r0 lisp_sym_nil)) '(r0))
		(vpif '(r4 = r0))
			(vp-xor-rr r4 r4)
		(else)
			(class/obj/ref r4 r0)
		(endif)
		(assign '(r4) '((r1 r2)))
	(endswitch)
	(vp-pop r0 r1)
	(class/obj/ref r1 r2)

	(exit 'obj :lisp_set_field '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(set-field obj field size|0 val)" error_msg_wrong_types r1))
	(signature '(obj num num obj)))

(def-func-end)

(def-method 'obj :lisp_hash)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'obj :lisp_hash '(r0 r1))

(errorcases
	(assign '((r1 array_length)) '(r2))
	(gotoif '(r2 /= 1) 'error))

	(vp-push r0)
	(defq in (method-input 'obj :hash))
	(array-bind-args r1 in)
	(call 'obj :hash in '(_ r0))
	(call 'num :create '(r0) '(r1))
	(vp-pop r0)

	(exit 'obj :lisp_hash '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(hash obj)" error_msg_wrong_num_of_args r1)))

(def-func-end)

(def-method 'obj :lisp_weak_ref)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'obj :lisp_weak_ref '(r0 r1))

(errorcases
	(assign '((r1 array_length)) '(r2))
	(gotoif '(r2 /= 1) 'error))

	(list-bind-args r1 '(r2) '(:obj))
	(assign '((r0 lisp_sym_nil)) '(r1))
	(vpif '(r1 = r2))
		(class/obj/ref r1 r2)
	(else)
		(vp-push r0)
		(call 'num :create '(r2) '(r1))
		(vp-pop r0)
	(endif)

	(exit 'obj :lisp_weak_ref '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(weak-ref obj)" error_msg_wrong_num_of_args r1))
	(signature '(obj)))

(def-func-end)

(def-method 'obj :lisp_obj_ref)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'obj :lisp_obj_ref '(r0 r1))

(errorcases
	(assign '((r1 array_length)) '(r2))
	(gotoif '(r2 /= 1) 'error))

	(list-bind-args r1 '(r2) '(:obj))
	(assign '((r0 lisp_sym_nil)) '(r1))
	(vpif '(r1 /= r2))
	(errorcases
		(assign `((@ ,(f-path 'num :vtable)) (r2 obj_vtable)) '(r3 r1))
		(gotoif '(r3 /= r1) 'error1))
		(assign '((r2 num_value)) '(r1))
	(endif)
	(class/obj/ref r1 r2)

	(exit 'obj :lisp_obj_ref '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(vp-cpy-rr r2 r1)
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(obj-ref num)" error_msg_wrong_types r1))
	(signature '(obj)))

(def-func-end)
