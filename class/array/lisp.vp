(include "sys/func.inc")
(include "class/lisp/class.inc")
(include "class/num/class.inc")
(include "class/reals/class.inc")
(include "gui/path/class.inc")

(defun to-array (_)
	(entry 'array (sym (cat :lisp_ _)) '(r6 r8))
	(call _ :create nil '(r7))
	(assign '((r8 array_length)) '(r1))
	(assign '(r1) '((r7 array_length)))
	(call _ :set_capacity '(r7 r1))
	(call 'lisp :env_args_set '(r8 0 (r7 array_begin)))
	(exit 'array (sym (cat :lisp_ _)) '(r6 r7))
	(vp-ret))

(def-method 'array :lisp_array)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(to-array 'array)

(def-func-end)

(def-method 'array :lisp_nums)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(to-array 'nums)

(def-func-end)

(def-method 'array :lisp_fixeds)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(to-array 'fixeds)

(def-func-end)

(def-method 'array :lisp_reals)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(to-array 'reals)

(def-func-end)

(def-method 'array :lisp_path)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(to-array 'path)

(def-func-end)

(def-method 'array :lisp_clear)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ptr 'this)
		(pptr 'iter_begin 'iter_end)
	(def-struct-end)

	(entry 'array :lisp_clear '(r0 r1))

(errorcases
	(call 'lisp :env_args_type `(r1 (@ ,(f-path 'array :vtable)) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-alloc local_size)
	(class/array/get_both r1 r1 r2)
	(assign '(r0 r2) '((rsp local_this) (rsp local_iter_end)))
	(loop-start)
		(assign '(r1) '((rsp local_iter_begin)))
		(call 'array :clear '((r1 0)) '(r0))
		(assign '((rsp local_iter_begin) (rsp local_iter_end)) '(r1 r2))
		(vp-add-cr ptr_size r1)
	(loop-until '(r1 = r2))
	(call 'obj :ref '(r0) '(r0))

	(exit 'array :lisp_clear '((rsp local_this) r0))
	(vp-free local_size)
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0  "(clear array ...)" error_msg_wrong_types r1)))

(def-func-end)

(def-method 'array :lisp_pop)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'array :lisp_pop '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(array-bind-args r1 '(r0))
	(assign '((r0 array_length)) '(r1))
	(vpif '(r1 /= 0))
		(call 'array :ref_back '(r0) '(_ r1))
	(else)
		(assign '((rsp 0)) '(r1))
		(assign '((r1 lisp_sym_nil)) '(r1))
		(class/obj/ref r1 r2)
	(endif)
	(vp-pop r0)

	(exit 'array :lisp_pop '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(pop array)" error_msg_wrong_types r1))
	(signature '(array)))

(def-func-end)

(def-method 'array :lisp_push)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'array :lisp_push '(r6 r7))

	(assign '((r7 array_length)) '(r3))
	(errorif '(r3 < 2) 'error)
	(array-bind-args r7 '(r0))
	(f-bind 'list :vtable r1)
	(assign '((r0 obj_vtable)) '(r2))
	(vpif '(r1 = r2))
		(d-call 'list :append '(r0 r7 1 r3) '(r0))
	(else)
	(errorcases
		(call 'obj :inst_of `(r0 (@ ,(f-path 'array :vtable))) '(r0 r1))
		(gotoif '(r1 = 0) 'error))
		(assign '((r0 array_length)) '(r8))
		(vp-add-rr r3 r8)
		(vp-sub-cr 1 r8)
		(call 'array :set_capacity '(r0 r8) '(r0))
		(call 'array :get_end '(r0) '(r9 r1))
		(assign '(r8) '((r9 array_length)))
		(call 'lisp :env_args_set '(r7 1 r1))
		(vp-cpy-rr r9 r0)
	(endif)
	(call 'obj :ref '(r0) '(r0))

	(exit 'array :lisp_push '(r6 r0))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r6 "(push array form ...)" error_msg_wrong_types r7)))

(def-func-end)

(def-method 'array :lisp_cap)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(vp-def (this args argc iter_begin iter_end obj res) '(r9 r10 r11 r12 r13))

	(entry 'array :lisp_cap `(,this ,args))

(errorcases
	(assign `((,args array_length)) `(,argc))
	(gotoif `(,argc < 2) 'error))
	(class/array/get_both args iter_begin iter_end)
	(assign `((,iter_begin 0)) `(,args))
	(vp-add-cr ptr_size iter_begin)
(errorcases
	(f-bind 'num :vtable obj)
	(assign `((,args obj_vtable)) `(,res))
	(gotoif `(,obj /= ,res) 'error))
	(assign `((,args num_value)) `(,argc))
	(loop-start)
		(assign `((,iter_begin 0)) `(,obj))
		(vp-add-cr ptr_size iter_begin)
	(errorcases
		(call 'obj :inst_of `(,obj (@ ,(f-path 'array :vtable))) `(,obj ,res))
		(gotoif `(res = 0) 'error))
		(call 'array :set_capacity `(,obj ,argc) `(,obj))
	(loop-until `(,iter_begin = ,iter_end))
	(class/obj/ref obj argc)

	(exit 'array :lisp_cap `(,this ,obj))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error `(,this "(cap len array ...)" error_msg_wrong_types ,args)))

(def-func-end)
