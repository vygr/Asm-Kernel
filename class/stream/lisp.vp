(include "sys/func.inc")
(include "sys/str/class.inc")
(include "class/str/class.inc")
(include "class/stream/class.inc")
(include "class/sstream/class.inc")
(include "class/fstream/class.inc")
(include "class/stdio/class.inc")
(include "class/num/class.inc")
(include "class/lisp/class.inc")

(def-method 'stream :lisp_iostream)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'stream :lisp_iostream '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-cpy-rr r0 r8)
	(list-bind-args r1 '(r5) '(:str))
	(switch 'exit)
		(switch)
		(call 'sys_str :compare '(r5 "stdin") '(r0))
		(assign '((r8 lisp_stdin)) '(r1))
		(breakif '(r0 = 0))
		(call 'sys_str :compare '(r5 "stdout") '(r0))
		(assign '((r8 lisp_stdout)) '(r1))
		(breakif '(r0 = 0))
		(call 'sys_str :compare '(r5 "stderr") '(r0))
		(assign '((r8 lisp_stderr)) '(r1))
		(breakif '(r0 = 0))
		(assign '((r8 lisp_sym_nil)) '(r1))
		(endswitch)
		(class/obj/ref r1 r2)
	(endswitch)

	(exit 'stream :lisp_iostream '(r8 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(io-stream io)" error_msg_wrong_types r1))
	(signature '(str)))

(def-func-end)

(def-method 'stream :lisp_fstream)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'stream :lisp_fstream '(r0 r1))

(errorcases
	(assign '((r1 array_length)) '(r4))
	(gotoif '(r4 > 2) 'error)
	(gotoif '(r4 < 1) 'error)
	(call 'lisp :env_args_sig '(r1 ($ sig) r4) '(r2))
	(gotoif '(r2 = 0) 'error))

	(assign '((r1 array_length)) '(r2))
	(vp-push r0)
	(defq in (method-input 'fstream :create))
	(vpif '(r2 = 1))
		(list-bind-args r1 (slice 0 1 in) '(:str))
		(assign '(file_open_read) (slice 1 2 in))
	(else)
		(list-bind-args r1 in '(:str :num))
	(endif)
	(call 'fstream :create in '(r1))
	(vp-pop r0)
	(vpif '(r1 = 0))
		(assign '((r0 lisp_sym_nil)) '(r1))
		(class/obj/ref r1 r2)
	(endif)

	(exit 'stream :lisp_fstream '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(file-stream path [mode])" error_msg_wrong_types r1))
	(signature '(str num)))

(def-func-end)

(def-method 'stream :lisp_sstream)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'stream :lisp_sstream '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'sstream :create))
	(list-bind-args r1 in '(:obj))
	(class/obj/ref (elem 0 in))
	(call 'sstream :create in '(r1))
	(vp-pop r0)

	(exit 'stream :lisp_sstream '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(string-stream str)" error_msg_wrong_types r1))
	(signature '(str)))

(def-func-end)

(def-method 'stream :lisp_available)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'stream :lisp_available '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'stream :available))
	(list-bind-args r1 in '(:stream))
	(call 'stream :available in '(_ r1))
	(call 'num :create '(r1) '(r1))
	(vp-pop r0)

	(exit 'stream :lisp_available '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(stream-avail stream)" error_msg_wrong_types r1))
	(signature '(stream)))

(def-func-end)

(def-method 'stream :lisp_readchar)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'args 'value)
	(pptr 'iter_begin)
	(pubyte 'chars)
	(int 'length)
	(uint 'width)

	(push-scope)
	(entry 'stream :lisp_readchar {this, args})

	(d-call 'list :get_length {args} {_, length})
	(errorifnot {length = 1 || length = 2} 'error1)
	(call 'list :get_begin {args} {_, iter_begin})

(errorcases
	(call 'obj :inst_of (cat {iter_begin[0], @} (f-path 'stream :vtable)))
	(gotoif (list (method-output 'obj :inst_of 1) '= 0) 'error2))

	(assign {length, 1} '(r0 r1))
	(vpif '(r0 = 2))
		(assign {iter_begin[ptr_size]} '(r0))
	(errorcases
		(assign `((@ ,(f-path 'num :vtable)) (r0 obj_vtable)) '(r1 r2))
		(gotoif '(r1 /= r2) 'error3))
		(assign '((r0 num_value)) '(r1))
		(vp-sub-cr 1 r1)
		(vp-and-cr 7 r1)
		(vp-add-cr 1 r1)
	(endif)
	(assign '(r1) {width})

	(call 'num :create '(0) {value})
	(assign {&value->num_value} '(r0))
	(loop-start 'exit)
		(assign '(r0) {chars})
		(call 'stream :read_char {iter_begin[0]} '(_ r1))
		(vpif '(r1 = -1))
			(call 'obj :deref {value})
			(call 'obj :ref {this->lisp_sym_nil} {value})
			(break 'exit)
		(endif)
		(assign {chars, width} '(r0 r2))
		(vp-cpy-ri-b r1 r0 0)
		(vp-add-cr 1 r0)
		(vp-sub-cr 1 r2)
		(assign '(r2) {width})
	(loop-until '(r2 = 0))

	(exit 'stream :lisp_readchar {this, value})
	(return)

(errorcases
	(defq in (method-input 'lisp :repl_error))
(vp-label 'error1)
	(vp-cpy-cr error_msg_wrong_num_of_args (elem 2 in))
	(goto 'error)
(vp-label 'error2)
	(vp-cpy-cr error_msg_not_a_stream (elem 2 in))
	(goto 'error)
(vp-label 'error3)
	(vp-cpy-cr error_msg_not_a_number (elem 2 in))
(vp-label 'error)
	(assign {this, args} (erase in 1 3))
	(jump 'lisp :repl_error `(,(elem 0 in) "(read-char stream [width])" ,(elem 2 in) ,(elem 3 in))))

	(pop-scope-syms)

(def-func-end)

(def-method 'stream :lisp_readline)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'stream :lisp_readline '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'stream :read_line))
	(list-bind-args r1 in '(:stream))
	(call 'stream :read_line in '(_ r1))
	(vp-pop r0)
	(vpif '(r1 = 0))
		(assign '((r0 lisp_sym_nil)) '(r1))
		(class/obj/ref r1 r2)
	(endif)

	(exit 'stream :lisp_readline '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(read-line stream)" error_msg_wrong_types r1))
	(signature '(stream)))

(def-func-end)

(def-method 'stream :lisp_readavail)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'stream :lisp_readavail '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(list-bind-args r1 '(r2) '(:stream))
	(assign '((r2 stream_bufp) (r2 stream_bufe)) '(r0 r1))
	(assign '(r1) '((r2 stream_bufp)))
	(vp-sub-rr r0 r1)
	(call 'str :create_from_buffer '(r0 r1) '(r1))
	(vp-pop r0)

	(exit 'stream :lisp_readavail '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(read-avail stream)" error_msg_wrong_types r1))
	(signature '(stream)))

(def-func-end)

(def-method 'stream :lisp_write)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'stream :lisp_write '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 2) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'stream :write))
	(array-bind-args r1 (slice 0 2 in))
	(assign `((,(elem 1 in) str_length)) `(,(elem 2 in)))
	(list-cast-args in '(:stream :str _))
	(call 'stream :write in '(r1))
	(class/obj/ref r1 r2)
	(vp-pop r0)

	(exit 'stream :lisp_write '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(write stream str)" error_msg_wrong_types r1))
	(signature '(stream str)))

(def-func-end)

(def-method 'stream :lisp_writechar)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(vp-def (iter_end iter_begin this args stream value width)
		'(r7 r8 r9 r10 r11 r12 r13))

	(entry 'stream :lisp_writechar `(,this ,args))

	(assign `((,args array_length)) `(,value))
(errorcases
	(gotoif (list value '< 2) 'error1)
	(gotoif (list value '> 3) 'error1))
	(assign `((,args array_begin)) `(,iter_begin))
	(assign `((,iter_begin 0)) `(,stream))

(errorcases
	(call 'obj :inst_of `(,stream (@ ,(f-path 'stream :vtable))))
	(gotoif (list (method-output 'obj :inst_of 1) '= 0) 'error2))

	(vp-cpy-cr 1 width)
	(vpif (list value '= 3))
		(assign `((,iter_begin ,(* ptr_size 2))) '(r0))
	(errorcases
		(assign `((@ ,(f-path 'num :vtable)) (r0 obj_vtable)) '(r1 r2))
		(gotoif '(r1 /= r2) 'error3))
		(assign '((r0 num_value)) `(,width))
		(vp-sub-cr 1 width)
		(vp-and-cr 7 width)
		(vp-add-cr 1 width)
	(endif)

	(assign `((,iter_begin ptr_size)) `(,value))
	(assign `((,value obj_vtable) (@ ,(f-path 'list :vtable))) '(r0 r1))
	(vpif '(r0 = r1))
	(errorcases
		(call 'lisp :env_args_type `(,value (@ ,(f-path 'num :vtable)) 1))
		(gotoif (list (method-output 'lisp :env_args_type 0) '= 0) 'error3))
		(class/array/get_both value iter_begin iter_end)
		(loop-start)
			(vp-push this stream width iter_begin iter_end)
			(assign `((,iter_begin 0)) `(,value))
			(call 'stream :write `(,stream (& ,value num_value) ,width))
			(vp-pop this stream width iter_begin iter_end)
			(vp-add-cr ptr_size iter_begin)
		(loop-until (list iter_begin '= iter_end))
	(else)
	(errorcases
		(call 'obj :inst_of `(,value (@ ,(f-path 'num :vtable))))
		(gotoif (list (method-output 'obj :inst_of 1) '= 0) 'error3))
		(vp-push this stream)
		(call 'stream :write `(,stream (& ,value num_value) ,width))
		(vp-pop this stream)
	(endif)
	(class/obj/ref stream r0)

	(exit 'stream :lisp_writechar `(,this ,stream))
	(vp-ret)

(errorcases
	(defq err (method-input 'lisp :repl_error 2))
(vp-label 'error1)
	(vp-cpy-cr error_msg_wrong_num_of_args err)
	(goto 'error)
(vp-label 'error2)
	(vp-cpy-cr error_msg_not_a_stream err)
	(goto 'error)
(vp-label 'error3)
	(vp-cpy-cr error_msg_not_a_number err)
(vp-label 'error)
	(jump 'lisp :repl_error `(,this "(write-char stream list|num [width])" ,err ,args)))

(def-func-end)

(def-method 'stream :lisp_write_flush)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'stream :lisp_write_flush '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 1) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'stream :flush))
	(array-bind-args r1 in)
	(call 'stream :flush in '(r1))
	(class/obj/ref r1 r2)
	(vp-pop r0)

	(exit 'stream :lisp_write_flush '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(stream-flush stream)" error_msg_wrong_types r1))
	(signature '(stream)))

(def-func-end)

(def-method 'stream :lisp_seek)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'stream :lisp_seek '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 3) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(defq in (method-input 'stream :seek))
	(list-bind-args r1 in '(:stream :num :num))
	(call 'stream :seek in '(_ r0))
	(call 'num :create '(r0) '(r1))
	(vp-pop r0)

	(exit 'stream :lisp_seek '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(stream-seek stream offset pos)" error_msg_wrong_types r1))
	(signature '(stream num num)))

(def-func-end)
