(include "sys/func.inc")
(include "sys/str/class.inc")
(include "class/list/class.inc")
(include "class/str/class.inc")
(include "class/stream/class.inc")
(include "class/sstream/class.inc")
(include "lib/consts/chars.inc")

(gen-create 'stream)
(gen-vtable 'stream)

(def-method 'stream :init)
	;inputs
	;r0 = stream object (ptr)
	;r1 = vtable (pptr)
	;r2 = buffer object, 0 if none (ptr)
	;r3 = buffer data, 0 if none (ptr)
	;r4 = buffer start (pubyte)
	;r5 = buffer length (uint)
	;outputs
	;r0 = stream object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;r1-r5

	(entry 'stream :init '(r0 r1 r2 r3 r4 r5))

	;init parent
	(vp-add-rr r4 r5)
	(assign '(r2 r3 r4 r5) '((r0 stream_object) (r0 stream_buffer) (r0 stream_bufp) (r0 stream_bufe)))
	(s-call 'stream :init '(r0 r1) '(r0 r1))

	(exit 'stream :init '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'stream :deinit)
	;inputs
	;r0 = stream object (ptr)
	;outputs
	;r0 = stream object (ptr)
	;trashes
	;r1-r14

	(entry 'stream :deinit '(r0))

	;deref any buffer object
	(vp-push r0)
	(call 'obj :deref_if '((r0 stream_object)))

	;free any buffer
	(assign '((rsp 0)) '(r0))
	(call 'sys_mem :free '((r0 stream_buffer)))
	(vp-pop r0)

	;parent deinit
	(s-jump 'stream :deinit '(r0))

(def-func-end)

(def-method 'stream :read)
	;inputs
	;r0 = stream object (ptr)
	;r1 = buffer (pubyte)
	;r2 = buffer length (uint)
	;outputs
	;r0 = stream object (ptr)
	;r1 = -1 for EOF, else bytes read (int)
	;trashes
	;r1-r14

	(entry 'stream :read '(r0 r1 r2))

	;check if < 1 char
	(vpif '(r2 < 1))
		;check if 1 char
		(switch)
		(vpcase '(r2 = 1))
			(vp-push r1)
			(call 'stream :read_char '(r0) '(r0 r1))
			(vp-pop r2)
			(vpif '(r1 /= -1))
				(vp-cpy-ri-b r1 r2 0)
				(vp-cpy-cr 1 r1)
			(endif)
			(exit 'stream :read '(r0 r1))
			(vp-ret)
		(default)
			(exit 'stream :read '(r0 0))
			(vp-ret)
		(endswitch)
	(endif)

	(assign '(r0 r2 0) '(r5 r4 r6))
	(assign '((r5 stream_bufp) (r5 stream_bufe)) '(r0 r2))
	(loop-while '(r4 /= 0) 'exit)
		(vpif '(r2 /= r0))
			(vp-sub-rr r0 r2)
			(vpif '(r2 > r4))
				(vp-cpy-rr r4 r2)
			(endif)
			(vp-sub-rr r2 r4)
			(vp-add-rr r2 r6)
			(call 'sys_mem :copy '(r0 r1 r2) '(r0 r1))
			(assign '(r0 (r5 stream_bufe)) '((r5 stream_bufp) r2))
		(else)
			(vp-push r1 r4 r6)
			(call 'stream :read_next '(r5) '(r5 r0))
			(vp-pop r1 r4 r6)
			(vpif '(r0 = -1))
				(breakif '(r6 /= 0) 'exit)
				(vp-cpy-rr r0 r6)
				(break 'exit)
			(endif)
			(assign '((r5 stream_bufp) (r5 stream_bufe)) '(r0 r2))
			(breakif '(r2 = r0) 'exit)
		(endif)
	(loop-end)

	(exit 'stream :read '(r5 r6))
	(vp-ret)

(def-func-end)

(def-method 'stream :read_char)
	;inputs
	;r0 = stream object (ptr)
	;outputs
	;r0 = stream object (ptr)
	;r1 = -1 for EOF, else char read (int)
	;trashes
	;r1-r14

	(entry 'stream :read_char '(r0))

	(assign '((r0 stream_bufp) (r0 stream_bufe)) '(r2 r1))
	(vpif '(r1 = r2))
		(loop-start)
			(call 'stream :read_next '(r0) '(r0 r1))
			(gotoif '(r1 = -1) 'eof)
			(assign '((r0 stream_bufp) (r0 stream_bufe)) '(r2 r1))
		(loop-until '(r1 /= r2))
	(endif)
	(vp-cpy-ir-ub r2 0 r1)
	(vp-add-cr byte_size r2)
	(assign '(r2) '((r0 stream_bufp)))

(vp-label 'eof)
	(exit 'stream :read_char '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'stream :read_line)
	;inputs
	;r0 = stream object (ptr)
	;outputs
	;r0 = stream object (ptr)
	;r1 = 0 for EOF, else str object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'str_stream 'value)
	(int 'ch)

	(push-scope)
	(entry 'stream :read_line {this})

	(switch)
		(vp-def (this bufp bufe ch bufps))
		(assign {this} (list this))
		(vp-cpy-ir this stream_bufp bufp)
		(vp-cpy-ir this stream_bufe bufe)
		(vp-cpy-rr bufp bufps)
		(loop-start)
			(gotoif (list bufp '= bufe) 'slow_but_sure)
			(vp-cpy-ir-ub bufp 0 ch)
			(vp-add-cr byte_size bufp)
		(loop-until (list ch '= +char_lf+))
		(vp-cpy-ri bufp this stream_bufp)
		(vp-sub-rr bufps bufp)
		(vp-sub-cr byte_size bufp)
		(call 'str :create_from_buffer (list bufps bufp) {value})
	(else)
	(vp-label 'slow_but_sure)
		(call 'stream :read_char {this} {_, ch})
		(assign {0} {value})
		(breakif {ch = -1})
		(call 'str :create_from_buffer {0, str_gap} {value})
		(call 'sstream :create {value} {str_stream})
		(loop-whilenot {ch = +char_lf+ || ch = -1})
			(call 'stream :write_char {str_stream, ch})
			(call 'stream :read_char {this} {_, ch})
		(loop-end)
		(call 'sstream :ref_string {str_stream} {_, value})
		(call 'obj :deref {str_stream})
	(endswitch)

	(exit 'stream :read_line {this, value})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'stream :read_next)
	;inputs
	;r0 = stream object (ptr)
	;outputs
	;r0 = stream object (ptr)
	;r1 = -1 for EOF, else more data
	;trashes
	;r1-r14

	(entry 'stream :read_next '(r0))
	(exit 'stream :read_next '(r0 -1))
	(vp-ret)

(def-func-end)

(def-method 'stream :skip)
	;inputs
	;r0 = stream object (ptr)
	;r1 = char to skip (uint)
	;outputs
	;r0 = stream object (ptr)
	;trashes
	;r1-r14

	(entry 'stream :skip '(r0 r1))

	(assign '((r0 stream_bufp) (r0 stream_bufe)) '(r2 r3))
	(loop-start)
		(loop-while '(r2 = r3))
			(vp-push r1)
			(assign '(r2) '((r0 stream_bufp)))
			(call 'stream :read_next '(r0) '(r0 r4))
			(vp-pop r1)
			(gotoif '(r4 = -1) 'funcexit)
			(assign '((r0 stream_bufp) (r0 stream_bufe)) '(r2 r3))
		(loop-end)
		(vp-cpy-ir-ub r2 0 r4)
		(breakif '(r4 /= r1))
		(vp-add-cr byte_size r2)
	(loop-end)
	(assign '(r2) '((r0 stream_bufp)))

(vp-label 'funcexit)
	(exit 'stream :skip '(r0))
	(vp-ret)

(def-func-end)

(def-method 'stream :skip_not)
	;inputs
	;r0 = stream object (ptr)
	;r1 = char to not skip (uint)
	;outputs
	;r0 = stream object (ptr)
	;trashes
	;r1-r14

	(entry 'stream :skip_not '(r0 r1))

	(assign '((r0 stream_bufp) (r0 stream_bufe)) '(r2 r3))
	(loop-start)
		(loop-while '(r2 = r3))
			(vp-push r1)
			(assign '(r2) '((r0 stream_bufp)))
			(call 'stream :read_next '(r0) '(r0 r4))
			(vp-pop r1)
			(gotoif '(r4 = -1) 'funcexit)
			(assign '((r0 stream_bufp) (r0 stream_bufe)) '(r2 r3))
		(loop-end)
		(vp-cpy-ir-ub r2 0 r4)
		(breakif '(r4 = r1))
		(vp-add-cr byte_size r2)
	(loop-end)
	(assign '(r2) '((r0 stream_bufp)))

(vp-label 'funcexit)
	(exit 'stream :skip_not '(r0))
	(vp-ret)

(def-func-end)

(def-method 'stream :write)
	;inputs
	;r0 = stream object (ptr)
	;r1 = buffer (pubyte)
	;r2 = buffer length (uint)
	;outputs
	;r0 = stream object (ptr)
	;trashes
	;r1-r14

	(entry 'stream :write '(r0 r1 r2))

	;check if 1 char
	(vpif '(r2 = 1))
		(jump 'stream :write_char '(r0 (r1 0 ub)))
	(endif)

	(assign '(r0 r1 r2) '(r5 r0 r4))
	(assign '((r5 stream_bufp) (r5 stream_bufe)) '(r1 r2))
	(loop-while '(r4 /= 0) 'exit)
		(vpif '(r2 /= r1))
			(vp-sub-rr r1 r2)
			(vpif '(r2 > r4))
				(vp-cpy-rr r4 r2)
			(endif)
			(vp-sub-rr r2 r4)
			(call 'sys_mem :copy '(r0 r1 r2) '(r0 r1))
			(assign '(r1 (r5 stream_bufe)) '((r5 stream_bufp) r2))
		(else)
			(vp-push r0 r4)
			(call 'stream :write_next '(r5) '(r5))
			(vp-pop r0 r4)
			(assign '((r5 stream_bufp) (r5 stream_bufe)) '(r1 r2))
			(breakif '(r2 = r1) 'exit)
		(endif)
	(loop-end)

	(exit 'stream :write '(r5))
	(vp-ret)

(def-func-end)

(def-method 'stream :write_char)
	;inputs
	;r0 = stream object (ptr)
	;r1 = char (uint)
	;outputs
	;r0 = stream object (ptr)
	;trashes
	;r1-r14

	(entry 'stream :write_char '(r0 r1))

	(assign '((r0 stream_bufp) (r0 stream_bufe)) '(r2 r3))
	(vpif '(r2 = r3))
		(vp-push r1)
		(call 'stream :write_next '(r0) '(r0))
		(vp-pop r1)
		(assign '((r0 stream_bufp) (r0 stream_bufe)) '(r2 r3))
		(gotoif '(r2 = r3) 'eof)
	(endif)
	(vp-cpy-ri-b r1 r2 0)
	(vp-add-cr byte_size r2)
	(assign '(r2) '((r0 stream_bufp)))

(vp-label 'eof)
	(exit 'stream :write_char '(r0))
	(vp-ret)

(def-func-end)

(def-method 'stream :write_cstr)
	;inputs
	;r0 = stream object (ptr)
	;r1 = buffer (pubyte)
	;outputs
	;r0 = stream object (ptr)
	;trashes
	;r1-r14

	(entry 'stream :write_cstr '(r3 r1))

	(call 'sys_str :length '(r1) '(r0 r1))
	(jump 'stream :write '(r3 r0 r1))

(def-func-end)

(def-method 'stream :flush)
	;inputs
	;r0 = stream object (ptr)
	;outputs
	;r0 = stream object (ptr)
	;trashes
	;r1-r14

	(entry 'stream :flush '(r0))

	(class/stream/flush)

	(exit 'stream :flush '(r0))
	(vp-ret)

(def-func-end)

(def-method 'stream :read_bits)
	;inputs
	;r0 = stream object (ptr)
	;r1 = num bits (uint)
	;r2 = bit pool (ulong)
	;r3 = bit pool size (uint)
	;outputs
	;r0 = stream object (ptr)
	;r1 = -1 if eof, else data (long)
	;r2 = bit pool (ulong)
	;r3 = bit pool size (uint)
	;trashes
	;r1-r14

	(vp-def (this num_bits bit_pool bit_pool_size data))

	(entry 'stream :read_bits (list this num_bits bit_pool bit_pool_size))

	;fill bit pool with data
	(loop-while (list num_bits '> bit_pool_size))
		(vp-push num_bits bit_pool bit_pool_size)
		(call 'stream :read_char (list this) (list this data))
		(vp-pop num_bits bit_pool bit_pool_size)
		(gotoif (list data '= -1) 'eof)
		(vp-shl-rr bit_pool_size data)
		(vp-add-cr 8 bit_pool_size)
		(vp-add-rr data bit_pool)
	(loop-end)

	;extact bits from bit pool
	(vp-cpy-cr -1 data)
	(vp-shl-rr num_bits data)
	(vp-xor-cr -1 data)
	(vp-and-rr bit_pool data)
	(vp-shr-rr num_bits bit_pool)
	(vp-sub-rr num_bits bit_pool_size)

	(exit 'stream :read_bits (list this data bit_pool bit_pool_size))
	(vp-ret)

(vp-label 'eof)
	(exit 'stream :read_bits (list this -1 0 0))
	(vp-ret)

(def-func-end)

(def-method 'stream :write_bits)
	;inputs
	;r0 = stream object (ptr)
	;r1 = data (uint)
	;r2 = num bits (uint)
	;r3 = bit pool (ulong)
	;r4 = bit pool size (uint)
	;outputs
	;r0 = stream object (ptr)
	;r1 = bit pool (ulong)
	;r2 = bit pool size (uint)
	;trashes
	;r1-r14

	(vp-def (this data num_bits bit_pool bit_pool_size))

	(entry 'stream :write_bits (list this data num_bits bit_pool bit_pool_size))

	;append bits to bit pool
	(vp-shl-rr bit_pool_size data)
	(vp-or-rr data bit_pool)
	(vp-add-rr num_bits bit_pool_size)

	;flush bit pool to stream
	(loop-while (list bit_pool_size '> 8))
		(vp-push bit_pool bit_pool_size)
		(call 'stream :write_char (list this bit_pool) (list this))
		(vp-pop bit_pool bit_pool_size)
		(vp-shr-cr 8 bit_pool)
		(vp-sub-cr 8 bit_pool_size)
	(loop-end)

	(exit 'stream :write_bits (list this bit_pool bit_pool_size))
	(vp-ret)

(def-func-end)

(def-method 'stream :seek)
	;inputs
	;r0 = stream object (ptr)
	;r1 = offset (long)
	;r2 = pos (uint)
	;outputs
	;r0 = stream object (ptr)
	;r1 = -1 for error, else file position
	;trashes
	;r1-r14

	(entry 'stream :seek '(r0 r1 r2))
	(exit 'stream :seek '(r0 -1))
	(vp-ret)

(def-func-end)
