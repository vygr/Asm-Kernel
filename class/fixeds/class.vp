(include "sys/func.inc")
(include "class/fixeds/class.inc")
(include "sys/math/class.inc")

(gen-create 'fixeds)
(gen-vtable 'fixeds)

(defun-bind mulop (_ v)
	;trashes
	;r1-r6+
	(vp-def (dst src1 src2 iter_begin iter_end))
	(entry 'fixeds _ `(,dst ,src1 ,src2))
	(class/array/get_both dst iter_begin iter_end)
	(assign `((,src1 array_begin) (,src2 array_begin)) `(,src1 ,src2))
	(vec-set 5)
	(loop-start)
		(vec-load-long 1 src1)
		(vec-load-long 1 src2)
		((eval (sym (cat "vec-" v))) 1)
		(vec-store-long 1 iter_begin)
		(vp-add-cr long_size iter_begin)
		(vp-add-cr long_size src1)
		(vp-add-cr long_size src2)
	(loop-until (list iter_begin '= iter_end))
	(exit 'fixeds _ `(,dst -1))
	(vp-ret))

(defun-bind divop (_ v)
	;trashes
	;r1-r8+
	(vp-def (s1 s2 dst src1 src2 iter_begin iter_end) '(r1 r2 r4 r5 r6 r7 r8))
	(entry 'fixeds _ `(,dst ,s1 ,s2))
	(class/array/get_both dst iter_begin iter_end)
	(assign `((,s1 array_begin) (,s2 array_begin)) `(,src1 ,src2))
	(vec-set 0)
	(loop-start)
		(vec-load-long 1 src1)
		(vec-load-long 1 src2)
		(errorif (list (elem 0 (vec-top 1)) '= 0) 'error)
		((eval (sym (cat "vec-" v))) 1)
		(vec-store-long 1 iter_begin)
		(vp-add-cr long_size iter_begin)
		(vp-add-cr long_size src1)
		(vp-add-cr long_size src2)
	(loop-until (list iter_begin '= iter_end))
	(exit 'fixeds _ `(,dst -1))
	(vp-ret)
(errorcases
(vp-label 'error)
	(exit 'fixeds _ `(,dst 0))
	(vp-ret)))

(defun-bind fracop (_ v)
	;trashes
	;r1-r4+
	(vp-def (dst src iter_begin iter_end))
	(entry 'fixeds _ `(,dst ,src))
	(class/array/get_both dst iter_begin iter_end)
	(assign `((,src array_begin)) `(,src))
	(vec-set 4)
	(loop-start)
		(vec-load-long 1 src)
		((eval (sym (cat "vec-" v))) 1)
		(vec-store-long 1 iter_begin)
		(vp-add-cr long_size iter_begin)
		(vp-add-cr long_size src)
	(loop-until (list iter_begin '= iter_end))
	(exit 'fixeds _ `(,dst))
	(vp-ret))

(def-method 'fixeds :mul)
	;inputs
	;r0 = fixeds object (ptr)
	;r1 = source1 fixeds object, can be same (ptr)
	;r2 = source2 fixeds object, can be same (ptr)
	;outputs
	;r0 = fixeds object (ptr)
	;trashes
	;r1-r6

	(mulop :mul 'fmul)

(def-func-end)

(def-method 'fixeds :div)
	;inputs
	;r0 = fixeds object (ptr)
	;r1 = source1 fixeds object, can be same (ptr)
	;r2 = source2 fixeds object, can be same (ptr)
	;outputs
	;r0 = fixeds object (ptr)
	;trashes
	;r1-r8

	(divop :div 'fdiv)

(def-func-end)

(def-method 'fixeds :mod)
	;inputs
	;r0 = fixeds object (ptr)
	;r1 = source1 fixeds object, can be same (ptr)
	;r2 = source2 fixeds object, can be same (ptr)
	;outputs
	;r0 = fixeds object (ptr)
	;trashes
	;r1-r8

	(divop :mod 'fmod)

(def-func-end)

(def-method 'fixeds :frac)
	;inputs
	;r0 = fixeds object (ptr)
	;r1 = source fixeds object, can be same (ptr)
	;outputs
	;r0 = fixeds object (ptr)
	;trashes
	;r1-r5

	(fracop :frac 'frac)

(def-func-end)

(def-method 'fixeds :floor)
	;inputs
	;r0 = fixeds object (ptr)
	;r1 = source fixeds object, can be same (ptr)
	;outputs
	;r0 = fixeds object (ptr)
	;trashes
	;r1-r5

	(fracop :floor 'floor)

(def-func-end)

(def-method 'fixeds :scale)
	;inputs
	;r0 = fixeds object (ptr)
	;r1 = source fixeds object, can be same (ptr)
	;r2 = scale (fixed)
	;outputs
	;r0 = fixeds object (ptr)
	;trashes
	;r1-r5

	(vp-def (dst src scale iter_begin iter_end))

	(entry 'fixeds :scale `(,dst ,src ,scale))

	(class/array/get_both dst iter_begin iter_end)
	(assign `((,src array_begin)) `(,src))
	(vec-set 5)
	(loop-start)
		(vec-load-long 1 src)
		(vec-fmul 1 `(,scale))
		(vec-store-long 1 iter_begin)
		(vp-add-cr long_size iter_begin)
		(vp-add-cr long_size src)
	(loop-until `(,iter_begin = ,iter_end))

	(exit 'fixeds :scale `(,dst))
	(vp-ret)

(def-func-end)
