(include "sys/func.inc")
(include "sys/math/class.inc")
(include "class/reals/class.inc")

(gen-create 'reals)
(gen-vtable 'reals)

(defun-bind addop (_ p)
	;trashes
	;r1-r14
	(vp-def (dst src1 src2 iter_begin iter_end))
	(entry 'reals _ `(,dst ,src1 ,src2))
	(class/array/get_both dst iter_begin iter_end)
	(assign `((,src1 array_begin) (,src2 array_begin)) `(,src1 ,src2))
	(loop-start)
		(eval p)
		(vp-add-cr long_size iter_begin)
		(vp-add-cr long_size src1)
		(vp-add-cr long_size src2)
	(loop-until (list iter_begin '= iter_end))
	(exit 'reals _ `(,dst -1))
	(vp-ret))

(defun-bind absop (_ p)
	;trashes
	;r1-r14
	(vp-def (dst src1 iter_begin iter_end))
	(entry 'reals _ `(,dst ,src1))
	(class/array/get_both dst iter_begin iter_end)
	(assign `((,src1 array_begin)) `(,src1))
	(loop-start)
		(eval p)
		(vp-add-cr long_size iter_begin)
		(vp-add-cr long_size src1)
	(loop-until (list iter_begin '= iter_end))
	(exit 'reals _ `(,dst))
	(vp-ret))

(def-method 'reals :add)
	;inputs
	;r0 = reals object (ptr)
	;r1 = source1 reals object, can be same (ptr)
	;r2 = source2 reals object, can be same (ptr)
	;outputs
	;r0 = reals object (ptr)
	;trashes
	;r1-r14

	(addop :add
		'(call 'sys_math :r_add `((,src1 0) (,src2 0)) `((,iter_begin 0))))

(def-func-end)

(def-method 'reals :sub)
	;inputs
	;r0 = reals object (ptr)
	;r1 = source1 reals object, can be same (ptr)
	;r2 = source2 reals object, can be same (ptr)
	;outputs
	;r0 = reals object (ptr)
	;trashes
	;r1-r14

	(addop :sub
		'(call 'sys_math :r_sub `((,src1 0) (,src2 0)) `((,iter_begin 0))))

(def-func-end)

(def-method 'reals :mul)
	;inputs
	;r0 = reals object (ptr)
	;r1 = source1 reals object, can be same (ptr)
	;r2 = source2 reals object, can be same (ptr)
	;outputs
	;r0 = reals object (ptr)
	;trashes
	;r1-r14

	(addop :mul
		'(call 'sys_math :r_mul `((,src1 0) (,src2 0)) `((,iter_begin 0))))

(def-func-end)

(defun-bind divop (_ p)
	;trashes
	;r1-r14
	(vp-def (dst src1 src2 iter_begin iter_end))
	(entry 'reals _ `(,dst ,src1 ,src2))
	(class/array/get_both dst iter_begin iter_end)
	(assign `((,src1 array_begin) (,src2 array_begin)) `(,src1 ,src2))
	(loop-start)
		(eval p)
		(vp-add-cr long_size iter_begin)
		(vp-add-cr long_size src1)
		(vp-add-cr long_size src2)
	(loop-until (list iter_begin '= iter_end))
	(exit 'reals _ `(,dst -1))
	(vp-ret)
(errorcases
(vp-label 'error)
	(exit 'reals _ `(,dst 0))
	(vp-ret)))

(def-method 'reals :div)
	;inputs
	;r0 = reals object (ptr)
	;r1 = source1 reals object, can be same (ptr)
	;r2 = source2 reals object, can be same (ptr)
	;outputs
	;r0 = reals object (ptr)
	;trashes
	;r1-r14

	(defq in (method-input 'sys_math :r_div))
	(divop :div
		'(progn
			(assign `((,src1 0) (,src2 0)) in)
			(errorif `(,(elem 1 in) = 0) 'error)
			(call 'sys_math :r_div in `((,iter_begin 0)))))

(def-func-end)

(def-method 'reals :mod)
	;inputs
	;r0 = reals object (ptr)
	;r1 = source1 reals object, can be same (ptr)
	;r2 = source2 reals object, can be same (ptr)
	;outputs
	;r0 = reals object (ptr)
	;trashes
	;r1-r14

	(defq in (method-input 'sys_math :r_mod))
	(divop :mod
		'(progn
			(assign `((,src1 0) (,src2 0)) in)
			(errorif `(,(elem 1 in) = 0) 'error)
			(call 'sys_math :r_mod in `((,iter_begin 0)))))

(def-func-end)

(def-method 'reals :frac)
	;inputs
	;r0 = reals object (ptr)
	;r1 = source reals object, can be same (ptr)
	;outputs
	;r0 = reals object (ptr)
	;trashes
	;r1-r14

	(absop :frac
		'(call 'sys_math :r_frac `((,src1 0)) `((,iter_begin 0))))

(def-func-end)

(def-method 'reals :floor)
	;inputs
	;r0 = reals object (ptr)
	;r1 = source reals object, can be same (ptr)
	;outputs
	;r0 = reals object (ptr)
	;trashes
	;r1-r14

	(absop :floor
		'(call 'sys_math :r_floor `((,src1 0)) `((,iter_begin 0))))

(def-func-end)

(def-method 'reals :abs)
	;inputs
	;r0 = reals object (ptr)
	;r1 = source reals object, can be same (ptr)
	;outputs
	;r0 = reals object (ptr)
	;trashes
	;r1-r14

	(absop :abs
		'(progn
 			(defq in (method-input 'sys_math :r_sub 1))
			(vp-cpy-ir src1 0 in)
 			(vpif `(,in < 0))
				(call 'sys_math :r_sub `(0 ,in) `(,in))
			(endif)
			(vp-cpy-ri in iter_begin 0)))

(def-func-end)

(def-method 'reals :scale)
	;inputs
	;r0 = reals object (ptr)
	;r1 = source reals object, can be same (ptr)
	;r2 = scale (real)
	;outputs
	;r0 = reals object (ptr)
	;trashes
	;r1-r14

	(vp-def (dst src scale iter_begin iter_end))

	(entry 'reals :scale `(,dst ,src ,scale))

	(class/array/get_both dst iter_begin iter_end)
	(assign `((,src array_begin)) `(,src))
	(loop-start)
		(call 'sys_math :r_mul `((,src 0) ,scale) `((,iter_begin 0)))
		(vp-add-cr long_size iter_begin)
		(vp-add-cr long_size src)
	(loop-until `(,iter_begin = ,iter_end))

	(exit 'reals :scale `(,dst))
	(vp-ret)

(def-func-end)

(def-method 'reals :sum)
	;inputs
	;r0 = reals object (ptr)
	;outputs
	;r0 = reals object (ptr)
	;r1 = sum (real)
	;trashes
	;r1-r14

	(vp-def (sum dst iter_begin iter_end)
		(list (method-input 'sys_math :r_add 0)))

	(entry 'reals :sum `(,dst))

	(call 'reals :get_both `(,dst) `(,dst ,iter_begin ,iter_end))
	(vp-xor-rr sum sum)
	(loop-while `(,iter_begin /= ,iter_end))
		(call 'sys_math :r_add `(,sum (,iter_begin 0)) `(,sum))
		(vp-add-cr long_size iter_begin)
	(loop-end)

	(exit 'reals :sum `(,dst ,sum))
	(vp-ret)

(def-func-end)
