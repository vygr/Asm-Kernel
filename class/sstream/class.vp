(include "sys/func.inc")
(include "class/str/class.inc")
(include "class/sstream/class.inc")

(gen-create 'sstream)
(gen-vtable 'sstream)

(def-method 'sstream :init)
	;inputs
	;r0 = sstream object (ptr)
	;r1 = vtable (pptr)
	;r2 = str object (ptr)
	;outputs
	;r0 = sstream object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;r1-r5

	(entry 'sstream :init '(r0 r1 r2))

	;init parent
	(s-jump 'sstream :init '(r0 r1 r2 0 (& r2 str_data) (r2 str_length)))

(def-func-end)

(def-method 'sstream :ref_string)
	;inputs
	;r0 = sstream object (ptr)
	;outputs
	;r0 = sstream object (ptr)
	;r1 = str object (ptr)
	;trashes
	;r1-r2

	(entry 'sstream :ref_string '(r0))

	(vp-push r0)
	(assign '((r0 stream_bufp) (r0 stream_object)) '(r1 r0))
	(vp-xor-rr r2 r2)
	(assign '(r2 r2 (& r0 str_data)) '((r1 0 b) (r0 str_hashcode) r2))
	(vp-sub-rr r2 r1)
	(assign '(r1) '((r0 str_length)))
	(call 'str :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'sstream :ref_string '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'sstream :write_next)
	;inputs
	;r0 = sstream object (ptr)
	;outputs
	;r0 = sstream object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'new_str)
	(uint 'length)

	(push-scope)
	(entry 'sstream :write_next {this})

	(assign {this->stream_bufp - &this->stream_object->str_data} {length})
	(call 'str :create_from_buffer {0, length * 2 + 32} {new_str})
	(call 'sys_mem :copy {&this->stream_object->str_data, &new_str->str_data, length} {_, this->stream_bufp})
	;round bufe up to very end of block !
	(assign {length * 2 + 32 + str_data - 1} {length})
	(assign {length | length >> 1} {length})
	(assign {length | length >> 2} {length})
	(assign {length | length >> 4} {length})
	(assign {length | length >> 8} {length})
	(assign {length | length >> 16} {length})
	(assign {length | length >> 32} {length})
	(assign {new_str + length} {this->stream_bufe})
	(call 'str :deref {this->stream_object})
	(assign {new_str} {this->stream_object})

	(exit 'sstream :write_next {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'sstream :write_flush)
	;inputs
	;r0 = sstream object (ptr)
	;outputs
	;r0 = sstream object (ptr)
	;trashes
	;r1-r14

	(entry 'sstream :write_flush '(r0))

	;nul byte
	(assign '((r0 stream_bufp) 0) '(r1 r2))
	(assign '(r2 (r0 stream_object)) '((r1 0 b) r2))
	(vp-add-cr str_data r2)
	(vpif '(r1 > r2))
		(assign '(r2 r0) '((r0 stream_bufp) r3))
		(call 'sys_pii :write_str '(1 r2))
		(vp-cpy-rr r3 r0)
	(endif)

	(exit 'sstream :write_flush '(r0))
	(vp-ret)

(def-func-end)
