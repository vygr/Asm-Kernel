(include "sys/func.inc")
(include "class/out/class.inc")
(include "class/in/class.inc")

(gen-create 'in)
(gen-vtable 'in)

(def-method 'in :init)
	;inputs
	;r0 = in object (ptr)
	;r1 = vtable (pptr)
	;r2 = 0, else mailbox id (uint)
	;outputs
	;r0 = in object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;r1-r14

	(entry 'in :init '(r0 r1 r2))
	(assign '(r2) '((r0 in_mbox_oid)))

	;init parent
	(s-call 'in :init '(r0 r1 0 0 0 0) '(r0 r1))
	(vpif '(r1 /= 0))
		;init myself
		(vp-xor-rr r1 r1)
		(assign '(r1 r1 stream_mail_state_started) '((r0 in_seqnum) (r0 in_ack_seqnum) r1))
		(vp-push r0)
		(assign '(r1 (r0 in_mbox_oid)) '((r0 in_state) r1))
		(vpif '(r1 = 0))
			;need a new mailbox
			(call 'sys_mail :alloc_mbox nil '(r2 r1))
			(vp-pop r0)
			(assign '(r2) '((r0 in_mbox_id)))
		(else)
			;given an existing mailbox
			(assign '(r1) '((r0 in_mbox_id)))
			(call 'sys_mail :validate '(r1) '(r1))
			(vp-pop r0)
		(endif)
		(assign '(r1 (& r0 in_list)) '((r0 in_mbox_addr) r1))
		(lh-init r1 r2)
	(endif)

	(exit 'in :init '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'in :deinit)
	;inputs
	;r0 = in object (ptr)
	;outputs
	;r0 = in object (ptr)
	;trashes
	;r1-r14

	(entry 'in :deinit '(r0))

	;wait till stopped
	(loop-start)
		(assign '((r0 in_state)) '(r1))
		(breakif '(r1 = stream_mail_state_stopped))
		(call 'in :next_msg '(r0) '(r0))
	(loop-end)

	;free any stream mail buffer
	(vp-push r0)
	(vp-xor-rr r1 r1)
	(assign '((r0 stream_buffer)) '(r2))
	(assign '(r1) '((r0 stream_buffer)))
	(call 'sys_mail :free '(r2))

	;free any allocated mailbox
	(assign '((rsp 0)) '(r0))
	(assign '((r0 in_mbox_oid) (r0 in_mbox_id)) '(r1 r0))
	(vpif '(r0 /= r1))
		(call 'sys_mail :free_mbox '(r0))
	(endif)

	;splice any junk sequence mail to postman
	(assign '((rsp 0)) '(r0))
	(call 'sys_mail :junk_mail '((& r0 in_list)))

	;deinit parent
	(vp-pop r0)
	(s-jump 'in :deinit '(r0))

(def-func-end)

(def-method 'in :next_msg)
	;inputs
	;r0 = in object (ptr)
	;outputs
	;r0 = in object (ptr)
	;trashes
	;r1-r14

	(entry 'in :next_msg '(r0))

	;free any current msg
	(vp-push r0)
	(call 'sys_mail :free '((r0 stream_buffer)))

	;read next in sequence, blocking if not
	(assign '((rsp 0)) '(r9))
	(vp-xor-rr r0 r0)
	(loop-start)
		(call 'next_seq '((& r9 in_list) r0 (r9 in_seqnum)) '(r4 r8))
		(breakif '(r4 /= 0))
		(call 'sys_mail :read '((r9 in_mbox_addr)) '(r0 _))
	(loop-end)
	(assign '((r9 in_seqnum)) '(r2))
	(vp-add-cr 1 r2)
	(assign '(r2) '((r9 in_seqnum)))

	;do we have the next msg allready ?
	(call 'next_seq '((& r9 in_list) 0 r2) '(r0 _))
	(vpif '(r0 /= 0))
		;put it in the mailbox so 'select' or 'poll' will trigger !
		(assign '((r9 in_mbox_addr)) '(r1))
		(vp-add-cr mbox_list r1)
		(lh-add-at-tail r1 r0 r2)
	(endif)

	;save msg buffer details
	(assign '(r4) '((r9 stream_buffer)))
	(vp-lea-i r8 stream_msg_data r2)
	(assign '((r4 msg_frag_length) (r8 stream_msg_state)) '(r3 r4))
	(vp-add-rr r8 r3)
	(assign '(r2 r3 r4) '((r9 stream_bufp) (r9 stream_bufe) (r9 in_state)))

	;send ack if needed
	(assign '((r8 stream_msg_seqnum) (r9 in_ack_seqnum)) '(r2 r3))
	(vp-shr-cr out_ack_shift r2)
	(vpif '(r3 = r2))
		;next ack seq num
		(vp-add-cr 1 r3)
		(assign '(r3) '((r9 in_ack_seqnum)))
		(call 'sys_mail :alloc '(0) '(r0 _))
		(vp-cpy-ir r8 (+ stream_msg_ack_id id_id) r2)
		(vp-cpy-ri r2 r0 (+ msg_dest id_id))
		(call 'sys_mail :send '(r0))
	(endif)

	(vp-pop r0)
	(exit 'in :next_msg '(r0))
	(vp-ret)

(vp-label 'next_seq)
	;inputs
	;r0 = list head (ptr)
	;r1 = 0, else new stream msg (ptr)
	;r2 = seqnum (ulong)
	;outputs
	;r0 = 0, else next stream msg (ptr)
	;r1 = 0, else string data (pubyte)
	;trashes
	;r0-r3

	(entry '(r0 r1 r2))

	;save any new msg
	(vpif '(r1 /= 0))
		(lh-add-at-tail r0 r1 r3)
	(endif)

	;scan for seqnum
	(loop-list-forward r0 0 r0 r1)
		(assign '((r0 msg_frag_data)) '(r3))
		(assign '((r3 stream_msg_seqnum)) '(r3))
	(loop-until '(r2 = r3))
	(vpif '(r1 = 0))
		;not found
		(exit '(r1 r1))
		(vp-ret)
	(endif)

	;remove found from list
	(vp-cpy-rr r0 r1)
	(ln-remove-node r1 r2)

	(exit '(r0 (r0 msg_frag_data)))
	(vp-ret)

(def-func-end)

(def-method 'in :read_next)
	;inputs
	;r0 = in object (ptr)
	;outputs
	;r0 = in object (ptr)
	;r1 = -1 for EOF, else more data
	;trashes
	;r1-r14

	(entry 'in :read_next '(r0))

	;if started state
	(loop-start)
		(assign '((r0 in_state)) '(r1))
		(breakif '(r1 /= stream_mail_state_started))
		(call 'in :next_msg '(r0) '(r0))
		(assign '((r0 stream_bufp) (r0 stream_bufe)) '(r1 r2))
	(loop-until '(r1 /= r2))

	;return -1 if not in started state
	(assign '((r0 in_state)) '(r2))
	(vp-xor-rr r1 r1)
	(vpif '(r2 /= stream_mail_state_started))
		(vp-cpy-cr -1 r1)
	(endif)

	(exit 'in :read_next '(r0 r1))
	(vp-ret)

(def-func-end)
