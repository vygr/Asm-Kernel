(include "sys/func.inc")
(include "sys/str/class.inc")
(include "class/str/class.inc")
(include "class/error/class.inc")

(gen-create 'error)
(gen-vtable 'error)

(def-method 'error :init)
	;inputs
	;r0 = error object (ptr)
	;r1 = vtable (pptr)
	;r2 = description c string (pubyte)
	;r3 = 0, else error msg index (uint)
	;r4 = error payload object (ptr)
	;r5 = filename c string (pubyte)
	;r6 = line number (uint)
	;outputs
	;r0 = error object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;r1-r6

	(def-struct 'local)
		(ptr 'this)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(assign '(r0 r2 r3 r4 r5 r6)
		'((rsp local_this) (r0 error_description) (r0 error_msg i)
		(r0 error_object) (r0 error_file) (r0 error_line i)))

	;init parent
	(s-call 'error :init '(r0 r1) '(r0 r1))
	(vpif '(r1 /= 0))
		;init self
		(call 'str :create_from_cstr '((r0 error_description)) '(r0))
		(assign '((rsp local_this)) '(r1))
		(assign '(r0) '((r1 error_description)))
		(call 'str :create_from_cstr '((r1 error_file)) '(r0))
		(assign '((rsp local_this)) '(r1))
		(assign '(r0) '((r1 error_file)))
		(call 'obj :ref '((r1 error_object)))
		(assign '((rsp local_this)) '(r0))
	(endif)

	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'error :deinit)
	;inputs
	;r0 = error object (ptr)
	;outputs
	;r0 = error object (ptr)
	;trashes
	;r1-r14

	(vp-push r0)
	(call 'obj :deref '((r0 error_description)))
	(assign '((rsp 0)) '(r0))
	(call 'obj :deref '((r0 error_file)))
	(assign '((rsp 0)) '(r0))
	(call 'obj :deref '((r0 error_object)))
	(vp-pop r0)
	(s-jump 'error :deinit '(r0))

(def-func-end)

(def-method 'error :get_msg)
	;inputs
	;r0 = error object (ptr)
	;outputs
	;r0 = error object (ptr)
	;r1 = error c string (pubyte)
	;trashes
	;r1-r5

	(entry 'error :get_msg '(r0))

	(assign '(r0 "" (r0 error_msg) ($ msgs)) '(r3 r4 r5 r0))
	(loop-while '(r5 /= 0))
		(vp-cpy-ir-ub r0 0 r1)
		(breakif '(r1 = 0))
		(vp-cpy-rr r0 r4)
		(call 'sys_str :length '(r0) '(r0 r1))
		(vp-add-rr r1 r0)
		(vp-sub-cr 1 r5)
		(vp-add-cr 1 r0)
	(loop-end)

	(exit 'error :get_msg '(r3 r4))
	(vp-ret)

(vp-label 'msgs)
(errorcases
	(each (lambda (_) (vp-string _) (vp-byte 0)) *error_msgs*))
(vp-label 'unknown)
	(vp-string "unknown_error !") (vp-byte 0)
	(vp-byte 0)

(def-func-end)
