(include "sys/func.inc")
(include "class/list/class.inc")
(include "class/stream/class.inc")
(include "class/str/class.inc")
(include "class/hset/class.inc")

(gen-create 'hset)
(gen-vtable 'hset)

(def-method 'hset :init)
	;inputs
	;r0 = hset object (ptr)
	;r1 = vtable (pptr)
	;r2 = 0, else key compare callback (ptr)
	;r3 = num buckets (uint)
	;outputs
	;r0 = hset object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;r1-r5

	(def-struct 'local)
		(ptr 'this)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(entry 'hset :init '(r0 r1 r2 r3))
	(assign '(r0 r2 r3) '((rsp local_this) (r0 hset_key_callback) (r0 hset_num_buckets)))

	;init parent
	(s-call 'hset :init '(r0 r1) '(r0 r1))
	(vpif '(r1 /= 0))
		;init myself
		(call 'list :create nil '(r0))
		(assign '((rsp local_this)) '(r1))
		(assign '(r0) '((r1 hset_buckets)))
		(assign '((r1 hset_num_buckets)) '(r1))
		(vpif '(r1 /= 1))
			(assign '(r1) '((r0 array_length)))
			(call 'list :set_capacity '(r0 r1))
			(class/array/get_both r0 r3 r4)
			(loop-start)
				(call 'list :create nil '((r3 0)))
				(vp-add-cr ptr_size r3)
			(loop-until '(r3 = r4))
		(endif)
		(assign '((rsp local_this)) '(r0))
	(endif)

	(exit 'hset :init '(r0 r1))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'hset :deinit)
	;inputs
	;r0 = hset object (ptr)
	;outputs
	;r0 = hset object (ptr)
	;trashes
	;r1-r14

	(entry 'hset :deinit '(r0))

	(vp-push r0)
	(call 'list :deref '((r0 hset_buckets)))
	(vp-pop r0)
	(s-jump 'hset :deinit '(r0))

(def-func-end)

(def-method 'hset :clear)
	;inputs
	;r0 = hset object (ptr)
	;outputs
	;r0 = hset object (ptr)
	;trashes
	;r1-r14

	(entry 'hset :clear '(r0))

	;clear all buckets
	(vp-push r0)
	(assign '((r0 hset_num_buckets) (r0 hset_buckets)) '(r1 r0))
	(vpif '(r1 = 1))
		(d-call 'list :clear '(r0))
	(else)
		(class/array/get_both r0 r1 r2)
		(loop-start)
			(vp-push r1 r2)
			(d-call 'list :clear '((r1 0)))
			(vp-pop r1 r2)
			(vp-add-cr ptr_size r1)
		(loop-until '(r1 = r2))
	(endif)
	(vp-pop r0)

	(exit 'hset :clear '(r0))
	(vp-ret)

(def-func-end)

(def-method 'hset :copy)
	;inputs
	;r0 = hset object (ptr)
	;r1 = num buckets (uint)
	;outputs
	;r0 = hset object (ptr)
	;r1 = hset copy object (ptr)
	;trashes
	;r1-r14

	(entry 'hset :copy '(r0 r1))

	(vp-cpy-rr r0 r8)
	(call 'hset :create '((r0 hset_key_callback) r1) '(r0))
	(vp-push r0)
	(call 'hset :for_each '(r8 ($ callback) rsp))
	(vp-pop r1)

	(exit 'hset :copy '(r0 r1))
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data (ptr)
	;r1 = element iterator (pptr)

	(entry 'hset :each_callback '(r0 r1))

	(assign '((r0 0) (r1 0)) '(r0 r1))
	(class/obj/ref r1 r2)
	(vp-push r1)
	(call 'hset :get_bucket '(r0 r1) '(_ r0))
	(vp-pop r1)
	(jump 'list :push_back '(r0 r1))

(def-func-end)

(def-method 'hset :erase)
	;inputs
	;r0 = hset object (ptr)
	;r1 = element iterator (pptr)
	;r2 = bucket list object (ptr)
	;outputs
	;r0 = hset object (ptr)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ptr 'this 'iter 'bucket)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(entry 'hset :erase '((rsp local_this) r1 (rsp local_bucket)))
	(assign '(r1) '((rsp local_iter)))

	;swap last entry for erased entry
	(call 'obj :deref '((r1 0)))
	(assign '((rsp local_bucket)) '(r0))
	(assign '((r0 array_length)) '(r1))
	(vp-sub-cr 1 r1)
	(assign '(r1) '((r0 array_length)))
	(assign '((r0 array_begin)) '(r0))
	(vp-shl-cr (log2 ptr_size) r1)
	(vp-add-rr r0 r1)
	(assign '((rsp local_iter)) '(r0))
	(vpif '(r1 /= r0))
		(assign '((r1 0)) '(r1))
		(assign '(r1) '((r0 0)))
	(endif)

	(exit 'hset :erase '((rsp local_this)))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'hset :find)
	;inputs
	;r0 = hset object (ptr)
	;r1 = key object (ptr)
	;outputs
	;r0 = hset object (ptr)
	;r1 = 0, else found iterator (pptr)
	;r2 = bucket list object (ptr)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ptr 'this 'key 'bucket)
		(pptr 'iter_begin 'iter_end)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(entry 'hset :find '(r0 (rsp local_key)))

	(assign '((r0 hset_key_callback)) '(r2))
	(vpif '(r2 = 0) 'exit)
		;search hash bucket
		(call 'hset :get_bucket '(r0 r1) '(r0 r2))
		(class/array/get_both r2 r1 r3)
		(assign '((rsp local_key)) '(r4))
		(loop-while '(r1 /= r3))
			(assign '((r1 0)) '(r5))
			(breakif '(r4 = r5) 'exit)
			(vp-add-cr ptr_size r1)
		(loop-end)
		(vp-xor-rr r1 r1)
	(else)
		;search hash bucket
		(call 'hset :get_bucket '(r0 r1) '(r0 r1))
		(assign '(r0 r1) '((rsp local_this) (rsp local_bucket)))
		(class/array/get_both r1 r1 r2)
		(assign '(r2) '((rsp local_iter_end)))
		(loop-while '(r1 /= r2))
			(assign '(r1) '((rsp local_iter_begin)))
			(assign '((r1 0) (rsp local_this) (rsp local_key)) '(r1 r2 r0))
			(vp-call-i r2 hset_key_callback)
			(vpif '(r1 = 0))
				(assign '((rsp local_this) (rsp local_iter_begin) (rsp local_bucket)) '(r0 r1 r2))
				(break 'exit)
			(endif)
			(assign '((rsp local_iter_begin) (rsp local_iter_end)) '(r1 r2))
			(vp-add-cr ptr_size r1)
		(loop-end)
		(assign '((rsp local_this) (rsp local_bucket)) '(r0 r2))
		(vp-xor-rr r1 r1)
	(endif)

	(exit 'hset :find '(r0 r1 r2))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'hset :for_each)
	;inputs
	;r0 = hset object (ptr)
	;r1 = predicate function (ptr)
	;r2 = predicate data (ptr)
	;outputs
	;r0 = hset object (ptr)
	;trashes
	;r1-r2...
		;callback predicate
		;inputs
		;r0 = predicate data (ptr)
		;r1 = element iterator (pptr)
		;trashes
		;...

	(def-struct 'local)
		(ptr 'this 'predicate 'predicate_data)
		(pptr 'iter_begin 'iter_end 'iter_begin1 'iter_end1)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(entry 'hset :for_each '(r0 (rsp local_predicate) (rsp local_predicate_data)))
	(assign '(r0) '((rsp local_this)))

	;for all buckets
	(assign '((r0 hset_num_buckets) (r0 hset_buckets)) '(r1 r0))
	(vpif '(r1 = 1))
		(class/array/get_both r0 r1 r2)
		(assign '(r2) '((rsp local_iter_end)))
		(loop-while '(r1 /= r2))
			(assign '((rsp local_predicate_data) r1) '(r0 (rsp local_iter_begin)))
			(vp-call-i rsp local_predicate)
			(assign '((rsp local_iter_begin) (rsp local_iter_end)) '(r1 r2))
			(vp-add-cr ptr_size r1)
		(loop-end)
	(else)
		(class/array/get_both r0 r1 r2)
		(assign '(r2) '((rsp local_iter_end)))
		(loop-start)
			(assign '((r1 0) r1) '(r0 (rsp local_iter_begin)))
			(class/array/get_both r0 r1 r2)
			(assign '(r2) '((rsp local_iter_end1)))
			(loop-while '(r1 /= r2))
				(assign '((rsp local_predicate_data) r1) '(r0 (rsp local_iter_begin1)))
				(vp-call-i rsp local_predicate)
				(assign '((rsp local_iter_begin1) (rsp local_iter_end1)) '(r1 r2))
				(vp-add-cr ptr_size r1)
			(loop-end)
			(assign '((rsp local_iter_begin) (rsp local_iter_end)) '(r1 r2))
			(vp-add-cr ptr_size r1)
		(loop-until '(r1 = r2))
	(endif)

	(exit 'hset :for_each '((rsp local_this)))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'hset :get_bucket)
	;inputs
	;r0 = hset object (ptr)
	;r1 = key object (ptr)
	;outputs
	;r0 = hset object (ptr)
	;r1 = bucket list object (ptr)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ptr 'this)
		(uint 'length)
	(def-struct-end)

	(entry 'hset :get_bucket '(r0 r1))

	;search hash bucket
	(assign '((r0 hset_num_buckets)) '(r2))
	(vpif '(r2 /= 1))
		;save inputs
		(vp-alloc local_size)
		(assign '(r0 r2) '((rsp local_this) (rsp local_length)))
		(call 'obj :hash '(r1) '(_ r0))
		(assign '((rsp local_length)) '(r1))
		(vp-xor-rr r2 r2)
		(vp-div-rrr-u r1 r2 r0)
		(assign '((rsp local_this)) '(r0))
		(call 'list :get_element '((r0 hset_buckets) r2) '(_ r1))

		(exit 'hset :get_bucket '((rsp local_this) r1))
		(vp-free local_size)
		(vp-ret)
	(endif)

	(exit 'hset :get_bucket '(r0 (r0 hset_buckets)))
	(vp-ret)

(def-func-end)

(def-method 'hset :insert)
	;inputs
	;r0 = hset object (ptr)
	;r1 = key object (ptr)
	;outputs
	;r0 = hset object (ptr)
	;r1 = element iterator (pptr)
	;r2 = bucket list object (ptr)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ptr 'this 'key)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(entry 'hset :insert '(r0 r1))
	(assign '(r1) '((rsp local_key)))

	;search hash bucket
	(call 'hset :find '(r0 r1) '(r0 r1 r2))
	(vpif '(r1 = 0))
		;new key
		(assign '((rsp local_key) r0 r2) '(r1 (rsp local_this) r0))
		(class/obj/ref r1 r2)
		(call 'list :push_back '(r0 r1) '(r0 _ _ r3))
		(assign '((& r3 (neg ptr_size)) r0 (rsp local_this)) '(r1 r2 r0))
	(endif)

	(exit 'hset :insert '(r0 r1 r2))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'hset :print)
	;inputs
	;r0 = hset object (ptr)
	;r1 = stream object (ptr)
	;outputs
	;r0 = hset object (ptr)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ptr 'this 'stream)
		(ulong 'flag)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'hset :print '(r0 r1))
	(assign '(0 r0 r1) '(r2 (rsp local_this) (rsp local_stream)))
	(assign '(r2) '((rsp local_flag)))

	(call 'stream :write_char '(r1 char_lrb))
	(call 'hset :for_each '((rsp local_this) ($ callback) rsp))
	(call 'stream :write_char '((rsp local_stream) char_rrb))

	(exit 'hset :print '((rsp local_this)))
	(vp-free local_size)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data (ptr)
	;r1 = element iterator (pptr)

	(entry 'hset :each_callback '(r0 r1))

	(assign '((r0 local_flag)) '(r2))
	(vpif '(r2 = 0))
		(assign '(r0) '((r0 local_flag)))
	(else)
		(vp-push r0 r1)
		(call 'stream :write_char '((r0 local_stream) char_space))
		(vp-pop r0 r1)
	(endif)
	(assign '((r0 local_stream)) '(r2))
	(call 'obj :print '((r1 0) r2))
	(vp-ret)

(def-func-end)
