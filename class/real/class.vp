(include "sys/func.inc")
(include "sys/math/class.inc")
(include "class/list/class.inc")
(include "class/real/class.inc")
(include "class/str/class.inc")
(include "class/stream/class.inc")

(gen-create 'real)
(gen-vtable 'real)

(def-method 'real :print)
	;inputs
	;r0 = real object (ptr)
	;r1 = stream object (ptr)
	;outputs
	;r0 = real object (ptr)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ptr 'this 'stream 'tmp)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'real :print '(r0 r1))
	(assign '(r0 r1) '((rsp local_this) (rsp local_stream)))

	(assign '((r0 num_value)) '(r0))
	(vpif '(r0 < 0))
		(call 'stream :write_cstr '(r1 "-0x"))
		(assign '((rsp local_this)) '(r0))
		(assign '((r0 num_value)) '(r0))
		(vp-mul-cr -1 r0)
	(else)
		(call 'stream :write_cstr '(r1 "0x"))
		(assign '((rsp local_this)) '(r0))
		(assign '((r0 num_value)) '(r0))
	(endif)
	(call 'str :create_from_long '(r0 16) '(r0))
	(assign '(r0) '((rsp local_tmp)))
	(call 'stream :write '((rsp local_stream) (& r0 str_data) (r0 str_length)))
	(call 'obj :deref '((rsp local_tmp)))

	(exit 'real :print '((rsp local_this)))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(defun-bind addop (_ p)
	(entry 'real _ '(r0 r1))
	(vp-push r0)
	(class/array/get_both r1 r1 r2)
	(vp-cpy-ir r1 0 r0)
	(vp-add-cr ptr_size r1)
	(assign '((r0 num_value)) '(r0))
	(loop-start)
		(vp-cpy-ir r1 0 r4)
		(vp-add-cr ptr_size r1)
		(assign '((r4 num_value)) '(r3))
		(exec p)
	(loop-until '(r1 = r2))
	(v-call 'num :vcreate '(r0) '(r1) r4 r1)
	(vp-pop r0)
	(exit 'real _ '(r0 r1))
	(vp-ret))

(def-method 'real :add)
	;inputs
	;r0 = real object (ptr)
	;r1 = list of real objects (ptr)
	;outputs
	;r0 = real object (ptr)
	;r1 = result real object (ptr)
	;trashes
	;r1-r14

	(addop :add
		'(call 'sys_math :r_add '(r0 r3) '(r0)))

(def-func-end)

(def-method 'real :sub)
	;inputs
	;r0 = real object (ptr)
	;r1 = list of real objects (ptr)
	;outputs
	;r0 = real object (ptr)
	;r1 = result real object (ptr)
	;trashes
	;r1-r14

	(addop :sub
		'(call 'sys_math :r_sub '(r0 r3) '(r0)))

(def-func-end)

(def-method 'real :mul)
	;inputs
	;r0 = real object (ptr)
	;r1 = list of real objects (ptr)
	;outputs
	;r0 = real object (ptr)
	;r1 = result real object (ptr)
	;trashes
	;r1-r14

	(addop :mul
		'(call 'sys_math :r_mul '(r0 r3) '(r0)))

(def-func-end)

(defun-bind minop (_ p)
	(vp-def (this args obj iter_begin iter_end val new_val))
	(entry 'num _ `(,this ,args))
	(class/array/get_both args iter_begin iter_end)
	(vp-cpy-ir iter_begin 0 args)
	(vp-add-cr ptr_size iter_begin)
	(assign `((,args num_value)) `(,val))
	(loop-start)
		(vp-cpy-ir iter_begin 0 obj)
		(vp-add-cr ptr_size iter_begin)
		(assign `((,obj num_value)) `(,new_val))
		(exec p)
	(loop-until (list iter_begin '= iter_end))
	(class/obj/ref args iter_begin)
	(exit 'num _ `(,this ,args))
	(vp-ret))

(def-method 'real :min)
	;inputs
	;r0 = real object (ptr)
	;r1 = list of real objects (ptr)
	;outputs
	;r0 = real object (ptr)
	;r1 = result real object (ptr)
	;trashes
	;r1-r14

	(minop :min
		'(progn
			(call 'sys_math :r_sub (list new_val val) '(r13))
			(vpif '(r13 < 0))
				(vp-cpy-rr new_val val)
				(vp-cpy-rr obj args)
			(endif)))

(def-func-end)

(def-method 'real :max)
	;inputs
	;r0 = real object (ptr)
	;r1 = list of real objects (ptr)
	;outputs
	;r0 = real object (ptr)
	;r1 = result real object (ptr)
	;trashes
	;r1-r14

	(minop :max
		'(progn
			(call 'sys_math :r_sub (list new_val val) '(r13))
			(vpif '(r13 > 0))
				(vp-cpy-rr new_val val)
				(vp-cpy-rr obj args)
			(endif)))

(def-func-end)

(defun-bind divop (_ p)
	(entry 'real _ '(r0 r1))
	(vp-push r0)
	(class/array/get_both r1 r1 r4)
	(vp-cpy-ir r1 0 r0)
	(vp-add-cr ptr_size r1)
	(assign '((r0 num_value)) '(r0))
	(loop-start)
		(vp-cpy-ir r1 0 r5)
		(vp-add-cr ptr_size r1)
		(assign '((r5 num_value)) '(r3))
	(errorcases
		(gotoif '(r3 = 0) 'error))
		(exec p)
	(loop-until '(r1 = r4))
	(v-call 'num :vcreate '(r0) '(r1) r5 r1)
	(vp-pop r0)
	(exit 'real _ '(r0 r1))
	(vp-ret)
(vp-label 'error)
	(vp-pop r0)
	(exit 'real _ '(r0 r3))
	(vp-ret))

(def-method 'real :div)
	;inputs
	;r0 = real object (ptr)
	;r1 = list of real objects (ptr)
	;outputs
	;r0 = real object (ptr)
	;r1 = 0 if error, else result real object (ptr)
	;trashes
	;r1-r14

	(divop :div
		'(call 'sys_math :r_div '(r0 r3) '(r0)))

(def-func-end)

(def-method 'real :mod)
	;inputs
	;r0 = real object (ptr)
	;r1 = list of real objects (ptr)
	;outputs
	;r0 = real object (ptr)
	;r1 = 0 if error, else result real object (ptr)
	;trashes
	;r1-r14

	(divop :mod
		'(call 'sys_math :r_mod '(r0 r3) '(r0)))

(def-func-end)

(defun-bind compare (_ p)
	(entry 'real _ '(r0 r1))
	(vp-push r0)
	(class/array/get_both r1 r1 r2)
	(vp-cpy-ir r1 0 r0)
	(vp-add-cr ptr_size r1)
	(assign '((r0 num_value)) '(r0))
	(loop-start)
		(vp-cpy-ir r1 0 r3)
		(vp-add-cr ptr_size r1)
		(assign '((r3 num_value)) '(r3))
		(exec p)
	(loop-until '(r1 = r2))
	(vp-pop r0)
	(exit 'real _ '(r0 -1))
	(vp-ret)
(vp-label 'fail)
	(vp-pop r0)
	(exit 'real _ '(r0 0))
	(vp-ret))

(def-method 'real :ge)
	;inputs
	;r0 = real object (ptr)
	;r1 = list of real objects (ptr)
	;outputs
	;r0 = real object (ptr)
	;r1 = 0, -1 (int)
	;trashes
	;r1-r14

	(compare :ge
		'(progn
			(call 'sys_math :r_sub '(r3 r0) '(r13))
			(gotoif '(r13 > 0) 'fail)
			(vp-cpy-rr r3 r0)))

(def-func-end)

(def-method 'real :gt)
	;inputs
	;r0 = real object (ptr)
	;r1 = list of real objects (ptr)
	;outputs
	;r0 = real object (ptr)
	;r1 = 0, -1 (int)
	;trashes
	;r1-r14

	(compare :gt
		'(progn
			(call 'sys_math :r_sub '(r3 r0) '(r13))
			(gotoif '(r13 >= 0) 'fail)
			(vp-cpy-rr r3 r0)))

(def-func-end)

(def-method 'real :le)
	;inputs
	;r0 = real object (ptr)
	;r1 = list of real objects (ptr)
	;outputs
	;r0 = real object (ptr)
	;r1 = 0, -1 (int)
	;trashes
	;r1-r14

	(compare :le
		'(progn
			(call 'sys_math :r_sub '(r3 r0) '(r13))
			(gotoif '(r13 < 0) 'fail)
			(vp-cpy-rr r3 r0)))

(def-func-end)

(def-method 'real :lt)
	;inputs
	;r0 = real object (ptr)
	;r1 = list of real objects (ptr)
	;outputs
	;r0 = real object (ptr)
	;r1 = 0, -1 (int)
	;trashes
	;r1-r14

	(compare :lt
		'(progn
			(call 'sys_math :r_sub '(r3 r0) '(r13))
			(gotoif '(r13 <= 0) 'fail)
			(vp-cpy-rr r3 r0)))

(def-func-end)

(def-method 'real :sqrt)
	;inputs
	;r0 = real object (ptr)
	;outputs
	;r0 = real object (ptr)
	;r1 = result real object (ptr)
	;trashes
	;r1-r14

	(entry 'real :sqrt '(r0))

	(vp-push r0)
	(call 'sys_math :r_r2f '((r0 num_value)) '(r0))
	(call 'sys_math :f_sqrt '(r0) '(r0))
	(call 'sys_math :r_f2r '(r0) '(r0))
	(call 'real :create '(r0) '(r1))
	(vp-pop r0)

	(exit 'real :sqrt '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'real :frac)
	;inputs
	;r0 = real object (ptr)
	;outputs
	;r0 = real object (ptr)
	;r1 = result real object (ptr)
	;trashes
	;r1-r14

	(entry 'real :frac '(r0))

	(vp-push r0)
	(call 'sys_math :r_frac '((r0 num_value)) '(r0))
	(call 'real :create '(r0) '(r1))
	(vp-pop r0)

	(exit 'real :frac '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'real :floor)
	;inputs
	;r0 = real object (ptr)
	;outputs
	;r0 = real object (ptr)
	;r1 = result real object (ptr)
	;trashes
	;r1-r14

	(entry 'real :floor '(r0))

	(vp-push r0)
	(call 'sys_math :r_floor '((r0 num_value)) '(r0))
	(call 'real :create '(r0) '(r1))
	(vp-pop r0)

	(exit 'real :floor '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'real :recip)
	;inputs
	;r0 = real object (ptr)
	;outputs
	;r0 = real object (ptr)
	;r1 = result real object (ptr)
	;trashes
	;r1-r14

	(entry 'real :recip '(r0))

	(vp-push r0)
	;(i2r 1) for the sake of the C++ version
	(call 'sys_math :r_div '(0x4000000000000001 (r0 num_value)) '(r0))
	(call 'real :create '(r0) '(r1))
	(vp-pop r0)

	(exit 'real :recip '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'real :abs)
	;inputs
	;r0 = real object (ptr)
	;outputs
	;r0 = real object (ptr)
	;r1 = result real object (ptr)
	;trashes
	;r1-r14

	(entry 'real :abs '(r0))

	(vp-push r0)
	(assign '((r0 num_value)) '(r0))
	(vpif '(r0 < 0))
		;(i2r -1) for the sake of the C++ version
		(call 'sys_math :r_mul '(-0x3FFFFFFFFFFFFFFF r0) '(r0))
		(call 'real :create '(r0) '(r1))
	(else)
		(assign '((rsp 0)) '(r1))
		(class/obj/ref r1 r0)
	(endif)
	(vp-pop r0)

	(exit 'real :abs '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'real :neg)
	;inputs
	;r0 = real object (ptr)
	;outputs
	;r0 = real object (ptr)
	;r1 = result real object (ptr)
	;trashes
	;r1-r14

	(entry 'real :neg '(r0))

	(vp-push r0)
	;(i2r -1) for the sake of the C++ version
	(call 'sys_math :r_mul '(-0x3FFFFFFFFFFFFFFF (r0 num_value)) '(r0))
	(call 'real :create '(r0) '(r1))
	(vp-pop r0)

	(exit 'real :neg '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'real :sign)
	;inputs
	;r0 = real object (ptr)
	;outputs
	;r0 = real object (ptr)
	;r1 = result real object (ptr)
	;trashes
	;r1-r14

	(entry 'real :sign '(r0))

	(vp-push r0)
	(assign '((r0 num_value)) '(r0))
	(vpif '(r0 < 0))
		;(i2r -1) for the sake of the C++ version
		(assign '(-0x3FFFFFFFFFFFFFFF) '(r0))
	(elseif '(r0 > 0))
		;(i2r 1) for the sake of the C++ version
		(assign '(0x4000000000000001) '(r0))
	(endif)
	(call 'real :create '(r0) '(r1))
	(vp-pop r0)

	(exit 'real :sign '(r0 r1))
	(vp-ret)

(def-func-end)
