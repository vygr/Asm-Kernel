(include 'sys/func.inc)
(include 'sys/string/class.inc)
(include 'sys/load/class.inc)
(include 'class/string/class.inc)
(include 'class/stream/class.inc)
(include 'class/vector/class.inc)

(gen-class 'string)

(def-method 'string 'create_from_buffer)
	;inputs
	;r0 = buffer (pubyte)
	;r1 = buffer length (uint)
	;outputs
	;r0 = 0 if error, else object (ptr)
	;trashes
	;r1-r6

	;save size of data
	(entry 'string 'create_from_buffer '(r5 r6))

	;create new string object
	(call 'string 'new '((& r1 (add string_size byte_size))) '(r0))
	(vpif '(r0 != 0))
		;init the object
		(call 'string 'init `(r0 (@ ,(f-path 'string 'vtable)) r5 r6) '(r0 r1))
		(vpif '(r1 == 0))
			;error with init
			(call 'string 'delete '(r0) '() 'r1)
			(vp-xor-rr r0 r0)
		(endif)
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'string 'create_from_cstr)
	;inputs
	;r0 = c string (pubyte)
	;outputs
	;r0 = 0 if error, else object (ptr)
	;trashes
	;r1-r6

	;get size of string
	(call 'sys_string 'length '(r0) '(r0 r1))
	(jump 'string 'create_from_buffer '(r0 r1))

(def-func-end)

(def-method 'string 'create_from_file)
	;inputs
	;r0 = file name c string (pubyte)
	;outputs
	;r0 = 0 if error, else object (ptr)
	;trashes
	;r1-r6

	;save c string pointer
	(entry 'string 'create_from_file '(r5))

	;get size of string from file size
	(f-bind 'sys_load 'statics r6)
	(vp-cpy-ir r6 ld_statics_stat_buffer r6)
	(call 'sys_pii 'stat '(r0 r6) '(r0))
	(vpif '(r0 != 0))
	(vp-label 'funcexit)
		;no such file
		(vp-xor-rr r0 r0)
		(vp-ret)
	(endif)

	;test for regular file only
	(vp-cpy-ir-us r6 stat_mode r0)
	(vp-and-cr s_ifmt r0)
	(gotoif '(r0 != s_ifreg) 'funcexit)

	;create new string object
	(vp-cpy-ir r6 stat_fsize r1)
	(call 'string 'new '((& r1 (add string_size byte_size))) '(r0))
	(vpif '(r0 != 0))
		;init the object
		(call 'string 'init2 `(r0 (@ ,(f-path 'string 'vtable)) r5 (r6 stat_fsize)) '(r0 r1))
		(vpif '(r1 == 0))
			;error with init
			(call 'string 'delete '(r0) '() 'r1)
			(vp-xor-rr r0 r0)
		(endif)
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'string 'create_from_long)
	;inputs
	;r0 = number (long)
	;r1 = base, - for unsigned, (long)
	;outputs
	;r0 = 0 if error, else object (ptr)
	;trashes
	;all

	(ptr 'this)
	(pubyte 'buffer 'reloc)
	(long 'num 'base)

	(push-scope)
	(entry 'string 'create_from_long {num, base})

	(assign (cat "@" (f-path 'sys_load 'statics)) {reloc})
	(assign {reloc->ld_statics_reloc_buffer} {reloc})
	(assign {reloc} {buffer})
	(vpif {base >= 0})
		(vpif {num < 0})
			(assign {char_minus} {*buffer})
			(assign {buffer + byte_size} {buffer})
			(assign {-num} {num})
		(endif)
	(else)
		(assign {-base} {base})
	(endif)
	(call 'sys_string 'from_long {num, buffer, base})
	(call 'string 'create_from_cstr {reloc} {this})

	(exit 'string 'create_from_long {this})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'string 'init)
	;inputs
	;r0 = string object (ptr)
	;r1 = vtable (pptr)
	;r2 = 0 else, buffer (pubyte)
	;r3 = buffer length (uint)
	;outputs
	;r1 = 0 if error, else ok

	(def-struct 'local)
		(ptr 'this)
		(long 'data)
		(long 'length)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(assign '(r2 r3) '((rsp local_data) (rsp local_length)))

	;init parent
	(s-call 'string 'init '(r0 r1) '(r0 r1))
	(vpif '(r1 != 0))
		(vp-cpy-ri r0 rsp local_this)
		(vp-xor-rr r1 r1)
		(vp-cpy-ri-i r1 r0 string_hashcode)

		;init myself
		(vp-cpy-ir rsp local_length r2)
		(vp-cpy-ri-i r2 r0 string_length)
		(vp-cpy-ir rsp local_data r3)
		(vpif '(r3 != 0))
			(call 'sys_mem 'copy '(r3 (& r0 string_data) r2) '(_ r1))
		(else)
			(vp-lea-i r0 string_data r1)
			(vp-add-rr r2 r1)
		(endif)
		(vp-xor-rr r0 r0)
		(vp-cpy-ri-b r0 r1 0)

		(vp-cpy-ir rsp local_this r0)
	(endif)

	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'string 'init1)
	;inputs
	;r0 = string object (ptr)
	;r1 = vtable (pptr)
	;r2 = string object (ptr)
	;r3 = string object (ptr)
	;outputs
	;r1 = 0 if error, else ok

	(def-struct 'local)
		(ptr 'this)
		(long 'string1)
		(long 'string2)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(assign '(r2 r3) '((rsp local_string1) (rsp local_string2)))

	;init parent
	(s-call 'string 'init '(r0 r1) '(r0 r1))
	(vpif '(r1 != 0))
		;init myself
		(vp-cpy-ri r0 rsp local_this)
		(vp-xor-rr r1 r1)
		(vp-cpy-ri-i r1 r0 string_hashcode)

		(vp-cpy-ir rsp local_string1 r5)
		(vp-cpy-ir rsp local_string2 r6)
		(vp-cpy-ir-ui r5 string_length r1)
		(vp-cpy-ir-ui r6 string_length r2)
		(vp-add-rr r2 r1)
		(vp-cpy-ri-i r1 r0 string_length)
		(call 'sys_mem 'copy '((& r5 string_data) (& r0 string_data) (r5 string_length ui)) '(_ r1))
		(vp-cpy-ir-ui r6 string_length r2)
		(vp-add-cr byte_size r2)
		(call 'sys_mem 'copy '((& r6 string_data) r1 r2))

		(vp-cpy-ir rsp local_this r0)
	(endif)

	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'string 'init2)
	;inputs
	;r0 = string object (ptr)
	;r1 = vtable (pptr)
	;r2 = file name c string (pubyte)
	;r3 = file length (uint)
	;outputs
	;r1 = 0 if error, else ok

	(def-struct 'local)
		(ptr 'this)
		(ptr 'filename)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(assign '(r2 r3) '((rsp local_filename) (r0 string_length i)))

	;init parent
	(s-call 'string 'init '(r0 r1) '(r0 r1))
	(vpif '(r1 != 0))
		;init myself
		(vp-cpy-ri r0 rsp local_this)
		(vp-xor-rr r1 r1)
		(vp-cpy-ri-i r1 r0 string_hashcode)

		;open file
		(call 'sys_pii 'open '((rsp local_filename) file_open_read) '(r3))

		;read into buffer
		(vp-cpy-ir rsp local_this r0)
		(vp-cpy-ir-ui r0 string_length r1)
		(vp-add-cr string_data r0)
		(vp-xor-rr r2 r2)
		(vp-cpy-rd-b r2 r0 r1)
		(vp-push r3)
		(call 'sys_pii 'read '(r3 r0 r1))
		(vp-pop r3)

		;close file
		(call 'sys_pii 'close '(r3))

		(vp-cpy-ir rsp local_this r0)
		(vp-cpy-rr r0 r1)
	(endif)
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'string 'init3)
	;inputs
	;r0 = string object (ptr)
	;r1 = vtable (pptr)
	;r2 = vector of string objects (ptr)
	;outputs
	;r1 = 0 if error, else ok

	(def-struct 'local)
		(ptr 'this)
		(ptr 'vector)
		(ptr 'next)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(assign '(r2) '((rsp local_vector)))

	;init parent
	(s-call 'string 'init '(r0 r1) '(r0 r1))
	(vpif '(r1 != 0))
		;init myself
		(vp-cpy-ri r0 rsp local_this)
		(vp-xor-rr r1 r1)
		(vp-cpy-ri-i r1 r0 string_hashcode)

		(vp-add-cr string_data r0)
		(vp-cpy-ri r0 rsp local_next)
		(vp-cpy-ir rsp local_vector r0)
		(call 'vector 'for_each '(r0 0 (r0 array_length ui) ($ callback) rsp) '(_ r1))

		(vp-cpy-ir rsp local_next r2)
		(vp-cpy-ri-b r1 r2 0)
		(vp-cpy-ir rsp local_this r0)
		(vp-lea-i r0 string_data r3)
		(vp-sub-rr r3 r2)
		(vp-cpy-ri-i r2 r0 string_length)
		(vp-add-cr 1 r1)
	(endif)

	(vp-free local_size)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data (ptr)
	;r1 = element iterator (ptr)
	;outputs
	;r1 = 0 if break, else not

	(vp-cpy-rr r0 r4)
	(vp-cpy-ir r1 0 r1)
	(call 'sys_mem 'copy '((& r1 string_data) (r4 local_next) (r1 string_length ui)) '(_ r1))
	(vp-cpy-ri r1 r4 local_next)
	(vp-ret)

(def-func-end)

(def-method 'string 'append)
	;inputs
	;r0 = string object (ptr)
	;r1 = string object (ptr)
	;outputs
	;r0 = 0 if error, else new string object (ptr)
	;trashes
	;r1-r6

	;save inputs
	(entry 'string 'append '(r5 r6))

	;get size of strings
	(vp-cpy-ir-ui r0 string_length r0)
	(vp-cpy-ir-ui r1 string_length r2)
	(vp-add-rr r2 r0)
	(vp-add-cr (add string_size byte_size) r0)

	;create new string object
	(call 'string 'new '(r0) '(r0))
	(vpif '(r0 != 0))
		;init the object
		(call 'string 'init1 `(r0 (@ ,(f-path 'string 'vtable)) r5 r6) '(r0 r1))
		(vpif '(r1 == 0))
			;error with init
			(call 'string 'delete '(r0) '() 'r1)
			(vp-xor-rr r0 r0)
		(endif)
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'string 'cat)
	;inputs
	;r0 = vector of string objects (ptr)
	;outputs
	;r0 = 0 if error, else new string object (ptr)
	;trashes
	;r1-r6

	(def-struct 'local)
		(long 'length)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(vp-cpy-cr (add string_size byte_size) r1)
	(assign '(r0 r1) '(r5 (rsp local_length)))

	;get size of strings
	(call 'vector 'for_each '(r0 0 (r0 array_length ui) ($ callback) rsp))
	(vp-cpy-ir rsp local_length r0)
	(vp-free local_size)

	;create new string object
	(call 'string 'new '(r0) '(r0))
	(vpif '(r0 != 0))
		;init the object
		(call 'string 'init3 `(r0 (@ ,(f-path 'string 'vtable)) r5) '(r0 r1))
		(vpif '(r1 == 0))
			;error with init
			(call 'string 'delete '(r0) '() 'r1)
			(vp-xor-rr r0 r0)
		(endif)
	(endif)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data (ptr)
	;r1 = element iterator (ptr)
	;outputs
	;r1 = 0 if break, else not

	(vp-cpy-ir r0 local_length r2)
	(vp-cpy-ir r1 0 r1)
	(vp-cpy-ir-ui r1 string_length r1)
	(vp-add-rr r2 r1)
	(vp-cpy-ri r1 r0 local_length)
	(vp-ret)

(def-func-end)

(def-method 'string 'compare)
	;inputs
	;r0 = string object (ptr)
	;r1 = string object (ptr)
	;outputs
	;r0 = string object (ptr)
	;r1 = 0 if same, else -, +
	;trashes
	;r2-r7

	(switch 'lbreak)
		(vpif '(r0 != r1))
			(vp-cpy-ir-ui r0 string_length r2)
			(vp-cpy-ir-ui r1 string_length r3)
			(vpif '(r2 != 0))
				(breakif '(r3 == 0))
				(vp-lea-i r0 string_data r4)
				(vp-lea-i r1 string_data r5)
				(vp-xor-rr r6 r6)
				(loop-start)
					(vp-cpy-dr-ub r4 r6 r1)
					(vp-cpy-dr-ub r5 r6 r7)
					(vp-sub-rr r7 r1)
					(breakif '(r1 != 0) lbreak)
					(vp-add-cr byte_size r6)
					(breakif '(r6 == r2))
				(loop-until '(r6 == r3))
			(endif)
			(vp-cpy-rr r2 r1)
			(vp-sub-rr r3 r1)
			(vp-ret)
		(endif)
		(vp-xor-rr r1 r1)
	(endswitch)
	(vp-ret)

(def-func-end)

(def-method 'string 'same)
	;inputs
	;r0 = string object (ptr)
	;r1 = string object (ptr)
	;outputs
	;r0 = string object (ptr)
	;r1 = 0 if same
	;trashes
	;r2-r6

	(switch 'lbreak)
		(vpif '(r0 != r1) 'same)
			(vp-cpy-ir-ui r0 string_length r2)
			(vp-cpy-ir-ui r1 string_length r3)
			(vp-sub-rr r2 r3)
			(vpif '(r3 == 0))
				(breakif '(r2 == 0) same)
				(vp-cpy-rr r2 r6)
				(vp-lea-i r0 string_data r4)
				(vp-lea-i r1 string_data r5)
				(vp-add-rr r4 r2)
				(vpif '(r6 >= (sub (mul long_size 2) 1)))
					(vp-lea-i r4 (dec long_size) r3)
					(vp-and-cr (neg long_size) r3)
					(vpif '(r4 != r3))
						(loop-start)
							(vp-cpy-ir-b r4 0 r6)
							(vp-cpy-ir-b r5 0 r1)
							(vp-sub-rr r6 r1)
							(breakif '(r1 != 0) lbreak)
							(vp-add-cr byte_size r4)
							(vp-add-cr byte_size r5)
						(loop-until '(r4 == r3))
					(endif)
					(vp-cpy-rr r2 r3)
					(vp-and-cr (neg long_size) r3)
					(vpif '(r4 != r3))
						(loop-start)
							(vp-cpy-ir r4 0 r6)
							(vp-cpy-ir r5 0 r1)
							(vp-sub-rr r6 r1)
							(breakif '(r1 != 0) lbreak)
							(vp-add-cr long_size r4)
							(vp-add-cr long_size r5)
						(loop-until '(r4 == r3))
					(endif)
					(breakif '(r4 == r2) lbreak)
				(endif)
				(loop-start)
					(vp-cpy-ir-b r4 0 r6)
					(vp-cpy-ir-b r5 0 r1)
					(vp-sub-rr r6 r1)
					(breakif '(r1 != 0))
					(vp-add-cr byte_size r4)
					(vp-add-cr byte_size r5)
				(loop-until '(r4 == r2))
				(vp-ret)
			(endif)
			(vp-cpy-rr r3 r1)
			(vp-ret)
		(endif)
		(vp-xor-rr r1 r1)
	(endswitch)
	(vp-ret)

(def-func-end)

(def-method 'string 'get_length)
	;inputs
	;r0 = string object (ptr)
	;outputs
	;r0 = string object (ptr)
	;r1 = string length (bytes)

	(class/string/get_length)
	(vp-ret)

(def-func-end)

(def-method 'string 'hash)
	;inputs
	;r0 = string object (ptr)
	;outputs
	;r0 = string object (ptr)
	;r1 = hash code (ulong)
	;trashes
	;all but r0

	;save inputs
	(vp-cpy-ir-ui r0 string_hashcode r1)
	(vpif '(r1 == 0))
		(vp-cpy-ir-ui r0 string_length r4)
		(vp-lea-i r0 string_data r3)
		(vp-add-rr r3 r4)
		(vp-xor-rr r1 r1)
		(vpif '(r3 != r4))
			(loop-start)
				(vp-cpy-ir-ub r3 0 r2)
				(vp-add-cr byte_size r3)
				(vp-add-rr r2 r1)
				(vp-cpy-rr r1 r2)
				(vp-shl-cr 10 r1)
				(vp-add-rr r1 r2)
				(vp-cpy-rr r2 r1)
				(vp-shr-cr 6 r2)
				(vp-xor-rr r2 r1)
			(loop-until '(r3 == r4))
		(endif)
		(vp-cpy-rr r1 r2)
		(vp-shl-cr 3 r1)
		(vp-add-rr r1 r2)
		(vp-cpy-rr r2 r1)
		(vp-shr-cr 11 r2)
		(vp-xor-rr r1 r2)
		(vp-cpy-rr r2 r1)
		(vp-shl-cr 15 r2)
		(vp-add-rr r2 r1)
		(vp-cpy-cr 0xffffffff r2)
		(vp-and-rr r2 r1)
		(vp-cpy-ri-i r1 r0 string_hashcode)
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'string 'ref_element)
	;inputs
	;r0 = string object (ptr)
	;r1 = char index (uint)
	;outputs
	;r0 = string object (ptr)
	;r1 = char string object (ptr)

	(vp-push r0)
	(vp-add-cr string_data r1)
	(call 'string 'create_from_buffer '((& r0 r1) byte_size) '(r1))
	(vp-pop r0)
	(vp-ret)

(def-func-end)

(def-method 'string 'slice)
	;inputs
	;r0 = string object (ptr)
	;r1 = element start index (uint)
	;r2 = element end index (uint)
	;outputs
	;r0 = string object (ptr)
	;r1 = string slice object (ptr)
	;trashes
	;r2-r6

	(vp-push r0)
	(vp-add-cr string_data r0)
	(vp-sub-rr r1 r2)
	(vp-add-rr r1 r0)
	(call 'string 'create_from_buffer '(r0 r2) '(r1))
	(vp-pop r0)
	(vp-ret)

(def-func-end)

(def-method 'string 'split)
	;inputs
	;r0 = string object (ptr)
	;r1 = split char (uint)
	;outputs
	;r0 = string object (ptr)
	;r1 = vector of string objects (ptr)
	;trashes
	;all but r0

	(ptr 'this 'splits 'stream)
	(uint 'char)

	;save inputs
	(push-scope)
	(entry 'string 'split {this, char})

	;create string split
	(call 'stream 'create {0, 0, &this->string_data, this->string_length} {stream})
	(call 'stream 'split {stream, char} {_, splits})
	(call 'stream 'deref {stream})

	(exit 'string 'split {this, splits})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'string 'find)
	;inputs
	;r0 = string object (ptr)
	;r1 = search char (uint)
	;outputs
	;r0 = string object (ptr)
	;r1 = -1, else position (int)
	;trashes
	;r2-r4

	(vp-lea-i r0 string_data r2)
	(vp-cpy-ir-ui r0 string_length r3)
	(loop-start)
		(vp-sub-cr byte_size r3)
		(breakif '(r3 < 0))
		(vp-cpy-dr-ub r2 r3 r4)
	(loop-until '(r1 == r4))
	(vp-cpy-rr r3 r1)
	(vp-ret)

(def-func-end)
