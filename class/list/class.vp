(include "sys/func.inc")
(include "class/list/class.inc")
(include "class/sym/class.inc")
(include "class/num/class.inc")
(include "class/stream/class.inc")
(include "lib/consts/chars.inc")

(gen-create 'list)
(gen-vtable 'list)

(def-method 'list :deinit)
	;inputs
	;r0 = list object (ptr)
	;outputs
	;r0 = list object (ptr)
	;trashes
	;r1-r14

	(entry 'list :deinit '(r0))

	(d-call 'list :clear '(r0) '(r0))
	(s-jump 'list :deinit '(r0))

(def-func-end)

(def-method 'list :clear)
	;inputs
	;r0 = list object (ptr)
	;outputs
	;r0 = list object (ptr)
	;trashes
	;r1-r14

	(entry 'list :clear '(r0))

	;deref all elements
	(class/array/get_both r0 r1 r2)
	(vp-push r0)
	(loop-while '(r1 /= r2))
		(vp-push r1 r2)
		(call 'obj :deref '((r1 0)))
		(vp-pop r1 r2)
		(vp-add-cr ptr_size r1)
	(loop-end)
	(vp-pop r0)
	(s-call 'list :clear '(r0) '(r0))

	(exit 'list :clear '(r0))
	(vp-ret)

(def-func-end)

(def-method 'list :ref_element)
	;inputs
	;r0 = list object (ptr)
	;r1 = element index (uint)
	;outputs
	;r0 = list object (ptr)
	;r1 = element object (ptr)
	;trashes
	;r1-r2

	(entry 'list :ref_element '(r0 r1))

	(class/array/get_element r0 r1 r1 r2)
	(class/obj/ref r1 r2)

	(exit 'list :ref_element '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'list :ref_back)
	;inputs
	;r0 = list object (ptr)
	;outputs
	;r0 = list object (ptr)
	;r1 = element object (ptr)
	;trashes
	;r1-r2

	(entry 'list :ref_back '(r0))

	(call 'list :pop_back '(r0) '(r0 r1))

	(exit 'list :ref_back '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'list :set_element)
	;inputs
	;r0 = list object (ptr)
	;r1 = element object (ptr)
	;r2 = element index (uint)
	;outputs
	;r0 = list object (ptr)
	;trashes
	;r1-r14

	(entry 'list :set_element '(r0 r1 r2))

	(assign '((r0 array_begin)) '(r3))
	(vp-shl-cr (log2 ptr_size) r2)
	(vp-push r0)
	(assign '((r2 r3) r1) '(r0 (r2 r3)))
	(call 'obj :deref '(r0))
	(vp-pop r0)

	(exit 'list :set_element '(r0))
	(vp-ret)

(def-func-end)

(def-method 'list :slice)
	;inputs
	;r0 = list object (ptr)
	;r1 = element start index (uint)
	;r2 = element end index (uint)
	;outputs
	;r0 = list object (ptr)
	;r1 = slice list object (ptr)
	;trashes
	;r1-r8

	;save inputs
	(entry 'list :slice '(r6 r7 r8))

	;create new list
	(call 'list :create nil '(r0))
	(vp-cpy-rr r8 r1)
	(vp-sub-rr r7 r1)
	(assign '(r1) '((r0 array_length)))
	(call 'list :set_capacity '(r0 r1) '(r1))
	(vp-cpy-rr r6 r0)

	;copy and ref elements
	(vpif '(r7 /= r8))
		(class/array/get_iters r0 r7 r8 r2)
		(assign '((r1 array_begin)) '(r3))
		(loop-start)
			(assign '((r7 0)) '(r2))
			(vp-add-cr ptr_size r7)
			(assign '(r2) '((r3 0)))
			(vp-add-cr ptr_size r3)
			(class/obj/ref r2 r4)
		(loop-until '(r7 = r8))
	(endif)

	(exit 'list :slice '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'list :append)
	;inputs
	;r0 = list object (ptr)
	;r1 = source list object (ptr)
	;r2 = element start index (uint)
	;r3 = element end index (uint)
	;outputs
	;r0 = list object (ptr)
	;trashes
	;r1-r9

	(entry 'list :append '(r0 r1 r2 r3))

	(vpif '(r2 /= r3))
		;save inputs
		(assign '(r1 r2 r3) '(r6 r7 r8))

		;extend list
		(assign '((r0 array_length)) '(r9))
		(vp-sub-rr r2 r3)
		(assign '((& r3 r9)) '(r1))
		(assign '(r1) '((r0 array_length)))
		(call 'list :set_capacity '(r0 r1) '(r0))

		;append and ref elements
		(class/array/get_iters r6 r7 r8 r1)
		(class/array/get_iter r0 r9 r1)
		(loop-start)
			(assign '((r7 0)) '(r1))
			(vp-add-cr ptr_size r7)
			(assign '(r1) '((r9 0)))
			(vp-add-cr ptr_size r9)
			(class/obj/ref r1 r2)
		(loop-until '(r7 = r8))
	(endif)

	(exit 'list :append '(r0))
	(vp-ret)

(def-func-end)

(def-method 'list :print)
	;inputs
	;r0 = list object (ptr)
	;r1 = stream object (ptr)
	;outputs
	;r0 = list object (ptr)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ptr 'this 'stream)
		(plong 'iter_begin 'iter_end)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'list :print '(r0 r1))
	(assign '(r0 r1) '((rsp local_this) (rsp local_stream)))

	(call 'stream :write_char '(r1 +char_lrb+))
	(call 'list :get_both '((rsp local_this)) '(_ r1 r2))
	(vpif '(r1 /= r2))
		(assign '(r1 r2) '((rsp local_iter_begin) (rsp local_iter_end)))
		(loop-start)
			(call 'obj :print '((r1 0) (rsp local_stream)))
			(assign '((rsp local_iter_begin) (rsp local_iter_end)) '(r1 r2))
			(vp-add-cr long_size r1)
			(breakif '(r1 = r2))
			(assign '(r1) '((rsp local_iter_begin)))
			(call 'stream :write_char '((rsp local_stream) +char_space+))
			(assign '((rsp local_iter_begin)) '(r1))
		(loop-end)
	(endif)
	(call 'stream :write_char '((rsp local_stream) +char_rrb+))

	(exit 'list :print '((rsp local_this)))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'list :find)
	;inputs
	;r0 = list object (ptr)
	;r1 = element object (ptr)
	;outputs
	;r0 = list object (ptr)
	;r1 = element object (ptr)
	;r2 = -1, else index (int)
	;trashes
	;r2-r14

	(vp-def (this el ovt evt tvt iter_begin iter_end) '(r7 r8 r9 r10 r11 r12 r13))

	(entry 'list :find '(r0 r1))

	;what type of element search ?
	(f-bind 'sym :vtable ovt)
	(assign '((r1 obj_vtable)) `(,evt))
	(vpif (list evt '= ovt))
		;symbol
		(s-jump 'list :find '(r0 r1))
	(endif)
	(assign '(r0 r1) `(,this ,el))
	(f-bind 'str :vtable ovt)
	(vpif (list evt '= ovt))
		;string
		(class/array/get_both this iter_begin iter_end)
		(gotoif (list iter_begin '= iter_end) 'notfound)
		(loop-start)
			(assign `((,iter_begin 0)) `(,evt))
			(assign `((,evt obj_vtable)) `(,tvt))
			(vpif (list tvt '= ovt))
				(call 'str :same `(,evt ,el))
				(gotoif (list (method-output 'str :same 1) '= 0) 'found)
			(endif)
			(vp-add-cr long_size iter_begin)
		(loop-until (list iter_begin '= iter_end))

		(exit 'list :find `(,this ,el -1))
		(vp-ret)
	(endif)
	(call 'obj :inst_of `(,el (@ ,(f-path 'num :vtable))))
	(gotoif (list (method-output 'obj :inst_of 1) '= 0) 'notfound)
	;number
	(class/array/get_both this iter_begin iter_end)
	(gotoif (list iter_begin '= iter_end) 'notfound)
	(assign `((,el num_value)) `(,ovt))
	(loop-start)
		(assign `((,iter_begin 0)) `(,evt))
		(call 'obj :inst_of `(,evt (@ ,(f-path 'num :vtable))))
		(vpif (list (method-output 'obj :inst_of 1) '/= 0))
			(assign `((,evt num_value)) '(r0))
			(gotoif (list r0 '= ovt) 'found)
		(endif)
		(vp-add-cr long_size iter_begin)
	(loop-until (list iter_begin '= iter_end))

(vp-label 'notfound)
	(exit 'list :find `(,this ,el -1))
	(vp-ret)

(vp-label 'found)
	(assign `((,this array_begin)) `(,iter_end))
	(vp-sub-rr iter_end iter_begin)
	(vp-shr-cr (log2 long_size) iter_begin)

	(exit 'list :find `(,this ,el ,iter_begin))
	(vp-ret)

(def-func-end)

(def-method 'list :rfind)
	;inputs
	;r0 = list object (ptr)
	;r1 = element object (ptr)
	;outputs
	;r0 = list object (ptr)
	;r1 = element object (ptr)
	;r2 = -1, else index (int)
	;trashes
	;r2-r14

	(vp-def (this el ovt evt tvt iter_begin iter_end) '(r7 r8 r9 r10 r11 r12 r13))

	(entry 'list :rfind '(r0 r1))

	;what type of element search ?
	(f-bind 'sym :vtable ovt)
	(assign '((r1 obj_vtable)) `(,evt))
	(vpif (list evt '= ovt))
		;symbol
		(s-jump 'list :rfind '(r0 r1))
	(endif)
	(assign '(r0 r1) `(,this ,el))
	(f-bind 'str :vtable ovt)
	(vpif (list evt '= ovt))
		;string
		(class/array/get_both this iter_end iter_begin)
		(loop-start)
			(assign `((,iter_begin ,(neg long_size))) `(,evt))
			(vp-sub-cr long_size iter_begin)
			(breakif (list iter_begin '< iter_end))
			(assign `((,evt obj_vtable)) `(,tvt))
			(continueif (list tvt '/= ovt))
			(call 'str :same `(,evt ,el))
		(loop-until (list (method-output 'str :same 1) '= 0))
		(vp-sub-rr iter_end iter_begin)
		(vp-asr-cr (log2 long_size) iter_begin)

		(exit 'list :rfind `(,this ,el ,iter_begin))
		(vp-ret)
	(endif)
	(call 'obj :inst_of `(,el (@ ,(f-path 'num :vtable))))
	(gotoif (list (method-output 'obj :inst_of 1) '= 0) 'notfound)
	;number
	(class/array/get_both this iter_end iter_begin)
	(assign `((,el num_value)) `(,ovt))
	(loop-start)
		(assign `((,iter_begin ,(neg long_size))) `(,evt))
		(vp-sub-cr long_size iter_begin)
		(breakif (list iter_begin '< iter_end))
		(assign `((,evt obj_vtable)) `(,tvt))
		(call 'obj :inst_of `(,evt (@ ,(f-path 'num :vtable))))
		(continueif (list (method-output 'obj :inst_of 1) '= 0))
		(assign `((,evt num_value)) '(r0))
	(loop-until (list r0 '= ovt))
	(vp-sub-rr iter_end iter_begin)
	(vp-asr-cr (log2 long_size) iter_begin)

	(exit 'list :rfind `(,this ,el ,iter_begin))
	(vp-ret)

(vp-label 'notfound)
	(exit 'list :find `(,this ,el -1))
	(vp-ret)

(def-func-end)
