(include "sys/func.inc")
(include "class/num/class.inc")
(include "class/sym/class.inc")
(include "class/lisp/class.inc")

(def-method 'list :lisp_list)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'list :lisp_list '(r0 r1))

	(class/obj/ref r1 r2)

	(exit 'list :lisp_list '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'list :lisp_elemset)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'list :lisp_elemset '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 3) '(r2))
	(gotoif '(r2 = 0) 'error1))

	(vp-push r0 r1)
	(defq in (method-input 'list :set_element))
	(list-bind-args r1 (array-map-args in '(1 2 0)) '(:num :list :obj))
	(assign `((,(elem 0 in) array_length)) '(r14))
	(vpif (list (elem 2 in) '< 0))
		(vp-add-rr r14 (elem 2 in))
		(vp-add-cr 1 (elem 2 in))
	(endif)
(errorcases
	(gotoif (list (elem 2 in) '< 0) 'error2)
	(gotoif (list (elem 2 in) '>= r14) 'error2))
	(class/obj/ref (elem 1 in) r14 2)
	(vp-cpy-ri (elem 1 in) rsp 0)
	(d-call 'list :set_element in)
	(vp-pop r0 r1)

	(exit 'list :lisp_elemset '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp :repl_error '(r0 "(elem-set index list val)" error_msg_wrong_types r1))
(vp-label 'error2)
	(vp-pop r0 r3)
	(jump 'lisp :repl_error '(r0 "(elem-set index list val)" error_msg_not_valid_index r3))
	(signature '(num list obj)))

(def-func-end)

(def-method 'list :lisp_merge)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'list :lisp_merge '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 2) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(array-bind-args r1 '(r0 r1))
	(class/array/get_both r1 r8 r7)
	(assign '((r0 array_length)) '(r1))
	(call 'list :set_capacity '(r0 r1) '(r0))
	(loop-while '(r8 /= r7))
		(assign '((r8 0)) '(r1))
		(vp-add-cr ptr_size r8)
		(call 'list :rfind '(r0 r1) '(r0 r1 r2))
		(continueif '(r2 /= -1))
		(class/obj/ref r1 r2)
		(call 'list :push_back '(r0 r1) '(r0 _ _ _))
	(loop-end)
	(call 'obj :ref '(r0) '(r1))
	(vp-pop r0)

	(exit 'list :lisp_merge '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(merge-obj dlist slist) -> dlist" error_msg_wrong_types r1))
	(signature '(list list)))

(def-func-end)

(def-method 'list :lisp_part)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(def-struct 'pdata)
		(ptr 'this 'func 'params)
	(def-struct-end)

	(ptr 'this 'func)
	(union
		(ptr 'args)
		(ptr 'params))

	(ptr 'value 'list)
	(pptr 'iter_begin 'liter 'hiter)
	(int 'start 'end)
(errorcases
	(int 'length))

	(push-scope)
	(entry 'list :lisp_part {this, args})

(errorcases
	(call 'lisp :env_args_sig {args, $sig, 4} '(r2))
	(gotoif '(r2 = 0) 'error1))

	(call 'list :get_begin {args} {_, iter_begin})
	(assign {iter_begin[0]} {func})
	(assign {iter_begin[ptr_size]} {list})
	(call 'num :get_value {iter_begin[ptr_size * 2]} {_, start})
	(call 'num :get_value {iter_begin[ptr_size * 3]} {_, end})
(errorcases
	(d-call 'list :get_length {list} {_, length})
	(gotoif {start < 0 || start >= end || end > length} 'error2))

	(call 'list :create nil {params})
	(call 'list :get_iter {list, start} {_, liter})
	(call 'list :get_iter {list, end} {_, hiter})
	(call 'list :partition {list, liter, hiter, $callback, &this} {_, liter})
	(call 'list :get_begin {list} {_, iter_begin})
	(call 'num :create {(liter - iter_begin) >> 3} {value})
	(call 'list :deref {params})
	(call 'sys_task :sleep '(0))

	(exit 'list :lisp_part {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp :repl_error {this, "(pivot lambda list start end)", error_msg_wrong_types, args})
(vp-label 'error2)
	(jump 'lisp :repl_error {this, "(pivot lambda list start end)", error_msg_not_valid_index, args})
	(signature '(obj list num num)))

	(pop-scope-syms)

(vp-label 'callback)
	(ptr 'pdata)
	(union
		(pptr 'liter)
		(ptr 'value))
	(union
		(pptr 'hiter)
		(int 'result))

	(push-scope)
	(entry 'array :sort_callback {pdata, liter, hiter})

	(call 'obj :ref {*liter} {liter})
	(call 'obj :ref {*hiter} {hiter})
	(d-call 'list :clear {pdata->pdata_params})
	(call 'list :push_back2 {pdata->pdata_params, liter, hiter})
	(call 'lisp :repl_apply {pdata->pdata_this, pdata->pdata_params, pdata->pdata_func} {_, value})
	(assign {0} {result})
	(vpif (cat {value->obj_vtable = @} (f-path 'num :vtable)))
		(call 'num :get_value {value} {_, result})
	(endif)
	(call 'obj :deref {value})

	(exit 'array :sort_callback {result})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'list :lisp_match)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'list :lisp_match '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 2) '(r2))
	(gotoif '(r2 = 0) 'error1))

	(vp-push r0)
	(assign '((r0 lisp_sym_underscore)) '(r5))
	(array-bind-args r1 '(r0 r1))
	(assign '((r0 array_length) (r1 array_length)) '(r4 r3))
	(vpif '(r3 = r4))
		(assign '((r0 array_begin) (r1 array_begin)) '(r3 r2))
		(vp-shl-cr (log2 ptr_size) r4)
		(vp-add-rr r3 r4)
		(vpif '(r3 /= r4))
			(loop-start)
				(assign '((r3 0) (r2 0)) '(r0 r1))
				(vp-add-cr ptr_size r3)
				(vp-add-cr ptr_size r2)
				(vpif '(r0 /= r1))
					(gotoif '(r1 /= r5) 'nomatch)
				(endif)
			(loop-until '(r3 = r4))
		(endif)
		(vp-pop r0)
		(assign '((r0 lisp_sym_t)) '(r1))
	(else)
	(vp-label 'nomatch)
		(vp-pop r0)
		(assign '((r0 lisp_sym_nil)) '(r1))
	(endif)
	(class/obj/ref r1 r2)

	(exit 'list :lisp_match '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp :repl_error '(r0 "(match? list list)" error_msg_wrong_types r1))
	(signature '(list list)))

(def-func-end)
