(include "sys/func.inc")
(include "class/list/class.inc")
(include "class/out/class.inc")
(include "class/in/class.inc")
(include "class/str/class.inc")
(include "class/stdio/class.inc")

(gen-create 'stdio)
(gen-vtable 'stdio)

(def-method 'stdio :init)
	;inputs
	;r0 = stdio object (ptr)
	;r1 = vtable (pptr)
	;outputs
	;r0 = stdio object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;r1-r14

	(ptr 'this 'args 'msg 'data)
	(union
		(ptr 'vtable)
		(ulong 'ok))

	;read init args
	(push-scope)
	(entry 'stdio :init {this, vtable})

	;init parent
	(s-call 'stdio :init {this, vtable} {_, ok})
	(vpif {ok})
		;init myself
		(call 'sys_mail :mymail nil {msg, data})
		(vpif {msg->msg_frag_length})
			;create stdin, stdout, stderr
			(call 'sys_task :mailbox nil {args})
			(call 'in :create {args} {this->stdio_stdin})
			(call 'out :create {data->stdio_msg_init_stdout_id.id_id} {this->stdio_stdout})
			(call 'out :create {data->stdio_msg_init_stderr_id.id_id} {this->stdio_stderr})

			;create args
			(call 'str :create_from_buffer {&data->stdio_msg_init_args, msg->msg_frag_length - stdio_msg_init_size} {args})
			(call 'str :split_char {args, char_space} {_, this->stdio_args})
			(call 'str :deref {args})

			;send back ack with stdin mailbox
			(assign {data->stdio_msg_init_ack_id.id_id} {msg->msg_dest.id_id})
			(assign {this->stdio_stdin->in_mbox_id} {data->stdio_msg_init_stdin_mbox_id})
			(call 'sys_mail :send {msg})
		(else)
			;abort
			(call 'sys_mail :free {msg})
			(s-call 'stdio :deinit {this})
			(assign {0} {ok})
		(endif)
	(endif)

	(exit 'stdio :init {this, ok})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'stdio :deinit)
	;inputs
	;r0 = stdio object (ptr)
	;outputs
	;r0 = stdio object (ptr)
	;trashes
	;r1-r14

	(entry 'stdio :deinit '(r0))

	;flush remaining stdout, stderr
	(vp-push r0)
	(call 'out :write_flush '((r0 stdio_stderr)))

	;send stopping on stdout
	(assign '((rsp 0)) '(r0))
	(call 'out :set_state '((r0 stdio_stdout) stream_mail_state_stopping) '(r0))

	;free stdin, stdout and stderr
	(assign '((rsp 0)) '(r0))
	(call 'in :deref '((r0 stdio_stdin)))
	(assign '((rsp 0)) '(r0))
	(call 'out :deref '((r0 stdio_stdout)))
	(assign '((rsp 0)) '(r0))
	(call 'out :deref '((r0 stdio_stderr)))

	;free args
	(assign '((rsp 0)) '(r0))
	(call 'list :deref '((r0 stdio_args)))
	(vp-pop r0)

	;deinit parent
	(s-jump 'stdio :deinit '(r0))

(def-func-end)
