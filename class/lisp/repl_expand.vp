(include "sys/func.inc")
(include "class/hmap/class.inc")
(include "class/pair/class.inc")
(include "class/sym/class.inc")
(include "class/lisp/class.inc")

(def-method 'lisp :repl_expand)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = form object iter (pptr)
	;outputs
	;r0 = lisp object (ptr)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ptr 'this 'form 'args 'macro)
		(pptr 'iter)
		(uint 'start)
	(def-struct-end)

	(entry 'lisp :repl_expand '(r0 r1))

	;expand it if list ?
	(vp-cpy-ir r1 0 r2)
	(f-bind 'list :vtable r3)
	(assign '((r2 obj_vtable)) '(r4))
	(vpif '(r4 = r3))
		(vp-alloc local_size)
		(assign '((r0 lisp_stack) r0) '(r3 (rsp local_this)))
		(assign '((r3 array_length)) '(r3))
		(assign '(r3) '((rsp local_start)))
		(loop-start 'try_expand)
			(switch 'next_iter)
				;check if a macro
				(switch)
				;not 0 length ?
				(assign '((r2 array_length)) '(r3))
				(breakif '(r3 = 0) 'next_iter)
				;not quoted list ?
				(array-bind-args r2 '(r3))
				(assign '((r0 lisp_sym_quote)) '(r4))
				(breakif '(r4 = r3) 'next_iter)
				(assign '((r0 lisp_sym_qquote)) '(r4))
				(breakif '(r4 = r3) 'next_iter)

				;is a symbol ?
				(assign '(r1 r2) '((rsp local_iter) (rsp local_form)))
				(f-bind 'sym :vtable r4)
				(assign '((r3 obj_vtable)) '(r5))
				(breakif '(r4 /= r5))
				;is defined ?
				(call 'hmap :search '((r0 lisp_environment) r3) '(_ r1 _))
				(breakif '(r1 = 0))
				;is a list ?
				(vp-cpy-ir r1 0 r1)
				(assign '((r1 pair_second)) '(r1))
				(f-bind 'list :vtable r2)
				(assign '((r1 obj_vtable)) '(r3))
				(breakif '(r2 /= r3))
				;not 0 length ?
				(assign '((r1 array_length)) '(r2))
				(breakif '(r2 = 0))
				;is a macro ?
				(assign '((rsp local_this)) '(r0))
				(array-bind-args r1 '(r2))
				(assign '((r0 lisp_sym_macro)) '(r3))
				(breakif '(r2 /= r3))
				(default)
					;replace form with macro expantion
					(assign '((rsp local_form) r1) '(r0 (rsp local_macro)))
					(d-call 'list :slice '(r0 1 (r0 array_length)) '(r0 (rsp local_args)))
					(call 'obj :deref '(r0))
					(call 'lisp :repl_apply '((rsp local_this) (rsp local_args) (rsp local_macro)) '(_ r1))
					(assign '((rsp local_iter)) '(r0))
					(vp-cpy-ri r1 r0 0)
					(call 'obj :deref '((rsp local_args)))
					(assign '((rsp local_iter) (rsp local_this)) '(r1 r0))
					(vp-cpy-ir r1 0 r2)
					(f-bind 'list :vtable r3)
					(assign '((r2 obj_vtable)) '(r4))
					(continueif '(r4 = r3) 'try_expand)
					(break 'next_iter)
				(endswitch)

				;down this lists branches
				(assign '((rsp local_this) (rsp local_form)) '(r0 r1))
				(assign '((r0 lisp_stack)) '(r0))
				(class/array/get_both r1 r1 r6)
				(f-bind 'list :vtable r7)
				(loop-start)
					(vp-cpy-ir r1 0 r2)
					(assign '((r2 obj_vtable)) '(r2))
					(vpif '(r2 = r7))
						(call 'array :push_back '(r0 r1) '(r0 r1 _ _))
					(endif)
					(vp-add-cr ptr_size r1)
				(loop-until '(r1 = r6))
			(endswitch)

			;pop back stack
			(assign '((rsp local_this) (rsp local_start)) '(r0 r3))
			(assign '((r0 lisp_stack)) '(r2))
			(assign '((r2 array_length)) '(r1))
			(breakif '(r1 = r3))
			(vp-sub-cr 1 r1)
			(assign '(r1) '((r2 array_length)))
			(class/array/get_element r2 r1 r1 r2)
			(vp-cpy-ir r1 0 r2)
		(loop-end)
		(vp-free local_size)
	(endif)

	(exit 'lisp :repl_expand '(r0))
	(vp-ret)

(def-func-end)
