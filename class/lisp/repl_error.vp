(include "sys/func.inc")
(include "class/sym/class.inc")
(include "class/hmap/class.inc")
(include "class/num/class.inc")
(include "class/lisp/class.inc")

(def-method 'lisp :repl_error)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = description c string (pubyte)
	;r2 = 0, else error msg number (uint)
	;r3 = error payload object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = error object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'desc 'payload 'file 'value)
	(pptr 'iter)
	(uint 'msg 'line)

	(push-scope)
	(entry 'lisp :repl_error {this, desc, msg, payload})

	(call 'hmap :search {this->lisp_environment, this->lisp_sym_stream_name} {_, iter, _})
	(vpif {iter})
		(assign {iter[ptr_size]} {file})
		(call 'obj :inst_of (cat {file, @} (f-path 'str :vtable)))
		(gotoif (list (method-output 'obj :inst_of 1) '= 0) 'nofile)
		(assign {&file->str_data} {file})
	(else)
	(vp-label 'nofile)
		(assign {"*file* not a string !"} {file})
	(endif)

	(assign {0} {line})
	(call 'hmap :search {this->lisp_environment, this->lisp_sym_stream_line} {_, iter, _})
	(vpif {iter})
		(assign {iter[ptr_size]} {value})
		(breakif (cat {value->obj_vtable /= @} (f-path 'num :vtable)))
		(call 'num :get_value {value} {_, line})
	(endif)

	(call 'error :create {desc, msg, payload, file, line} {value})

	(exit 'lisp :repl_error {this, value})
	(pop-scope)
	(return)

(def-func-end)
