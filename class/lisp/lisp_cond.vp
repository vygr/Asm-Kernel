(include "sys/func.inc")
(include "class/lisp/class.inc")

(def-method 'lisp :lisp_cond)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'args)
	(pptr 'iter_begin 'iter_end)

	(vp-def (this value iter_end iter_begin tmp vtable))

	(push-scope)
	(entry 'lisp :lisp_cond {this, args})

	(call 'list :get_both {args} (list '_ iter_begin iter_end))
	(assign (list iter_end) {iter_end})
	(loop-start)
		(vp-add-cr ptr_size iter_begin)
		(breakif `(,iter_begin = ,iter_end))
		(assign (list iter_begin) {iter_begin})
		(vp-cpy-ir iter_begin 0 value)

	(errorcases
		(assign `((,value obj_vtable) (@ ,(f-path 'list :vtable))) (list vtable tmp))
		(gotoif `(,vtable /= ,tmp) 'error2)
		(assign `((,value array_length)) `(,tmp))
		(errorif `(,tmp = 0) 'error1))

		(assign `((,value array_begin)) `(,tmp))
		(assign {this} (list this))
		(call 'lisp :repl_eval `(,this (,tmp 0)) (list this value))
		(vp-cpy-ir this lisp_sym_nil tmp)
		(vpif `(,value /= ,tmp))

			(assign {iter_begin} (list tmp))
			(vp-cpy-ir tmp 0 tmp)
			(class/array/get_both tmp iter_begin iter_end)
			(vp-sub-cr ptr_size iter_end)
			(gotoif `(,iter_begin = ,iter_end) 'funcexit)
			(assign (list iter_begin iter_end) {iter_begin, iter_end})
			(loop-start)

			(errorcases
				(assign `((,value obj_vtable) (@ ,(f-path 'error :vtable))) (list vtable tmp))
				(gotoif `(,vtable = ,tmp) 'funcexit))

				(vp-add-cr ptr_size iter_begin)
				(assign (list iter_begin) {iter_begin})
				(breakif `(,iter_begin = ,iter_end))
				(call 'obj :deref (list value))
				(call 'lisp :repl_eval {this, *iter_begin} (list this value))
				(assign {iter_begin, iter_end} (list iter_begin iter_end))
			(loop-end)
			(call 'obj :deref (list value))
			(jump 'lisp :repl_eval {this, *iter_begin})
		(endif)
		(call 'obj :deref (list value))
		(assign {iter_begin, iter_end} (list iter_begin iter_end))
	(loop-end)
	(assign {this} (list this))
	(assign `((,this lisp_sym_nil)) `(,value))
	(class/obj/ref value tmp)

(vp-label 'funcexit)
	(exit 'lisp :lisp_cond (list this value))
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp :repl_error {this, "(cond [(tst body)] ...)", error_msg_wrong_num_of_args, args})
(vp-label 'error2)
	(jump 'lisp :repl_error {this, "(cond [(tst body)] ...)", error_msg_not_a_list, args}))

	(pop-scope-syms)

(def-func-end)
