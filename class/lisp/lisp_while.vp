(include "sys/func.inc")
(include "class/lisp/class.inc")

(def-method 'lisp :lisp_while)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ptr 'this)
		(pptr 'iter_start 'iter_begin 'iter_end)
	(def-struct-end)

	(entry 'lisp :lisp_while '(r0 r1))

	(assign '((r1 array_length)) '(r2))
	(errorif '(r2 < 2) 'error)

	(vp-alloc local_size)
	(assign '((r1 array_begin)) '(r1))
	(vp-shl-cr (log2 long_size) r2)
	(vp-add-rr r1 r2)
	(vp-add-cr ptr_size r1)
	(assign '(r0 r1 r2) '((rsp local_this) (rsp local_iter_start) (rsp local_iter_end)))
	(loop-start 'again)
		(assign '((rsp local_iter_start)) '(r1))
		(assign '(r1) '((rsp local_iter_begin)))
		(call 'lisp :repl_eval '(r0 (r1 0)) '(r0 r1))
		(assign '((r0 lisp_sym_nil)) '(r2))
		(breakif '(r1 = r2))
		(loop-start)
		(errorcases
			(f-bind 'error :vtable r2)
			(assign '((r1 obj_vtable)) '(r3))
			(breakif '(r2 = r3)))
			(call 'obj :deref '(r1))
			(assign '((rsp local_this) (rsp local_iter_begin) (rsp local_iter_end)) '(r0 r1 r2))
			(vp-add-cr ptr_size r1)
			(continueif '(r1 = r2) 'again)
			(assign '(r1) '((rsp local_iter_begin)))
			(call 'lisp :repl_eval '(r0 (r1 0)) '(r0 r1))
		(loop-end)
	(endswitch)

	(exit 'lisp :lisp_while '(r0 r1))
	(vp-free local_size)
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(while tst body)" error_msg_wrong_num_of_args r1)))

(def-func-end)
