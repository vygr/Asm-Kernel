(include "sys/func.inc")
(include "class/stream/class.inc")
(include "class/sym/class.inc")
(include "class/func/class.inc")
(include "class/pair/class.inc")
(include "class/hmap/class.inc")
(include "class/lisp/class.inc")

(def-method 'lisp :repl_print)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = stream object (ptr)
	;r2 = value
	;outputs
	;r0 = lisp object (ptr)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ptr 'this 'stream 'value)
		(pptr 'iter_begin 'iter_end)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'lisp :repl_print '(r0 r1 r2))

	(assign '(r0 r1 r2 (r2 obj_vtable)) '((rsp local_this) (rsp local_stream) (rsp local_value) r0))
	(switch 'exit)
		;lists
		(f-bind 'list :vtable r3)
		(nextcaseif '(r0 /= r3))
		(assign '((r2 array_length)) '(r3))
		(vpif '(r3 /= 0) 'notquote)
			(array-bind-args r2 '(r3))
			(assign '((rsp local_this)) '(r0))
			(switch)
				(assign '((r0 lisp_sym_quote)) '(r2))
				(nextcaseif '(r3 /= r2))
				(call 'stream :write_char '(r1 char_quote))
			(else)
				(assign '((r0 lisp_sym_qquote)) '(r2))
				(nextcaseif '(r3 /= r2))
				(call 'stream :write_char '(r1 char_tick))
			(else)
				(assign '((r0 lisp_sym_unquote)) '(r2))
				(nextcaseif '(r3 /= r2))
				(call 'stream :write_char '(r1 char_comma))
			(else)
				(assign '((r0 lisp_sym_splicing)) '(r2))
				(breakif '(r3 /= r2) 'notquote)
				(call 'stream :write_char '(r1 char_tilda))
			(endswitch)
			(assign '((rsp local_value)) '(r0))
			(assign '((r0 array_length)) '(r1))
			(breakif '(r1 < 2) 'exit)
			(array-bind-args r0 '(_ r2))
			(call 'lisp :repl_print '((rsp local_this) (rsp local_stream) r2))
			(break 'exit)
		(endif)
		(call 'stream :write_char '(r1 char_lrb))
		(call 'list :get_both '((rsp local_value)) '(_ r1 r2))
		(vpif '(r1 /= r2))
			(assign '(r1 r2) '((rsp local_iter_begin) (rsp local_iter_end)))
			(loop-start)
				(call 'lisp :repl_print '((rsp local_this) (rsp local_stream) (r1 0)))
				(assign '((rsp local_iter_begin) (rsp local_iter_end)) '(r1 r2))
				(vp-add-cr long_size r1)
				(breakif '(r1 = r2))
				(assign '(r1) '((rsp local_iter_begin)))
				(call 'stream :write_char '((rsp local_stream) char_space))
				(assign '((rsp local_iter_begin)) '(r1))
			(loop-end)
		(endif)
		(call 'stream :write_char '((rsp local_stream) char_rrb))
		(break)
	(default)
		;errors
		(f-bind 'error :vtable r3)
		(nextcaseif '(r0 /= r3))
		(call 'stream :write_cstr '(r1 "Error: "))
		(call 'error :get_description '((rsp local_value)) '(_ r1))
		(assign '((r1 str_length)) '(r2))
		(call 'stream :write '((rsp local_stream) (& r1 str_data) r2) '(r0))
		(call 'stream :write_char '(r0 char_space))
		(call 'error :get_msg '((rsp local_value)) '(_ r1))
		(call 'stream :write_cstr '((rsp local_stream) r1) '(r0))
		(call 'stream :write_cstr '(r0 " < "))
		(call 'error :get_object '((rsp local_value)) '(_ r1))
		(call 'lisp :repl_print '((rsp local_this) (rsp local_stream) r1))
		(call 'stream :write_cstr '((rsp local_stream) " > File: "))
		(call 'error :get_file '((rsp local_value)) '(_ r1))
		(assign '((r1 str_length)) '(r2))
		(call 'stream :write '((rsp local_stream) (& r1 str_data) r2) '(r0))
		(call 'stream :write_char '(r0 char_lrb))
		(call 'error :get_line '((rsp local_value)) '(_ r1))
		(call 'str :create_from_long '(r1 10) '(r0))
		(assign '(r0) '((rsp local_value)))
		(call 'stream :write '((rsp local_stream) (& r0 str_data) (r0 str_length)) '(r0))
		(call 'stream :write_char '(r0 char_rrb))
		(call 'obj :deref '((rsp local_value)))
	(else)
		;default to whatever the object does
		(call 'obj :print '(r2 r1))
	(endswitch)

	(exit 'lisp :repl_print '((rsp local_this)))
	(vp-free local_size)
	(vp-ret)

(def-func-end)
