(include "sys/func.inc")
(include "class/stream/class.inc")
(include "class/lisp/class.inc")
(include "class/str/class.inc")

(def-method 'lisp :read)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = stream object (ptr)
	;r2 = next char (uint)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = form object (ptr)
	;r2 = next char (uint)
	;trashes
	;r1-r14

	(entry 'lisp :read '(r0 r1 r2))

	;skip white space
(vp-label 'skip_white)
	(vp-push r1)
	(loop-start)
		(breakif '(r2 > char_space) '(r2 = -1))
		(call 'lisp :read_char '(r0 r1 r2) '(r0 r2))
		(assign '((rsp 0)) '(r1))
	(loop-end)
	(vp-pop r1)

	;what are we reading ?
	(switch)
	(vpcase '(r2 = char_lrb))
		(jump 'lisp :read_list '(r0 r1 r2))
	(vpcase '(r2 >= char_0) '(r2 <= char_9))
		(jump 'lisp :read_num '(r0 r1 r2))
	(vpcase '(r2 = char_minus))
		(jump 'lisp :read_num '(r0 r1 r2))
	(vpcase '(r2 = char_double_quote))
		(jump 'lisp :read_str '(r0 r1 r2))
	(vpcase '(r2 = char_lcb))
		(jump 'lisp :read_str '(r0 r1 char_rcb))
	(vpcase '(r2 = char_quote))
		(jump 'lisp :read_rmacro '(r0 r1 r2 (r0 lisp_sym_quote)))
	(vpcase '(r2 = char_tick))
		(jump 'lisp :read_rmacro '(r0 r1 r2 (r0 lisp_sym_qquote)))
	(vpcase '(r2 = char_comma))
		(jump 'lisp :read_rmacro '(r0 r1 r2 (r0 lisp_sym_unquote)))
	(vpcase '(r2 = char_tilda))
		(jump 'lisp :read_rmacro '(r0 r1 r2 (r0 lisp_sym_splicing)))
	(vpcase '(r2 = char_semi))
		(vp-push r0)
		(call 'stream :skip_not '(r1 char_lf) '(r0))
		(call 'stream :read_char '(r0) '(r1 r2))
		(vp-pop r0)
		(goto 'skip_white)
	(vpcase '(r2 = -1))
		(assign '((r0 lisp_sym_nil)) '(r1))
		(class/obj/ref r1 r3)
		(break)
(errorcases
	(vpcase '(r2 = char_rrb))
		(vp-push r0 r1)
		(call 'stream :read_char '(r1) '(_ (rsp 0)))
		(assign '((rsp ptr_size)) '(r0))
		(call 'lisp :repl_error '(r0 "unexpected )" 0 (r0 lisp_sym_nil)) '(_ r1))
		(vp-pop r0 r2)
		(break)
	(vpcase '(r2 = char_rcb))
		(vp-push r0 r1)
		(call 'stream :read_char '(r1) '(_ (rsp 0)))
		(assign '((rsp ptr_size)) '(r0))
		(call 'lisp :repl_error '(r0 "unexpected }" 0 (r0 lisp_sym_nil)) '(_ r1))
		(vp-pop r0 r2)
		(break))
	(default)
		(jump 'lisp :read_sym '(r0 r1 r2))
	(endswitch)

	(exit 'lisp :read '(r0 r1 r2))
	(vp-ret)

(def-func-end)
