(include "sys/func.inc")
(include "class/lisp/class.inc")

(def-method 'lisp :repl_eval_list)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = list list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ptr 'this)
		(pptr 'iter_begin 'iter_end)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'lisp :repl_eval_list '(r0 r1))

	(assign '((r1 array_begin) (r1 array_length) (r0 lisp_sym_nil)) '(r3 r2 r1))
	(switch 'exit)
	(vpcase '(r2 /= 0))
		(vp-shl-cr (log2 long_size) r2)
		(vp-add-rr r3 r2)
		(assign '(r0 r2) '((rsp local_this) (rsp local_iter_end)))
		(loop-start)
			(assign '(r3) '((rsp local_iter_begin)))
			(call 'lisp :repl_eval '(r0 (r3 0)) '(r0 r1))
		(errorcases
			(f-bind 'error :vtable r2)
			(assign '((r1 obj_vtable)) '(r3))
			(breakif '(r2 = r3) 'exit))
			(assign '((rsp local_iter_begin)) '(r3))
			(assign '((r3 0) r1) '(r0 (r3 0)))
			(call 'obj :deref '(r0))
			(assign '((rsp local_this) (rsp local_iter_begin) (rsp local_iter_end)) '(r0 r3 r2))
			(vp-add-cr ptr_size r3)
		(loop-until '(r3 = r2))
		(vp-cpy-ir r3 (neg ptr_size) r1)
	(default)
		(class/obj/ref r1 r2)
	(endswitch)

	(exit 'lisp :repl_eval_list '(r0 r1))
	(vp-free local_size)
	(vp-ret)

(def-func-end)
