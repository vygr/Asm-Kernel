(include "sys/func.inc")
(include "sys/load/class.inc")
(include "sys/str/class.inc")
(include "class/sym/class.inc")
(include "class/sstream/class.inc")
(include "class/fixed/class.inc")
(include "class/lisp/class.inc")

(def-method 'lisp :read_num)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = stream object (ptr)
	;r2 = next char (uint)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = num object (ptr)
	;r2 = next char (uint)
	;trashes
	;r1-r14

	(ptr 'this 'stream 'str_stream 'string 'num)
	(pubyte 'buffer)
	(long 'val)
	(int 'char 'sign)

	(push-scope)
	(entry 'lisp :read_num {this, stream, char})

	(assign {char} {sign})
	(vpif {char = char_minus})
		(call 'stream :read_char {stream} {_, char})
		(breakif {char >= char_0})
		(call 'sym :intern_cstr {"-"} {num})
		(goto 'exit)
	(endif)

	(call 'str :create_from_buffer {0, str_gap} {string})
	(call 'sstream :create {string} {str_stream})
	(loop-while {char = char_dot
				|| char >= char_0 && char <= char_9
				|| char >= char_a && char <= char_z
				|| char >= char_A && char <= char_Z})
		(call 'stream :write_char {str_stream, char})
		(call 'stream :read_char {stream} {_, char})
	(loop-end)
	(call 'sstream :ref_string {str_stream} {_, string})
	(call 'sstream :destroy {str_stream})

	;pick base
	(assign {&string->str_data} {buffer})
	(assign {ubyte(buffer + 1)} {val})
	(vpif {val = char_x})
		(assign {buffer + 2, 16} {buffer, val})
	(elseif {val = char_o})
		(assign {buffer + 2, 8} {buffer, val})
	(elseif {val = char_b})
		(assign {buffer + 2, 2} {buffer, val})
	(else)
		(assign {10} {val})
	(endif)

	;create the number
	(call 'sys_str :to_long {buffer, val} {val, num})
	(vpif {sign = char_minus})
		(assign {-val} {val})
	(endif)
	(vpif {num})
		;there was a fixed point
		(call 'fixed :create {val} {num})
	(else)
		;just parsed an int
		(call 'num :create {val} {num})
	(endif)
	(call 'str :destroy {string})

(vp-label 'exit)
	(exit 'lisp :read_num {this, num, char})
	(pop-scope)
	(return)

(def-func-end)
