(include 'sys/func.inc)
(include 'sys/load/class.inc)
(include 'class/str/class.inc)
(include 'class/sstream/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp :read_str)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = stream object (ptr)
	;r2 = close char (uint)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = str object (ptr)
	;r2 = next char (uint)
	;trashes
	;r1-r14

	(ptr 'this 'stream 'str_stream 'value)
	(int 'char 'cchar)

	(push-scope)
	(entry 'lisp :read_str {this, stream, cchar})

	(switch)
		(vp-def (buf bufp bufe stm cc c))
		(assign {stream, cchar} `(,stm ,cc))
		(assign `((,stm stream_bufp) (,stm stream_bufe)) `(,bufp ,bufe))
		(assign `(,bufp) `(,buf))
		(loop-start)
			(assign `((,bufp 0 ub)) `(,c))
			(gotoif `(,bufp = ,bufe) 'slow_but_sure)
			(gotoif `(,c = char_lf) 'slow_but_sure)
			(vp-add-cr byte_size bufp)
		(loop-until `(,c = ,cc))
		(assign `(,bufp) `((,stm stream_bufp)))
		(vp-sub-rr buf bufp)
		(vp-sub-cr byte_size bufp)
		(call 'str :create_from_buffer `(,buf ,bufp) {value})
	(else)
	(vp-label 'slow_but_sure)
		(call 'str :create_from_buffer {0, str_gap} {value})
		(call 'sstream :create {value} {str_stream})
		(call 'stream :read_char {stream} {_, char})
		(loop-whilenot {char = -1 || char = cchar})
			(call 'stream :write_char {str_stream, char})
			(call 'lisp :read_char {this, stream, char} {_, char})
		(loop-end)
		(call 'sstream :ref_string {str_stream} {_, value})
		(call 'sstream :destroy {str_stream})
	(endswitch)
	(call 'stream :read_char {stream} {_, char})

	(exit 'lisp :read_str {this, value, char})
	(pop-scope)
	(return)

(def-func-end)
