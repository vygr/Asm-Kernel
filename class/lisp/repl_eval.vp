(include "sys/func.inc")
(include "class/sym/class.inc")
(include "class/func/class.inc")
(include "class/hmap/class.inc")
(include "class/lisp/class.inc")

(def-method 'lisp :repl_eval)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = form object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(def-struct 'local)
		(ptr 'this 'form 'value 'func 'args)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'lisp :repl_eval '(r0 r1))

	;evaluate based on type
	(assign '((r1 obj_vtable)) '(r2))
	(f-bind 'sym :vtable r3)
	(f-bind 'list :vtable r4)
	(switch)
	(vpcase '(r2 = r3))
		;eval to symbol binding ?
		(assign '((r1 str_data ub)) '(r2))
		(gotoif '(r2 = char_colon) 'toself)
		(assign '(r0 r1) '((rsp local_this) (rsp local_form)))
		(call 'hmap :get '((r0 lisp_environment) r1) '(_ r1))
		(errorif '(r1 = 0) 'error2)
		(assign '((rsp local_this)) '(r0))
		(break)
	(vpcase '(r2 = r4))
		;apply function, don't eval args if special form
	(errorcases
		(assign '((r1 array_length)) '(r2))
		(gotoif '(r2 = 0) 'error1))
		(assign '(r0 r1) '((rsp local_this) (rsp local_form)))
		(array-bind-args r1 '(r1))
		(call 'lisp :repl_eval '(r0 r1) '(r0 r1))
		(assign '((r1 obj_vtable)) '(r2))
	(errorcases
		(f-bind 'error :vtable r3)
		(breakif '(r2 = r3)))
		(assign '(r1) '((rsp local_func)))
		(f-bind 'func :vtable r3)
		(vpif '(r2 = r3))
			;compiled function, check if special form
			(assign '((r1 num_value)) '(r2))
			(vp-and-cr 7 r2)
			(nextcaseif '(r2 = 0))
			(call 'lisp :repl_apply '(r0 (rsp local_form) r1) '(_ (rsp local_value)))
		(else)
			;none compiled function or none special form
			(assign '((rsp local_form)) '(r0))
			(d-call 'list :slice '(r0 1 (r0 array_length)) '(_ (rsp local_args)))
			(call 'lisp :repl_eval_list '((rsp local_this) (rsp local_args)) '(_ r1))
		(errorcases
			(assign '((r1 obj_vtable)) '(r2))
			(f-bind 'error :vtable r3)
			(assign '(r1) '((rsp local_value)))
			(gotoif '(r2 = r3) 'error))
			(call 'obj :deref '(r1))
			(call 'lisp :repl_apply '((rsp local_this) (rsp local_args) (rsp local_func)) '(_ (rsp local_value)))
		(vp-label 'error)
			(call 'obj :deref '((rsp local_args)))
		(endif)
		(call 'obj :deref '((rsp local_func)))
		(assign '((rsp local_this) (rsp local_value)) '(r0 r1))
	(else)
	(vp-label 'toself)
		;eval to self
		(class/obj/ref r1 r2)
	(endswitch)

	(exit 'lisp :repl_eval '(r0 r1))
	(vp-free local_size)
	(vp-ret)

(errorcases
(vp-label 'error1)
	(vp-free local_size)
	(jump 'lisp :repl_error '(r0 "(eval form [env])" error_msg_not_a_lambda r1))
(vp-label 'error2)
	(assign '((rsp local_this) (rsp local_form)) '(r0 r3))
	(vp-free local_size)
	(jump 'lisp :repl_error '(r0 "(eval form [env])" error_msg_symbol_not_bound r3)))

(def-func-end)
