(include "sys/func.inc")
(include "class/stream/class.inc")
(include "class/hmap/class.inc")
(include "class/num/class.inc")
(include "class/lisp/class.inc")
(include "class/sym/class.inc")

(def-method 'lisp :lisp_repl)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'args 'stream 'ast 'value 'old_file 'old_line)
	(int 'char)
	(uint 'length)

	(push-scope)
	(entry 'lisp :lisp_repl {this, args})

	(d-call 'list :get_length {args} {_, length})
	(errorif {length /= 2} 'error1)
	(call 'list :get_first {args} {_, stream})

(errorcases
	(call 'obj :inst_of (cat {stream, @} (f-path 'stream :vtable)))
	(gotoif `(,(method-output 'obj :inst_of 1) = 0) 'error2))

	(call 'list :get_second {args} {_, value})

(errorcases
	(call 'obj :inst_of (cat {value, @} (f-path 'str :vtable)))
	(gotoif `(,(method-output 'obj :inst_of 1) = 0) 'error3))

	;push old file and line, set to this stream info
	(call 'hmap :get {this->lisp_environment, this->lisp_sym_stream_name} {_, old_file})
	(call 'hmap :get {this->lisp_environment, this->lisp_sym_stream_line} {_, old_line})
	(call 'hmap :set {this->lisp_environment, this->lisp_sym_stream_name, value})
	(call 'num :create {1} {value})
	(call 'hmap :set {this->lisp_environment, this->lisp_sym_stream_line, value})
	(call 'obj :deref {value})

	(call 'stream :read_char {stream} {_, char})
	(loop-while {char /= -1})
		(call 'stream :write_flush {this->lisp_stdout})
		(call 'stream :write_flush {this->lisp_stderr})
		(call 'lisp :read {this, stream, char} {_, ast, char})
;; (call 'stream :write_cstr {this->lisp_stdout, "read:"})
;; (call 'stream :write_char {this->lisp_stdout, char_lf})
;; (call 'lisp :repl_print {this, this->lisp_stdout, ast})
;; (call 'stream :write_char {this->lisp_stdout, char_lf})
		(call 'lisp :repl_expand {this, &ast})
;; (call 'stream :write_cstr {this->lisp_stdout, "expanded:"})
;; (call 'stream :write_char {this->lisp_stdout, char_lf})
;; (call 'lisp :repl_print {this, this->lisp_stdout, ast})
;; (call 'stream :write_char {this->lisp_stdout, char_lf})
		(call 'lisp :repl_eval {this, ast} {_, value})
;; (call 'stream :write_cstr {this->lisp_stdout, "evaled:"})
;; (call 'stream :write_char {this->lisp_stdout, char_lf})
;; (call 'lisp :repl_print {this, this->lisp_stdout, value})
;; (call 'stream :write_char {this->lisp_stdout, char_lf})
		(call 'obj :deref {ast})
		(vpif {stream = this->lisp_stdin})
			(call 'lisp :repl_print {this, this->lisp_stdout, value})
			(call 'stream :write_char {this->lisp_stdout, char_lf})
		(endif)
		(errorif (cat {value->obj_vtable = @} (f-path 'error :vtable)) 'exit1)
		(call 'obj :deref {value})
	(loop-end)
	(call 'obj :ref {this->lisp_sym_nil} {value})

(vp-label 'exit1)
	;pop old file and line info
	(call 'hmap :set {this->lisp_environment, this->lisp_sym_stream_name, old_file})
	(call 'obj :deref {old_file})
	(call 'hmap :set {this->lisp_environment, this->lisp_sym_stream_line, old_line})
	(call 'obj :deref {old_line})

	(exit 'lisp :lisp_repl {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(jump 'lisp :repl_error {this, "(repl stream path)", error_msg_wrong_num_of_args, args})
(vp-label 'error2)
	(jump 'lisp :repl_error {this, "(repl stream path)", error_msg_not_a_stream, args})
(vp-label 'error3)
	(jump 'lisp :repl_error {this, "(repl stream path)", error_msg_not_a_string, args}))

	(pop-scope-syms)

(def-func-end)
