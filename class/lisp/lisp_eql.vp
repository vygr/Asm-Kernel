(include "sys/func.inc")
(include "class/str/class.inc")
(include "class/func/class.inc")
(include "class/lisp/class.inc")

(def-method 'lisp :lisp_eql)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'lisp :lisp_eql '(r0 r1))

(errorcases
	(assign '((r1 array_length)) '(r2))
	(gotoif '(r2 /= 2) 'error))

	(array-bind-args r1 '(r3 r4))
	(gotoif '(r3 = r4) 'same)
	(switch)
	(assign '((r3 obj_vtable) (r4 obj_vtable) (r0 lisp_sym_nil)) '(r5 r6 r1))
	(breakif '(r5 /= r6))
	(f-bind 'str :vtable r6)
	(vpcase '(r5 = r6))
		(vp-cpy-rr r0 r7)
		(call 'str :same '(r3 r4) '(_ r1))
		(vp-cpy-rr r7 r0)
		(gotoif '(r1 = 0) 'same)
		(assign '((r0 lisp_sym_nil)) '(r1))
		(break)
	(default)
		(assign '(r0 r1) '(r7 r8))
		(call 'obj :inst_of `(r3 (@ ,(f-path 'num :vtable))) '(_ r2))
		(assign '(r7 r8) '(r0 r1))
		(nextcaseif '(r2 = 0))
		(class/num/get_values '(r3 r4))
		(breakif '(r3 /= r4))
	(vp-label 'same)
		(assign '((r0 lisp_sym_t)) '(r1))
	(endswitch)
	(class/obj/ref r1 r2)

	(exit 'lisp :lisp_eql '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(eql form form)" error_msg_wrong_num_of_args r1)))

(def-func-end)
