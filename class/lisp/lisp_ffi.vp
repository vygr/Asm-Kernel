(include "sys/func.inc")
(include "sys/load/class.inc")
(include "class/func/class.inc")
(include "class/sym/class.inc")
(include "class/hmap/class.inc")
(include "class/lisp/class.inc")

(def-method 'lisp :lisp_ffi)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'value 'args)
	(pptr 'iter_begin)

	(push-scope)
	(entry 'lisp :lisp_ffi {this, args})

(errorcases
	(call 'lisp :env_args_sig {args, $sig, 4} '(r2))
	(gotoif '(r2 = 0) 'error))

	(call 'list :get_begin {args} {_, iter_begin})
	(call 'sys_load :bind {&iter_begin[ptr_size * 2]->str_data} {value})
	(errorifnot {value} 'error)
	(call 'func :create {value | iter_begin[ptr_size * 3]->num_value} {value})
	(call 'hmap :insert {this->lisp_environment, iter_begin[ptr_size], value})

	(exit 'lisp :lisp_ffi {this, value})
	(return)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error {this, "(ffi sym path flags)", error_msg_wrong_types, args})
	(signature '(obj sym str num)))

	(pop-scope-syms)

(def-func-end)
