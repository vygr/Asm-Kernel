(include "sys/func.inc")
(include "sys/mail/class.inc")
(include "class/sstream/class.inc")
(include "class/lisp/class.inc")
(include "class/sym/class.inc")
(include "gui/component/class.inc")

(def-func 'class/lisp/run nil 8192)
	;lisp run loop task
	;inputs
	;msg of lisp filename

	(ptr 'script 'lisp 'stream 'file 'value 'args)

	;init app vars
	(push-scope)

	;get param string
	(call 'sys_mail :mymail nil {script, _})
	(call 'sys_mail :free_obj {script} {script, _, _})

	;string output stream
	(call 'str :create_from_buffer {0, str_gap} {value})
	(call 'sstream :create {value} {stream})

	;create lisp class
	(call 'lisp :create {stream, stream, stream} {lisp})
	(call 'obj :deref {stream})
	(vpif {lisp})
		;run lisp file
		(call 'str :create_from_file {&script->str_data} {file})
		(vpif {file})
			;REPL from file stream
			(call 'list :create nil {args})
			(call 'sstream :create {file} {stream})
			(call 'str :ref {script})
			(call 'list :push_back2 {args, stream, script})
			(call 'lisp :lisp_repl {lisp, args} {_, value})
			(call 'list :clear {args})
			(vpif {value /= lisp->lisp_sym_nil})
			(vp-label 'error)
				;error in repl
				(call 'lisp :repl_print {lisp, lisp->lisp_stderr, value})
				(call 'stream :write_char {lisp->lisp_stderr, char_lf})
				(call 'stream :write_flush {lisp->lisp_stderr})
			(else)
				;do we have a main ?
				(call 'component :get_prop {lisp->lisp_environment, static_sym_main} {_, stream})
				(breakifnot {stream})
				(call 'obj :deref {value})
				(call 'lisp :repl_apply {lisp, args, stream} {_, value})
				(gotoif {value->obj_vtable = @class/error/vtable} 'error)
			(endif)
			(call 'list :deref {args})
			(call 'obj :deref {value})
		(endif)
		(call 'lisp :deref {lisp})
	(endif)
	(call 'str :deref {script})

	;flush interned symbols and mem blocks
	(call 'sym :flush)
	(call 'sys_mem :collect)

	(pop-scope)
	(return)

(def-func-end)
