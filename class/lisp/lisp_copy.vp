(include "sys/func.inc")
(include "class/lisp/class.inc")

(def-method 'lisp :lisp_copy)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(entry 'lisp :lisp_copy '(r0 r1))

(errorcases
	(assign '((r1 array_length)) '(r2))
	(gotoif '(r2 /= 1) 'error))

	;ref and copy if list
	(array-bind-args r1 '(r1))
	(class/obj/ref r1 r2)
	(f-bind 'list :vtable r7)
	(assign '((r1 obj_vtable)) '(r2))
	(vpif '(r2 = r7))
		(vp-push r1)
		(assign '((r0 lisp_stack) (& rsp 0) r0) '(r9 r10 r11))
		(assign '((r9 array_length)) '(r9))
		(loop-start)
			;replace form with copy, deref can't cause destroy !
			(vp-cpy-ir r10 0 r0)
			(d-call 'list :slice '(r0 0 (r0 array_length)) '(r0 r1))
			(class/obj/ref r0 r2 -1)
			(vp-cpy-ri r1 r10 0)

			;down this lists branches
			(class/array/get_both r1 r1 r6)
			(assign '((r11 lisp_stack)) '(r0))
			(loop-while '(r1 /= r6))
				(vp-cpy-ir r1 0 r2)
				(assign '((r2 obj_vtable)) '(r2))
				(vpif '(r2 = r7))
					(call 'array :push_back '(r0 r1) '(r0 r1 _ _))
				(endif)
				(vp-add-cr ptr_size r1)
			(loop-end)

			;pop back stack
			(assign '((r0 array_length)) '(r1))
			(breakif '(r1 = r9))
			(vp-sub-cr 1 r1)
			(assign '(r1) '((r0 array_length)))
			(class/array/get_element r0 r1 r10 r2)
		(loop-end)

		(vp-cpy-rr r11 r0)
		(vp-pop r1)
	(endif)

	(exit 'lisp :lisp_copy '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(copy form)" error_msg_wrong_num_of_args r1)))

(def-func-end)
