(include "sys/func.inc")
(include "class/num/class.inc")
(include "class/str/class.inc")
(include "gui/canvas/class.inc")
(include "class/lisp/class.inc")
(include "lib/consts/colors.inc")

(import "apps/mandelbrot/mbmath.inc")

(def-func 'apps/mandelbrot/depth)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(vp-def (i x0 y0 xc yc x2 y2 four tmp))

	(entry '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 2) '(r2))
	(gotoif '(r2 = 0) 'error))

	(vp-push r0)
	(list-bind-args r1 `(,x0 ,y0) '(:num :num))
	(assign `(0 0 0 0 0 ,(<< 4 +mbfp_shift+)) `(,i ,xc ,yc ,x2 ,y2 ,four))
	(loop-start)
		(vp-cpy-rr x2 tmp)
		(vp-add-rr y2 tmp)
		(breakif (list tmp '>= four))

		(vp-mul-rr xc yc)
		(vp-cpy-rr x2 xc)
		(vp-asr-cr (- +mbfp_shift+ 1) yc)
		(vp-sub-rr y2 xc)
		(vp-add-rr y0 yc)
		(vp-add-rr x0 xc)

		(vp-cpy-rr yc y2)
		(vp-cpy-rr xc x2)
		(vp-mul-rr y2 y2)
		(vp-mul-rr x2 x2)
		(vp-add-cr 1 i)
		(vp-asr-cr +mbfp_shift+ y2)
		(vp-asr-cr +mbfp_shift+ x2)
	(loop-until (list i '= 255))

	(call 'num :create `(,i) '(r1))
	(vp-pop r0)

	(exit '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(depth x0 y0)" error_msg_wrong_types r1))
	(signature '(num num)))

(def-func-end)

(def-func 'apps/mandelbrot/tile)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args list object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)
	;trashes
	;r1-r14

	(ptr 'this 'canvas)
	(pubyte 'data)
	(uint 'x 'y 'x1 'y1 'xp 'yp 'col)

	(entry '(r0 r1))

(errorcases
	(call 'lisp :env_args_sig '(r1 ($ sig) 2) '(r2))
	(gotoif '(r2 = 0) 'error))

	(push-scope)
	(assign '(r0) {this})

	(list-bind-args r1 '(r0 r1) '(:canvas :str))
	(array-get-args r1 '(r7 r8 r9 r10) 'ui)
	(vp-add-cr (* 4 int_size) r1)
	(assign '(r0 r1 r7 r8 r9 r10 r8) {canvas, data, x, y, x1, y1, yp})
	(loop-start)
		(assign {x} {xp})
		(loop-start)
			(assign {*data} {col})
			(vpif {col = 255})
				(assign {0} {col})
			(endif)
			(assign {+argb_black+ + (col << 16) + ((col & 0x7f) << 9) + ((col & 0x3f) << 2)} {canvas->canvas_color})
			(call 'canvas :plot {canvas, xp, yp})
			(assign {data + byte_size} {data})
		(loop-until {(xp + 1 => xp) = x1})
	(loop-until {(yp + 1 => yp) = y1})

	(call 'num :create {(x1 - x) * (y1 - y)} '(r1))

	(assign {this} '(r0))
	(exit '(r0 r1))
	(pop-scope)
	(return)

(errorcases
(vp-label 'error)
	(jump 'lisp :repl_error '(r0 "(tile canvas data)" error_msg_wrong_types r1))
	(signature '(canvas str)))

(def-func-end)
